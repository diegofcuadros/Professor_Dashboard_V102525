{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Digital Epidemiology Laboratory - Research Team Management System\n\n## Overview\n\nDigital Epidemiology Laboratory is a comprehensive research team management system designed for epidemiological research and health data science projects. The system provides AI-powered insights for managing multiple concurrent research projects, team members, and productivity analytics. The platform transforms traditional chaotic lab management into a streamlined, data-driven operation by automating routine supervisory tasks and providing intelligent recommendations for epidemiological research workflows.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Full-Stack Architecture\nThe application follows a modern full-stack architecture with clear separation of concerns:\n\n**Frontend Layer**\n- React 18 with TypeScript for type-safe development\n- Component-based architecture using shadcn/ui design system\n- TanStack React Query for efficient server state management\n- Wouter for lightweight client-side routing\n- Tailwind CSS for styling with custom design tokens\n\n**Backend Layer**\n- Express.js server with TypeScript\n- RESTful API design with structured route handlers\n- Modular service-based architecture separating concerns\n- Custom storage abstraction layer for database operations\n\n**Database Layer**\n- PostgreSQL as primary database using Drizzle ORM\n- Type-safe database schema definitions shared between client and server\n- Session management integrated with authentication system\n\n### Authentication & Authorization\n- Replit Auth integration for secure user authentication\n- Role-based access control (Admin/Professor, Student, Postdoc)\n- Session-based authentication with PostgreSQL session storage\n- Protected routes with middleware validation\n\n### Project Structure\nThe codebase uses a monorepo structure with clear boundaries:\n- `/client` - React frontend application\n- `/server` - Express backend with API routes\n- `/shared` - Common types, schemas, and utilities\n- Component co-location with related logic and styles\n\n### State Management\n- Client-side state managed through React Query for server state\n- Local component state for UI interactions\n- Form state handled through react-hook-form with validation\n\n### UI/UX Architecture\n- Design system built on Radix UI primitives\n- Responsive design with mobile-first approach\n- Consistent theming through CSS custom properties\n- Role-specific dashboards (Admin, Student, Postdoc views)\n- Data visualization for progress tracking and analytics\n\n### Development Workflow\n- TypeScript for type safety across the entire stack\n- Vite for fast development and building\n- ESM modules throughout the application\n- Hot module replacement for efficient development\n\n## External Dependencies\n\n### Database & Storage\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Drizzle ORM**: Type-safe database toolkit with migration support\n- **connect-pg-simple**: PostgreSQL session store for Express\n\n### Authentication\n- **Replit Auth**: OpenID Connect authentication system\n- **Passport.js**: Authentication middleware strategy\n\n### Frontend Libraries\n- **Radix UI**: Unstyled, accessible UI components\n- **TanStack React Query**: Server state management\n- **React Hook Form**: Form handling and validation\n- **Tailwind CSS**: Utility-first CSS framework\n- **Lucide React**: Icon library\n- **date-fns**: Date manipulation utilities\n\n### Development Tools\n- **Vite**: Build tool and development server\n- **TypeScript**: Type checking and development experience\n- **ESBuild**: Fast JavaScript bundler for production builds\n\n### Validation & Types\n- **Zod**: Runtime type validation\n- **drizzle-zod**: Integration between Drizzle and Zod for schema validation\n\nThe system is designed to be scalable, maintainable, and provide a smooth development experience while delivering powerful research team management capabilities.","size_bytes":3921},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/ai-engine.ts":{"content":"// AI Engine for generating insights, predictions, and recommendations\n// In production, this would integrate with actual ML models and APIs\n\nimport { storage } from \"./storage\";\nimport type { User, Project, ProgressUpdate } from \"@shared/schema\";\n\nexport interface AIInsight {\n  id: string;\n  type: 'productivity' | 'risk' | 'opportunity' | 'prediction';\n  priority: 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  recommendation: string;\n  confidence: number;\n  impact: 'positive' | 'negative' | 'neutral';\n  createdAt: Date;\n  userId?: string;\n  projectId?: string;\n}\n\nexport interface ProductivityMetrics {\n  userId: string;\n  overallScore: number;\n  weeklyTrend: number;\n  strengths: string[];\n  improvements: string[];\n  predictions: string[];\n}\n\nexport interface ProjectRiskAssessment {\n  projectId: string;\n  riskLevel: 'low' | 'medium' | 'high';\n  delayProbability: number;\n  completionPrediction: Date;\n  riskFactors: string[];\n  mitigationStrategies: string[];\n}\n\nclass AIEngine {\n  \n  /**\n   * Generate AI insights for a lab or specific user\n   */\n  async generateInsights(userId?: string): Promise<AIInsight[]> {\n    const insights: AIInsight[] = [];\n    \n    try {\n      // Fetch relevant data\n      const users = await storage.getAllUsers();\n      const projects = await storage.getAllProjects();\n      \n      // Generate productivity insights\n      const productivityInsights = await this.analyzeProductivity(users, projects);\n      insights.push(...productivityInsights);\n      \n      // Generate risk assessments\n      const riskInsights = await this.assessProjectRisks(projects);\n      insights.push(...riskInsights);\n      \n      // Generate opportunity insights\n      const opportunityInsights = await this.identifyOpportunities(users, projects);\n      insights.push(...opportunityInsights);\n      \n      // Generate predictions\n      const predictionInsights = await this.generatePredictions(projects);\n      insights.push(...predictionInsights);\n      \n      return insights.sort((a, b) => {\n        const priorityOrder = { high: 3, medium: 2, low: 1 };\n        return priorityOrder[b.priority] - priorityOrder[a.priority];\n      });\n      \n    } catch (error) {\n      console.error('AI insight generation failed:', error);\n      return [];\n    }\n  }\n\n  /**\n   * Analyze productivity patterns and trends\n   */\n  private async analyzeProductivity(users: User[], projects: Project[]): Promise<AIInsight[]> {\n    const insights: AIInsight[] = [];\n    \n    // Mock productivity analysis - in production, this would use real ML models\n    const activeUsers = users.filter(u => u.isActive);\n    const activeProjects = projects.filter(p => p.status === 'active');\n    \n    if (activeUsers.length > 0 && activeProjects.length > 0) {\n      // Simulate finding a productivity trend\n      const productivityScore = Math.floor(Math.random() * 30) + 70; // 70-100\n      const trend = Math.floor(Math.random() * 20) - 10; // -10 to +10\n      \n      if (trend > 5) {\n        insights.push({\n          id: `productivity-${Date.now()}`,\n          type: 'productivity',\n          priority: 'medium',\n          title: 'Team Productivity Surge Detected',\n          description: `Your team's productivity has increased by ${trend}% over the past 2 weeks, reaching ${productivityScore}% efficiency.`,\n          recommendation: 'Document current successful practices and consider sharing them with other teams.',\n          confidence: 85,\n          impact: 'positive',\n          createdAt: new Date()\n        });\n      } else if (trend < -5) {\n        insights.push({\n          id: `productivity-${Date.now()}`,\n          type: 'productivity',\n          priority: 'high',\n          title: 'Productivity Decline Alert',\n          description: `Team productivity has decreased by ${Math.abs(trend)}% recently, now at ${productivityScore}%.`,\n          recommendation: 'Schedule team check-ins to identify blockers and provide additional support.',\n          confidence: 78,\n          impact: 'negative',\n          createdAt: new Date()\n        });\n      }\n    }\n    \n    return insights;\n  }\n\n  /**\n   * Assess project risks and predict issues\n   */\n  private async assessProjectRisks(projects: Project[]): Promise<AIInsight[]> {\n    const insights: AIInsight[] = [];\n    \n    for (const project of projects) {\n      if (project.status === 'active') {\n        // Simulate risk assessment based on project data\n        const riskScore = Math.random();\n        const daysSinceStart = project.createdAt \n          ? Math.floor((Date.now() - new Date(project.createdAt).getTime()) / (1000 * 60 * 60 * 24))\n          : 0;\n        \n        // Higher risk for longer running projects\n        if (riskScore > 0.7 || daysSinceStart > 60) {\n          const delayProbability = Math.floor(riskScore * 50) + 20;\n          \n          insights.push({\n            id: `risk-${project.id}`,\n            type: 'risk',\n            priority: riskScore > 0.8 ? 'high' : 'medium',\n            title: `Project Timeline Risk: ${project.name}`,\n            description: `${project.name} has a ${delayProbability}% probability of delay based on current progress patterns.`,\n            recommendation: riskScore > 0.8 \n              ? 'Consider reallocating resources or adjusting scope to meet deadlines.'\n              : 'Monitor progress closely and prepare contingency plans.',\n            confidence: Math.floor(riskScore * 30) + 60,\n            impact: 'negative',\n            createdAt: new Date(),\n            projectId: project.id\n          });\n        }\n      }\n    }\n    \n    return insights;\n  }\n\n  /**\n   * Identify collaboration and efficiency opportunities\n   */\n  private async identifyOpportunities(users: User[], projects: Project[]): Promise<AIInsight[]> {\n    const insights: AIInsight[] = [];\n    \n    // Simulate finding collaboration opportunities\n    const studentsAndPostdocs = users.filter(u => \n      u.isActive && (u.role === 'student' || u.role === 'postdoc')\n    );\n    \n    if (studentsAndPostdocs.length >= 2 && projects.length >= 2) {\n      const randomUser = studentsAndPostdocs[Math.floor(Math.random() * studentsAndPostdocs.length)];\n      \n      insights.push({\n        id: `opportunity-${Date.now()}`,\n        type: 'opportunity',\n        priority: 'medium',\n        title: 'Cross-Project Knowledge Sharing Opportunity',\n        description: `${randomUser.firstName} ${randomUser.lastName}'s expertise in ${randomUser.specialization || 'their field'} could benefit other ongoing projects.`,\n        recommendation: 'Organize knowledge sharing sessions or consider cross-project collaboration.',\n        confidence: 72,\n        impact: 'positive',\n        createdAt: new Date(),\n        userId: randomUser.id\n      });\n    }\n    \n    return insights;\n  }\n\n  /**\n   * Generate predictions for project completion and resource needs\n   */\n  private async generatePredictions(projects: Project[]): Promise<AIInsight[]> {\n    const insights: AIInsight[] = [];\n    \n    for (const project of projects.slice(0, 2)) { // Limit to avoid too many insights\n      if (project.status === 'active') {\n        // Simulate ML prediction for project completion\n        const daysToCompletion = Math.floor(Math.random() * 60) + 14; // 14-74 days\n        const confidence = Math.floor(Math.random() * 20) + 75; // 75-95%\n        \n        const completionDate = new Date();\n        completionDate.setDate(completionDate.getDate() + daysToCompletion);\n        \n        insights.push({\n          id: `prediction-${project.id}`,\n          type: 'prediction',\n          priority: 'low',\n          title: `Completion Prediction: ${project.name}`,\n          description: `Based on current progress patterns, ${project.name} is predicted to complete on ${completionDate.toLocaleDateString()}.`,\n          recommendation: daysToCompletion > 50 \n            ? 'Consider additional resources to accelerate progress.'\n            : 'Maintain current momentum and prepare for project wrap-up.',\n          confidence,\n          impact: 'neutral',\n          createdAt: new Date(),\n          projectId: project.id\n        });\n      }\n    }\n    \n    return insights;\n  }\n\n  /**\n   * Generate personalized productivity metrics for a user\n   */\n  async generateProductivityMetrics(userId: string): Promise<ProductivityMetrics> {\n    try {\n      const user = await storage.getUser(userId);\n      if (!user) {\n        throw new Error('User not found');\n      }\n\n      // In production, this would analyze actual time logs, progress updates, etc.\n      const baseScore = Math.floor(Math.random() * 30) + 60; // 60-90\n      const weeklyTrend = Math.floor(Math.random() * 20) - 10; // -10 to +10\n      \n      return {\n        userId,\n        overallScore: baseScore,\n        weeklyTrend,\n        strengths: [\n          'Consistent daily progress updates',\n          'Strong collaboration with team members',\n          'Proactive problem-solving approach'\n        ],\n        improvements: [\n          'Consider breaking large tasks into smaller milestones',\n          'Schedule regular code reviews',\n          'Document research findings more frequently'\n        ],\n        predictions: [\n          `Based on current trends, productivity likely to ${weeklyTrend > 0 ? 'continue improving' : 'stabilize'} next week`,\n          'Optimal working hours appear to be 9 AM - 12 PM based on progress patterns',\n          'Collaboration frequency correlates with higher output quality'\n        ]\n      };\n      \n    } catch (error) {\n      console.error('Failed to generate productivity metrics:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Assess risk level for a specific project\n   */\n  async assessProjectRisk(projectId: string): Promise<ProjectRiskAssessment> {\n    try {\n      const project = await storage.getProject(projectId);\n      if (!project) {\n        throw new Error('Project not found');\n      }\n\n      // Simulate risk assessment\n      const riskScore = Math.random();\n      const delayProbability = Math.floor(riskScore * 60) + 10; // 10-70%\n      \n      const completionDate = new Date();\n      completionDate.setDate(completionDate.getDate() + Math.floor(Math.random() * 90) + 14);\n      \n      const riskLevel: 'low' | 'medium' | 'high' = \n        riskScore < 0.3 ? 'low' : riskScore < 0.7 ? 'medium' : 'high';\n      \n      return {\n        projectId,\n        riskLevel,\n        delayProbability,\n        completionPrediction: completionDate,\n        riskFactors: [\n          'Complexity higher than initial estimates',\n          'Limited senior developer availability',\n          'Dependencies on external data sources'\n        ],\n        mitigationStrategies: [\n          'Break down complex tasks into smaller components',\n          'Allocate additional senior resources',\n          'Develop backup plans for data dependencies',\n          'Implement weekly progress reviews'\n        ]\n      };\n      \n    } catch (error) {\n      console.error('Failed to assess project risk:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Generate automated recommendations based on current state\n   */\n  async generateRecommendations(userId?: string): Promise<string[]> {\n    const recommendations: string[] = [];\n    \n    try {\n      const insights = await this.generateInsights(userId);\n      \n      // Extract recommendations from insights\n      insights.forEach(insight => {\n        if (insight.priority === 'high' || insight.confidence > 80) {\n          recommendations.push(insight.recommendation);\n        }\n      });\n      \n      // Add general productivity recommendations\n      recommendations.push(\n        'Schedule regular one-on-one meetings with team members',\n        'Implement daily standup meetings for active projects',\n        'Set up automated progress tracking reminders',\n        'Consider knowledge sharing sessions between projects'\n      );\n      \n      return recommendations.slice(0, 5); // Limit to top 5\n      \n    } catch (error) {\n      console.error('Failed to generate recommendations:', error);\n      return [\n        'Monitor project progress regularly',\n        'Maintain open communication with team',\n        'Document important decisions and changes'\n      ];\n    }\n  }\n}\n\nexport const aiEngine = new AIEngine();","size_bytes":12250},"server/auth.ts":{"content":"import session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\n\n// Extend Express Request type to include user\ndeclare global {\n  namespace Express {\n    interface Request {\n      user?: User;\n    }\n  }\n}\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET || \"lab-intelligence-secret-key-change-in-production\",\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    name: 'connect.sid',\n    cookie: {\n      httpOnly: true,\n      secure: false, // Set to false for development\n      sameSite: 'lax',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  if (!req.session || !(req.session as any).userId) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  try {\n    const userId = (req.session as any).userId;\n    const user = await storage.getUser(userId);\n    \n    if (!user || !user.isActive) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    req.user = user;\n    return next();\n  } catch (error) {\n    console.error(\"Authentication error:\", error);\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n};\n\nexport const requireRole = (roles: string[]): RequestHandler => {\n  return (req, res, next) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Unauthorized\" });\n    }\n\n    if (!roles.includes(req.user.role || '')) {\n      return res.status(403).json({ message: \"Access denied\" });\n    }\n\n    return next();\n  };\n};","size_bytes":2052},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { initializeWebSocket } from \"./websocket\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n  \n  // Initialize WebSocket for real-time notifications\n  initializeWebSocket(server);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2205},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4221},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, requireRole } from \"./auth\";\nimport { \n  insertProjectSchema, \n  insertProjectAssignmentSchema, \n  insertProgressUpdateSchema, \n  insertNotificationSchema,\n  insertProjectTaskSchema,\n  insertTaskAssignmentSchema,\n  insertTaskCompletionSchema,\n  createUserSchema,\n  loginSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware\n  await setupAuth(app);\n\n  // Auth routes\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const validatedData = createUserSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(validatedData.email);\n      if (existingUser) {\n        return res.status(400).json({ message: \"User already exists with this email\" });\n      }\n      \n      const user = await storage.createUser(validatedData);\n      \n      // Set up session\n      (req.session as any).userId = user.id;\n      \n      // Don't send password hash to client\n      const { passwordHash, ...userWithoutPassword } = user;\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid registration data\", errors: error.errors });\n      }\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ message: \"Failed to register user\" });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const validatedData = loginSchema.parse(req.body);\n      \n      const user = await storage.validateUserPassword(validatedData.email, validatedData.password);\n      if (!user) {\n        return res.status(401).json({ message: \"Invalid email or password\" });\n      }\n      \n      if (!user.isActive) {\n        return res.status(401).json({ message: \"Account is deactivated\" });\n      }\n      \n      // Set up session\n      (req.session as any).userId = user.id;\n      \n      // Don't send password hash to client\n      const { passwordHash, ...userWithoutPassword } = user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid login data\", errors: error.errors });\n      }\n      console.error(\"Login error:\", error);\n      res.status(500).json({ message: \"Failed to login\" });\n    }\n  });\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.session?.destroy((err) => {\n      if (err) {\n        console.error(\"Logout error:\", err);\n        return res.status(500).json({ message: \"Failed to logout\" });\n      }\n      res.clearCookie('connect.sid', { \n        path: '/',\n        httpOnly: true,\n        secure: process.env.NODE_ENV === \"production\"\n      });\n      res.json({ message: \"Logged out successfully\" });\n    });\n  });\n\n  app.get('/api/auth/user', isAuthenticated, async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Don't send password hash to client\n      const { passwordHash, ...userWithoutPassword } = req.user;\n      res.json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // User Management Routes\n  app.get('/api/users', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      \n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.put('/api/users/:id/role', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      \n      const { role } = req.body;\n      if (!['student', 'postdoc', 'professor', 'admin'].includes(role)) {\n        return res.status(400).json({ message: \"Invalid role\" });\n      }\n      \n      const user = await storage.updateUserRole(req.params.id, role);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error updating user role:\", error);\n      res.status(500).json({ message: \"Failed to update user role\" });\n    }\n  });\n\n  app.delete('/api/users/:id', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      \n      const user = await storage.deactivateUser(req.params.id);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json({ message: \"User deactivated successfully\" });\n    } catch (error) {\n      console.error(\"Error deactivating user:\", error);\n      res.status(500).json({ message: \"Failed to deactivate user\" });\n    }\n  });\n\n  // Project Management Routes\n  app.get('/api/projects', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n\n      let projects;\n      if (currentUser.role === 'admin' || currentUser.role === 'professor') {\n        projects = await storage.getAllProjects();\n      } else {\n        projects = await storage.getUserProjects(currentUser.id);\n      }\n      \n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.post('/api/projects', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      const currentUser = req.user!;\n\n      const validatedData = insertProjectSchema.parse({\n        ...req.body,\n        createdBy: currentUser.id,\n      });\n\n      const project = await storage.createProject(validatedData);\n      res.status(201).json(project);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid project data\", errors: error.errors });\n      }\n      console.error(\"Error creating project:\", error);\n      res.status(500).json({ message: \"Failed to create project\" });\n    }\n  });\n\n  app.get('/api/projects/:id', isAuthenticated, async (req: any, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      \n      res.json(project);\n    } catch (error) {\n      console.error(\"Error fetching project:\", error);\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  // Assignment Routes\n  app.post('/api/assignments', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n\n      const validatedData = insertProjectAssignmentSchema.parse(req.body);\n      const assignment = await storage.createProjectAssignment(validatedData);\n      res.status(201).json(assignment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid assignment data\", errors: error.errors });\n      }\n      console.error(\"Error creating assignment:\", error);\n      res.status(500).json({ message: \"Failed to create assignment\" });\n    }\n  });\n\n  app.get('/api/assignments/user/:userId', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n\n      // Users can only see their own assignments unless they're admin/professor\n      if (req.params.userId !== currentUser.id && \n          currentUser.role !== 'admin' && \n          currentUser.role !== 'professor') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const assignments = await storage.getUserAssignments(req.params.userId);\n      res.json(assignments);\n    } catch (error) {\n      console.error(\"Error fetching assignments:\", error);\n      res.status(500).json({ message: \"Failed to fetch assignments\" });\n    }\n  });\n\n  // Progress Routes\n  app.post('/api/progress', isAuthenticated, async (req: any, res) => {\n    try {\n      const validatedData = insertProgressUpdateSchema.parse(req.body);\n      const update = await storage.createProgressUpdate(validatedData);\n      res.status(201).json(update);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid progress data\", errors: error.errors });\n      }\n      console.error(\"Error creating progress update:\", error);\n      res.status(500).json({ message: \"Failed to create progress update\" });\n    }\n  });\n\n  app.get('/api/progress/user/:userId', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n\n      // Users can only see their own progress unless they're admin/professor\n      if (req.params.userId !== currentUser.id && \n          currentUser.role !== 'admin' && \n          currentUser.role !== 'professor') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const progress = await storage.getUserProgress(req.params.userId);\n      res.json(progress);\n    } catch (error) {\n      console.error(\"Error fetching progress:\", error);\n      res.status(500).json({ message: \"Failed to fetch progress\" });\n    }\n  });\n\n  // Notification Routes\n  app.get('/api/notifications/user/:userId', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n\n      // Users can only see their own notifications\n      if (req.params.userId !== currentUser.id) {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const notifications = await storage.getUserNotifications(req.params.userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.put('/api/notifications/:id/read', isAuthenticated, async (req: any, res) => {\n    try {\n      const notification = await storage.markNotificationAsRead(req.params.id);\n      if (!notification) {\n        return res.status(404).json({ message: \"Notification not found\" });\n      }\n      \n      res.json(notification);\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ message: \"Failed to mark notification as read\" });\n    }\n  });\n\n  // Analytics Routes\n  app.get('/api/analytics/user/:userId', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n\n      // Users can only see their own analytics unless they're admin/professor\n      if (req.params.userId !== currentUser.id && \n          currentUser.role !== 'admin' && \n          currentUser.role !== 'professor') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const metrics = await storage.getUserMetrics(req.params.userId);\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching user metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch user metrics\" });\n    }\n  });\n\n  app.get('/api/analytics/lab', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n\n      const metrics = await storage.getLabMetrics();\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching lab metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch lab metrics\" });\n    }\n  });\n\n  // AI Analytics Routes\n  app.get('/api/ai/insights', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      const { aiEngine } = await import(\"./ai-engine\");\n      const insights = await aiEngine.generateInsights();\n      res.json(insights);\n    } catch (error) {\n      console.error(\"Error generating AI insights:\", error);\n      res.status(500).json({ message: \"Failed to generate insights\" });\n    }\n  });\n\n  app.get('/api/ai/productivity/:userId', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const targetUserId = req.params.userId;\n\n      if (targetUserId !== currentUser.id && \n          currentUser.role !== 'admin' && \n          currentUser.role !== 'professor') {\n        return res.status(403).json({ message: \"Access denied\" });\n      }\n\n      const { aiEngine } = await import(\"./ai-engine\");\n      const metrics = await aiEngine.generateProductivityMetrics(targetUserId);\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error generating productivity metrics:\", error);\n      res.status(500).json({ message: \"Failed to generate productivity metrics\" });\n    }\n  });\n\n  app.get('/api/ai/recommendations', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const userId = currentUser.role === 'admin' || currentUser.role === 'professor' \n        ? undefined \n        : currentUser.id;\n      \n      const { aiEngine } = await import(\"./ai-engine\");\n      const recommendations = await aiEngine.generateRecommendations(userId);\n      res.json({ recommendations });\n    } catch (error) {\n      console.error(\"Error generating recommendations:\", error);\n      res.status(500).json({ message: \"Failed to generate recommendations\" });\n    }\n  });\n\n  // Time Tracking Routes\n  app.get('/api/time-entries', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const weekStart = req.query.weekStart as string;\n      \n      // Users can only see their own entries unless they're admin/professor\n      let timeEntries;\n      if (currentUser.role === 'admin' || currentUser.role === 'professor') {\n        timeEntries = await storage.getAllTimeEntries(weekStart);\n      } else {\n        timeEntries = await storage.getUserTimeEntries(currentUser.id, weekStart);\n      }\n      \n      res.json(timeEntries);\n    } catch (error) {\n      console.error(\"Error fetching time entries:\", error);\n      res.status(500).json({ message: \"Failed to fetch time entries\" });\n    }\n  });\n\n  app.post('/api/time-entries', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const entryData = {\n        ...req.body,\n        userId: currentUser.id // Ensure user can only create entries for themselves\n      };\n      \n      const timeEntry = await storage.createTimeEntry(entryData);\n      res.status(201).json(timeEntry);\n    } catch (error) {\n      console.error(\"Error creating time entry:\", error);\n      res.status(500).json({ message: \"Failed to create time entry\" });\n    }\n  });\n\n  app.put('/api/time-entries/:id/approve', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const entryId = req.params.id;\n      \n      const approvedEntry = await storage.approveTimeEntry(entryId, currentUser.id);\n      res.json(approvedEntry);\n    } catch (error) {\n      console.error(\"Error approving time entry:\", error);\n      res.status(500).json({ message: \"Failed to approve time entry\" });\n    }\n  });\n\n  // Work Schedule Routes\n  app.get('/api/work-schedules', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const weekStart = req.query.weekStart as string;\n      \n      // Users can only see their own schedules unless they're admin/professor\n      let schedules;\n      if (currentUser.role === 'admin' || currentUser.role === 'professor') {\n        schedules = await storage.getAllWorkSchedules(weekStart);\n      } else {\n        schedules = await storage.getUserWorkSchedules(currentUser.id, weekStart);\n      }\n      \n      res.json(schedules);\n    } catch (error) {\n      console.error(\"Error fetching work schedules:\", error);\n      res.status(500).json({ message: \"Failed to fetch work schedules\" });\n    }\n  });\n\n  app.post('/api/work-schedules', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const scheduleData = {\n        ...req.body,\n        userId: currentUser.id\n      };\n      \n      const schedule = await storage.createWorkSchedule(scheduleData);\n      res.status(201).json(schedule);\n    } catch (error) {\n      console.error(\"Error creating work schedule:\", error);\n      res.status(500).json({ message: \"Failed to create work schedule\" });\n    }\n  });\n\n  app.put('/api/work-schedules/:id/approve', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const scheduleId = req.params.id;\n      \n      const approvedSchedule = await storage.approveWorkSchedule(scheduleId, currentUser.id);\n      res.json(approvedSchedule);\n    } catch (error) {\n      console.error(\"Error approving work schedule:\", error);\n      res.status(500).json({ message: \"Failed to approve work schedule\" });\n    }\n  });\n\n  // Reports and Analytics Routes\n  app.get('/api/reports', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const reports = await storage.getUserReports(currentUser.id);\n      res.json(reports);\n    } catch (error) {\n      console.error(\"Error fetching reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch reports\" });\n    }\n  });\n\n  app.get('/api/reports/productivity/:dateRange', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      const dateRange = req.params.dateRange;\n      const productivityData = await storage.getProductivityReports(dateRange);\n      res.json(productivityData);\n    } catch (error) {\n      console.error(\"Error fetching productivity reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch productivity reports\" });\n    }\n  });\n\n  app.get('/api/reports/projects/:dateRange', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      const dateRange = req.params.dateRange;\n      const projectData = await storage.getProjectReports(dateRange);\n      res.json(projectData);\n    } catch (error) {\n      console.error(\"Error fetching project reports:\", error);\n      res.status(500).json({ message: \"Failed to fetch project reports\" });\n    }\n  });\n\n  app.post('/api/reports/generate', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const reportData = {\n        ...req.body,\n        createdBy: currentUser.id,\n        status: 'generating'\n      };\n      \n      const report = await storage.createReport(reportData);\n      \n      // In a real implementation, this would queue a background job\n      // For Phase 4, we'll simulate the generation process\n      setTimeout(async () => {\n        await storage.updateReportStatus(report.id, 'completed');\n      }, 3000);\n      \n      res.status(201).json(report);\n    } catch (error) {\n      console.error(\"Error generating report:\", error);\n      res.status(500).json({ message: \"Failed to generate report\" });\n    }\n  });\n\n  app.get('/api/reports/:id/download', isAuthenticated, async (req, res) => {\n    try {\n      const reportId = req.params.id;\n      const downloadUrl = await storage.getReportDownloadUrl(reportId);\n      res.json({ downloadUrl });\n    } catch (error) {\n      console.error(\"Error downloading report:\", error);\n      res.status(500).json({ message: \"Failed to download report\" });\n    }\n  });\n\n  // Task Management Routes\n  \n  // Create a new task for a project (professors/admin only)\n  app.post('/api/projects/:projectId/tasks', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const projectId = req.params.projectId;\n      \n      const validatedData = insertProjectTaskSchema.parse({\n        ...req.body,\n        projectId,\n        createdBy: currentUser.id,\n      });\n      \n      const task = await storage.createProjectTask(validatedData);\n      res.status(201).json(task);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid task data\", errors: error.errors });\n      }\n      console.error(\"Error creating task:\", error);\n      res.status(500).json({ message: \"Failed to create task\" });\n    }\n  });\n\n  // Get all tasks for a project\n  app.get('/api/projects/:projectId/tasks', isAuthenticated, async (req, res) => {\n    try {\n      const projectId = req.params.projectId;\n      const tasks = await storage.getProjectTasks(projectId);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching project tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch project tasks\" });\n    }\n  });\n\n  // Update a task (professors/admin only)\n  app.put('/api/tasks/:taskId', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      const taskId = req.params.taskId;\n      const validatedData = insertProjectTaskSchema.partial().parse(req.body);\n      \n      const task = await storage.updateProjectTask(taskId, validatedData);\n      if (!task) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      \n      res.json(task);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid task data\", errors: error.errors });\n      }\n      console.error(\"Error updating task:\", error);\n      res.status(500).json({ message: \"Failed to update task\" });\n    }\n  });\n\n  // Delete a task (professors/admin only)\n  app.delete('/api/tasks/:taskId', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      const taskId = req.params.taskId;\n      const success = await storage.deleteProjectTask(taskId);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Task not found\" });\n      }\n      \n      res.json({ message: \"Task deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting task:\", error);\n      res.status(500).json({ message: \"Failed to delete task\" });\n    }\n  });\n\n  // Assign task to a user (professors/admin only)\n  app.post('/api/tasks/:taskId/assign', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const taskId = req.params.taskId;\n      const { userId } = req.body;\n      \n      if (!userId) {\n        return res.status(400).json({ message: \"userId is required\" });\n      }\n      \n      const validatedData = insertTaskAssignmentSchema.parse({\n        taskId,\n        userId,\n        assignedBy: currentUser.id,\n      });\n      \n      const assignment = await storage.assignTaskToUser(validatedData);\n      res.status(201).json(assignment);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid assignment data\", errors: error.errors });\n      }\n      console.error(\"Error assigning task:\", error);\n      res.status(500).json({ message: \"Failed to assign task\" });\n    }\n  });\n\n  // Get all tasks assigned to current user\n  app.get('/api/user/tasks', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const tasks = await storage.getUserTasks(currentUser.id);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching user tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch user tasks\" });\n    }\n  });\n\n  // Get user tasks for a specific project\n  app.get('/api/user/projects/:projectId/tasks', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const projectId = req.params.projectId;\n      const tasks = await storage.getUserTasksForProject(currentUser.id, projectId);\n      res.json(tasks);\n    } catch (error) {\n      console.error(\"Error fetching user project tasks:\", error);\n      res.status(500).json({ message: \"Failed to fetch user project tasks\" });\n    }\n  });\n\n  // Complete a task\n  app.post('/api/tasks/:taskId/complete', isAuthenticated, async (req, res) => {\n    try {\n      const currentUser = req.user!;\n      const taskId = req.params.taskId;\n      \n      // Check if already completed\n      const alreadyCompleted = await storage.isTaskCompletedByUser(taskId, currentUser.id);\n      if (alreadyCompleted) {\n        return res.status(400).json({ message: \"Task already completed\" });\n      }\n      \n      const validatedData = insertTaskCompletionSchema.parse({\n        taskId,\n        userId: currentUser.id,\n        notes: req.body.notes || null,\n        hoursSpent: req.body.hoursSpent || null,\n      });\n      \n      const completion = await storage.completeTask(validatedData);\n      res.status(201).json(completion);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ message: \"Invalid completion data\", errors: error.errors });\n      }\n      console.error(\"Error completing task:\", error);\n      res.status(500).json({ message: \"Failed to complete task\" });\n    }\n  });\n\n  // Get task completions (for professors/admin to review)\n  app.get('/api/tasks/:taskId/completions', isAuthenticated, requireRole(['admin', 'professor']), async (req, res) => {\n    try {\n      const taskId = req.params.taskId;\n      const completions = await storage.getTaskCompletions(taskId);\n      res.json(completions);\n    } catch (error) {\n      console.error(\"Error fetching task completions:\", error);\n      res.status(500).json({ message: \"Failed to fetch task completions\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":25601},"server/storage.ts":{"content":"import {\n  users,\n  projects,\n  projectAssignments,\n  progressUpdates,\n  notifications,\n  projectTasks,\n  taskAssignments,\n  taskCompletions,\n  type User,\n  type InsertUser,\n  type CreateUserInput,\n  type Project,\n  type InsertProject,\n  type ProjectAssignment,\n  type InsertProjectAssignment,\n  type ProgressUpdate,\n  type InsertProgressUpdate,\n  type Notification,\n  type InsertNotification,\n  type ProjectTask,\n  type InsertProjectTask,\n  type TaskAssignment,\n  type InsertTaskAssignment,\n  type TaskCompletion,\n  type InsertTaskCompletion,\n} from \"@shared/schema\";\nimport bcrypt from \"bcrypt\";\nimport { db } from \"./db\";\nimport { eq, and, desc, sql } from \"drizzle-orm\";\n\n// Interface for storage operations\nexport interface IStorage {\n  // User operations for email/password authentication\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(userData: CreateUserInput): Promise<User>;\n  validateUserPassword(email: string, password: string): Promise<User | null>;\n  \n  // User management operations\n  getAllUsers(): Promise<User[]>;\n  updateUserRole(id: string, role: string): Promise<User | undefined>;\n  deactivateUser(id: string): Promise<User | undefined>;\n  \n  // Project operations\n  createProject(project: InsertProject): Promise<Project>;\n  getProject(id: string): Promise<Project | undefined>;\n  getAllProjects(): Promise<Project[]>;\n  getUserProjects(userId: string): Promise<Project[]>;\n  updateProject(id: string, updates: Partial<InsertProject>): Promise<Project | undefined>;\n  \n  // Project assignment operations\n  createProjectAssignment(assignment: InsertProjectAssignment): Promise<ProjectAssignment>;\n  getUserAssignments(userId: string): Promise<ProjectAssignment[]>;\n  getProjectAssignments(projectId: string): Promise<ProjectAssignment[]>;\n  \n  // Progress tracking operations\n  createProgressUpdate(update: InsertProgressUpdate): Promise<ProgressUpdate>;\n  getProjectProgress(projectId: string): Promise<ProgressUpdate[]>;\n  getUserProgress(userId: string): Promise<ProgressUpdate[]>;\n  \n  // Notification operations\n  createNotification(notification: InsertNotification): Promise<Notification>;\n  getUserNotifications(userId: string): Promise<Notification[]>;\n  markNotificationAsRead(id: string): Promise<Notification | undefined>;\n  \n  // Analytics operations\n  getUserMetrics(userId: string): Promise<any>;\n  getLabMetrics(): Promise<any>;\n\n  // Time tracking operations\n  createTimeEntry(entry: any): Promise<any>;\n  getAllTimeEntries(weekStart?: string): Promise<any[]>;\n  getUserTimeEntries(userId: string, weekStart?: string): Promise<any[]>;\n  approveTimeEntry(entryId: string, approverId: string): Promise<any>;\n\n  // Work schedule operations\n  createWorkSchedule(schedule: any): Promise<any>;\n  getAllWorkSchedules(weekStart?: string): Promise<any[]>;\n  getUserWorkSchedules(userId: string, weekStart?: string): Promise<any[]>;\n  approveWorkSchedule(scheduleId: string, approverId: string): Promise<any>;\n\n  // Report operations\n  createReport(reportData: any): Promise<any>;\n  getUserReports(userId: string): Promise<any[]>;\n  updateReportStatus(reportId: string, status: string): Promise<any>;\n  getReportDownloadUrl(reportId: string): Promise<string>;\n  getProductivityReports(dateRange: string): Promise<any[]>;\n  getProjectReports(dateRange: string): Promise<any[]>;\n\n  // Task operations\n  createProjectTask(task: InsertProjectTask): Promise<ProjectTask>;\n  getProjectTasks(projectId: string): Promise<ProjectTask[]>;\n  updateProjectTask(id: string, updates: Partial<InsertProjectTask>): Promise<ProjectTask | undefined>;\n  deleteProjectTask(id: string): Promise<boolean>;\n  \n  // Task assignment operations\n  assignTaskToUser(assignment: InsertTaskAssignment): Promise<TaskAssignment>;\n  getUserTasks(userId: string): Promise<(ProjectTask & { projectName: string, isCompleted?: boolean })[]>;\n  getUserTasksForProject(userId: string, projectId: string): Promise<(ProjectTask & { isCompleted?: boolean })[]>;\n  \n  // Task completion operations\n  completeTask(completion: InsertTaskCompletion): Promise<TaskCompletion>;\n  getTaskCompletions(taskId: string): Promise<TaskCompletion[]>;\n  isTaskCompletedByUser(taskId: string, userId: string): Promise<boolean>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations for email/password authentication\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: CreateUserInput): Promise<User> {\n    const saltRounds = 12;\n    const passwordHash = await bcrypt.hash(userData.password, saltRounds);\n    \n    const [user] = await db\n      .insert(users)\n      .values({\n        email: userData.email,\n        passwordHash,\n        firstName: userData.firstName,\n        lastName: userData.lastName,\n        role: userData.role || 'student',\n        department: userData.department,\n        yearLevel: userData.yearLevel,\n        specialization: userData.specialization,\n        isActive: true,\n      })\n      .returning();\n    return user;\n  }\n\n  async validateUserPassword(email: string, password: string): Promise<User | null> {\n    const user = await this.getUserByEmail(email);\n    if (!user || !user.passwordHash) {\n      return null;\n    }\n    \n    const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n    return isValidPassword ? user : null;\n  }\n\n  // User management operations\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.isActive, true)).orderBy(users.firstName);\n  }\n\n  async updateUserRole(id: string, role: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ role, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async deactivateUser(id: string): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  // Project operations\n  async createProject(project: InsertProject): Promise<Project> {\n    const [newProject] = await db.insert(projects).values(project).returning();\n    return newProject;\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project;\n  }\n\n  async getAllProjects(): Promise<Project[]> {\n    return await db.select().from(projects).orderBy(desc(projects.createdAt));\n  }\n\n  async getUserProjects(userId: string): Promise<Project[]> {\n    return await db\n      .select()\n      .from(projects)\n      .innerJoin(projectAssignments, eq(projects.id, projectAssignments.projectId))\n      .where(eq(projectAssignments.userId, userId))\n      .then(rows => rows.map(row => row.projects));\n  }\n\n  async updateProject(id: string, updates: Partial<InsertProject>): Promise<Project | undefined> {\n    const [project] = await db\n      .update(projects)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    return project;\n  }\n\n  // Project assignment operations\n  async createProjectAssignment(assignment: InsertProjectAssignment): Promise<ProjectAssignment> {\n    const [newAssignment] = await db.insert(projectAssignments).values(assignment).returning();\n    return newAssignment;\n  }\n\n  async getUserAssignments(userId: string): Promise<ProjectAssignment[]> {\n    return await db\n      .select()\n      .from(projectAssignments)\n      .where(and(eq(projectAssignments.userId, userId), eq(projectAssignments.isActive, true)));\n  }\n\n  async getProjectAssignments(projectId: string): Promise<ProjectAssignment[]> {\n    return await db\n      .select()\n      .from(projectAssignments)\n      .where(and(eq(projectAssignments.projectId, projectId), eq(projectAssignments.isActive, true)));\n  }\n\n  // Progress tracking operations\n  async createProgressUpdate(update: InsertProgressUpdate): Promise<ProgressUpdate> {\n    const [newUpdate] = await db.insert(progressUpdates).values(update).returning();\n    return newUpdate;\n  }\n\n  async getProjectProgress(projectId: string): Promise<ProgressUpdate[]> {\n    return await db\n      .select()\n      .from(progressUpdates)\n      .innerJoin(projectAssignments, eq(progressUpdates.assignmentId, projectAssignments.id))\n      .where(eq(projectAssignments.projectId, projectId))\n      .orderBy(desc(progressUpdates.createdAt))\n      .then(rows => rows.map(row => row.progress_updates));\n  }\n\n  async getUserProgress(userId: string): Promise<ProgressUpdate[]> {\n    return await db\n      .select()\n      .from(progressUpdates)\n      .innerJoin(projectAssignments, eq(progressUpdates.assignmentId, projectAssignments.id))\n      .where(eq(projectAssignments.userId, userId))\n      .orderBy(desc(progressUpdates.createdAt))\n      .then(rows => rows.map(row => row.progress_updates));\n  }\n\n  // Notification operations\n  async createNotification(notification: InsertNotification): Promise<Notification> {\n    const [newNotification] = await db.insert(notifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async getUserNotifications(userId: string): Promise<Notification[]> {\n    return await db\n      .select()\n      .from(notifications)\n      .where(eq(notifications.userId, userId))\n      .orderBy(desc(notifications.sentAt));\n  }\n\n  async markNotificationAsRead(id: string): Promise<Notification | undefined> {\n    const [notification] = await db\n      .update(notifications)\n      .set({ readAt: new Date() })\n      .where(eq(notifications.id, id))\n      .returning();\n    return notification;\n  }\n\n  // Analytics operations\n  async getUserMetrics(userId: string): Promise<any> {\n    // This would contain complex queries for user analytics\n    // For Phase 1, we'll return basic metrics\n    const assignments = await this.getUserAssignments(userId);\n    const progress = await this.getUserProgress(userId);\n    \n    return {\n      activeProjects: assignments.length,\n      totalUpdates: progress.length,\n      weeklyHours: 0, // Will be calculated from time logs\n      productivityScore: 85, // Placeholder for Phase 1\n    };\n  }\n\n  async getLabMetrics(): Promise<any> {\n    // Lab-wide analytics for admin/professor view\n    const allUsers = await this.getAllUsers();\n    const allProjects = await this.getAllProjects();\n    \n    return {\n      totalUsers: allUsers.length,\n      activeStudents: allUsers.filter(u => u.role === 'student' && u.isActive).length,\n      activeProjects: allProjects.filter(p => p.status === 'active').length,\n      totalProjects: allProjects.length,\n    };\n  }\n\n  // Time tracking methods\n  async createTimeEntry(entry: any): Promise<any> {\n    // For Phase 4 implementation - stub for now\n    return { id: \"temp-id\", ...entry };\n  }\n\n  async getAllTimeEntries(weekStart?: string): Promise<any[]> {\n    // For Phase 4 implementation - return empty array for now\n    return [];\n  }\n\n  async getUserTimeEntries(userId: string, weekStart?: string): Promise<any[]> {\n    // For Phase 4 implementation - return empty array for now\n    return [];\n  }\n\n  async approveTimeEntry(entryId: string, approverId: string): Promise<any> {\n    // For Phase 4 implementation - stub for now\n    return { id: entryId, approved: true, approvedBy: approverId };\n  }\n\n  // Work schedule methods\n  async createWorkSchedule(schedule: any): Promise<any> {\n    // For Phase 4 implementation - stub for now\n    return { id: \"temp-id\", ...schedule };\n  }\n\n  async getAllWorkSchedules(weekStart?: string): Promise<any[]> {\n    // For Phase 4 implementation - return empty array for now\n    return [];\n  }\n\n  async getUserWorkSchedules(userId: string, weekStart?: string): Promise<any[]> {\n    // For Phase 4 implementation - return empty array for now\n    return [];\n  }\n\n  async approveWorkSchedule(scheduleId: string, approverId: string): Promise<any> {\n    // For Phase 4 implementation - stub for now\n    return { id: scheduleId, approved: true, approvedBy: approverId };\n  }\n\n  // Report methods\n  async createReport(reportData: any): Promise<any> {\n    // For Phase 4 implementation - create a stub report\n    return {\n      id: `report-${Date.now()}`,\n      ...reportData,\n      status: 'generating',\n      generatedAt: new Date().toISOString(),\n      fileSize: null\n    };\n  }\n\n  async getUserReports(userId: string): Promise<any[]> {\n    // For Phase 4 implementation - return sample reports\n    return [\n      {\n        id: 'report-1',\n        title: 'Weekly Productivity Report',\n        type: 'productivity',\n        generatedAt: new Date(Date.now() - 86400000).toISOString(),\n        createdBy: userId,\n        status: 'completed',\n        fileSize: '2.3 MB'\n      },\n      {\n        id: 'report-2', \n        title: 'Project Status Summary',\n        type: 'projects',\n        generatedAt: new Date(Date.now() - 172800000).toISOString(),\n        createdBy: userId,\n        status: 'completed',\n        fileSize: '1.8 MB'\n      }\n    ];\n  }\n\n  async updateReportStatus(reportId: string, status: string): Promise<any> {\n    // For Phase 4 implementation - stub for now\n    return { id: reportId, status };\n  }\n\n  async getReportDownloadUrl(reportId: string): Promise<string> {\n    // For Phase 4 implementation - return a mock download URL\n    return `https://example.com/reports/${reportId}/download`;\n  }\n\n  async getProductivityReports(dateRange: string): Promise<any[]> {\n    // For Phase 4 implementation - return sample productivity data\n    const users = await this.getAllUsers();\n    return users.map((user, index) => ({\n      userId: user.id,\n      userName: `${user.firstName} ${user.lastName}`,\n      totalHours: 32 + (index * 4),\n      completedTasks: 8 + index,\n      activeProjects: 2 + (index % 3),\n      productivityScore: 75 + (index * 5),\n      weeklyTrend: [85, 88, 92, 87]\n    }));\n  }\n\n  async getProjectReports(dateRange: string): Promise<any[]> {\n    // For Phase 4 implementation - return sample project data\n    const projects = await this.getAllProjects();\n    return projects.map((project, index) => ({\n      projectId: project.id,\n      projectName: project.name,\n      status: project.status,\n      progress: 60 + (index * 10),\n      totalHours: 120 + (index * 20),\n      teamSize: 3 + (index % 4),\n      deadline: new Date(Date.now() + (30 + index * 10) * 86400000).toISOString(),\n      riskLevel: ['low', 'medium', 'high'][index % 3] as 'low' | 'medium' | 'high'\n    }));\n  }\n\n  // Task operations\n  async createProjectTask(task: InsertProjectTask): Promise<ProjectTask> {\n    const [newTask] = await db.insert(projectTasks).values(task).returning();\n    return newTask;\n  }\n\n  async getProjectTasks(projectId: string): Promise<ProjectTask[]> {\n    return await db\n      .select()\n      .from(projectTasks)\n      .where(eq(projectTasks.projectId, projectId))\n      .orderBy(projectTasks.orderIndex, projectTasks.createdAt);\n  }\n\n  async updateProjectTask(id: string, updates: Partial<InsertProjectTask>): Promise<ProjectTask | undefined> {\n    const [task] = await db\n      .update(projectTasks)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(projectTasks.id, id))\n      .returning();\n    return task;\n  }\n\n  async deleteProjectTask(id: string): Promise<boolean> {\n    // First delete all related assignments and completions\n    await db.delete(taskAssignments).where(eq(taskAssignments.taskId, id));\n    await db.delete(taskCompletions).where(eq(taskCompletions.taskId, id));\n    \n    // Then delete the task\n    const result = await db.delete(projectTasks).where(eq(projectTasks.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Task assignment operations\n  async assignTaskToUser(assignment: InsertTaskAssignment): Promise<TaskAssignment> {\n    const [newAssignment] = await db.insert(taskAssignments).values(assignment).returning();\n    return newAssignment;\n  }\n\n  async getUserTasks(userId: string): Promise<(ProjectTask & { projectName: string, isCompleted?: boolean })[]> {\n    const userTasks = await db\n      .select({\n        id: projectTasks.id,\n        projectId: projectTasks.projectId,\n        title: projectTasks.title,\n        description: projectTasks.description,\n        dueDate: projectTasks.dueDate,\n        priority: projectTasks.priority,\n        estimatedHours: projectTasks.estimatedHours,\n        isRequired: projectTasks.isRequired,\n        orderIndex: projectTasks.orderIndex,\n        createdBy: projectTasks.createdBy,\n        createdAt: projectTasks.createdAt,\n        updatedAt: projectTasks.updatedAt,\n        projectName: projects.name,\n      })\n      .from(projectTasks)\n      .innerJoin(taskAssignments, eq(projectTasks.id, taskAssignments.taskId))\n      .innerJoin(projects, eq(projectTasks.projectId, projects.id))\n      .where(and(eq(taskAssignments.userId, userId), eq(taskAssignments.isActive, true)))\n      .orderBy(projectTasks.dueDate, projectTasks.priority);\n\n    // Check completion status for each task\n    const tasksWithCompletionStatus = await Promise.all(\n      userTasks.map(async (task) => {\n        const isCompleted = await this.isTaskCompletedByUser(task.id, userId);\n        return { ...task, isCompleted };\n      })\n    );\n\n    return tasksWithCompletionStatus;\n  }\n\n  async getUserTasksForProject(userId: string, projectId: string): Promise<(ProjectTask & { isCompleted?: boolean })[]> {\n    const userTasks = await db\n      .select()\n      .from(projectTasks)\n      .innerJoin(taskAssignments, eq(projectTasks.id, taskAssignments.taskId))\n      .where(and(\n        eq(projectTasks.projectId, projectId),\n        eq(taskAssignments.userId, userId),\n        eq(taskAssignments.isActive, true)\n      ))\n      .orderBy(projectTasks.orderIndex, projectTasks.createdAt)\n      .then(rows => rows.map(row => row.project_tasks));\n\n    // Check completion status for each task\n    const tasksWithCompletionStatus = await Promise.all(\n      userTasks.map(async (task) => {\n        const isCompleted = await this.isTaskCompletedByUser(task.id, userId);\n        return { ...task, isCompleted };\n      })\n    );\n\n    return tasksWithCompletionStatus;\n  }\n\n  // Task completion operations\n  async completeTask(completion: InsertTaskCompletion): Promise<TaskCompletion> {\n    const [newCompletion] = await db.insert(taskCompletions).values(completion).returning();\n    return newCompletion;\n  }\n\n  async getTaskCompletions(taskId: string): Promise<TaskCompletion[]> {\n    return await db\n      .select()\n      .from(taskCompletions)\n      .where(eq(taskCompletions.taskId, taskId))\n      .orderBy(desc(taskCompletions.completedAt));\n  }\n\n  async isTaskCompletedByUser(taskId: string, userId: string): Promise<boolean> {\n    const [completion] = await db\n      .select()\n      .from(taskCompletions)\n      .where(and(eq(taskCompletions.taskId, taskId), eq(taskCompletions.userId, userId)))\n      .limit(1);\n    \n    return !!completion;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":19247},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"server/websocket.ts":{"content":"import { WebSocket, WebSocketServer } from 'ws';\nimport { Server } from 'http';\n\ninterface WebSocketClient {\n  ws: WebSocket;\n  userId: string;\n  role: string;\n}\n\nexport class NotificationService {\n  private wss: WebSocketServer;\n  private clients: Map<string, WebSocketClient> = new Map();\n\n  constructor(server: Server) {\n    this.wss = new WebSocketServer({ \n      server,\n      path: '/ws'\n    });\n\n    this.wss.on('connection', this.handleConnection.bind(this));\n  }\n\n  private handleConnection(ws: WebSocket, request?: any) {\n    console.log('WebSocket connection established');\n\n    ws.on('message', (message: Buffer) => {\n      try {\n        const data = JSON.parse(message.toString());\n        this.handleMessage(ws, data);\n      } catch (error) {\n        console.error('Error parsing WebSocket message:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      // Remove client from active connections\n      for (const [clientId, client] of this.clients.entries()) {\n        if (client.ws === ws) {\n          this.clients.delete(clientId);\n          console.log(`Client ${clientId} disconnected`);\n          break;\n        }\n      }\n    });\n\n    ws.on('error', (error) => {\n      console.error('WebSocket error:', error);\n    });\n  }\n\n  private handleMessage(ws: WebSocket, data: any): void {\n    switch (data.type) {\n      case 'authenticate':\n        this.authenticateClient(ws, data);\n        break;\n      case 'subscribe':\n        this.subscribeToNotifications(ws, data);\n        break;\n      case 'ping':\n        ws.send(JSON.stringify({ type: 'pong' }));\n        break;\n      default:\n        console.log('Unknown message type:', data.type);\n    }\n  }\n\n  private authenticateClient(ws: WebSocket, data: any): void {\n    const { userId, role, token } = data;\n    \n    // In a real implementation, verify the token\n    // For now, we'll accept any authentication\n    const clientId = `${userId}-${Date.now()}`;\n    \n    this.clients.set(clientId, {\n      ws,\n      userId,\n      role\n    });\n\n    ws.send(JSON.stringify({\n      type: 'authenticated',\n      clientId,\n      status: 'success'\n    }));\n\n    console.log(`Client authenticated: ${clientId} (${role})`);\n  }\n\n  private subscribeToNotifications(ws: WebSocket, data: any): void {\n    ws.send(JSON.stringify({\n      type: 'subscribed',\n      channels: data.channels || ['general'],\n      status: 'success'\n    }));\n  }\n\n  // Public methods for sending notifications\n  public notifyUser(userId: string, notification: any) {\n    for (const [clientId, client] of this.clients.entries()) {\n      if (client.userId === userId) {\n        client.ws.send(JSON.stringify({\n          type: 'notification',\n          data: notification,\n          timestamp: new Date().toISOString()\n        }));\n      }\n    }\n  }\n\n  public notifyRole(role: string, notification: any) {\n    for (const [clientId, client] of this.clients.entries()) {\n      if (client.role === role || role === 'all') {\n        client.ws.send(JSON.stringify({\n          type: 'notification',\n          data: notification,\n          timestamp: new Date().toISOString()\n        }));\n      }\n    }\n  }\n\n  public notifyAll(notification: any) {\n    for (const [clientId, client] of this.clients.entries()) {\n      client.ws.send(JSON.stringify({\n        type: 'notification',\n        data: notification,\n        timestamp: new Date().toISOString()\n      }));\n    }\n  }\n\n  public broadcastUpdate(updateType: string, data: any) {\n    const message = {\n      type: 'update',\n      updateType,\n      data,\n      timestamp: new Date().toISOString()\n    };\n\n    for (const [clientId, client] of this.clients.entries()) {\n      client.ws.send(JSON.stringify(message));\n    }\n  }\n\n  public getConnectedClients(): number {\n    return this.clients.size;\n  }\n\n  public getClientsByRole(): Record<string, number> {\n    const roleCount: Record<string, number> = {};\n    \n    for (const client of this.clients.values()) {\n      roleCount[client.role] = (roleCount[client.role] || 0) + 1;\n    }\n    \n    return roleCount;\n  }\n}\n\nexport let notificationService: NotificationService;\n\nexport function initializeWebSocket(server: Server) {\n  notificationService = new NotificationService(server);\n  console.log('WebSocket server initialized');\n  return notificationService;\n}","size_bytes":4280},"shared/schema.ts":{"content":"import { sql } from 'drizzle-orm';\nimport {\n  index,\n  jsonb,\n  pgTable,\n  timestamp,\n  varchar,\n  text,\n  boolean,\n  integer,\n  decimal,\n  date,\n  time,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table.\n// (IMPORTANT) This table is mandatory for Replit Auth, don't drop it.\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for email/password authentication\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  email: varchar(\"email\").unique().notNull(),\n  passwordHash: varchar(\"password_hash\").notNull(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  role: varchar(\"role\").notNull().default('student'), // 'admin', 'professor', 'student', 'postdoc'\n  department: varchar(\"department\"),\n  yearLevel: varchar(\"year_level\"), // For students: \"1st Year PhD\", \"2nd Year Master's\", etc.\n  specialization: varchar(\"specialization\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const projects = pgTable(\"projects\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  startDate: date(\"start_date\"),\n  targetEndDate: date(\"target_end_date\"),\n  status: varchar(\"status\").notNull().default('active'), // 'active', 'completed', 'paused'\n  projectType: varchar(\"project_type\", { length: 50 }),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const projectAssignments = pgTable(\"project_assignments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  projectId: uuid(\"project_id\").references(() => projects.id).notNull(),\n  role: varchar(\"role\", { length: 50 }), // 'lead', 'contributor', 'mentor'\n  allocationPercentage: integer(\"allocation_percentage\"),\n  startDate: date(\"start_date\"),\n  endDate: date(\"end_date\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const progressUpdates = pgTable(\"progress_updates\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  assignmentId: uuid(\"assignment_id\").references(() => projectAssignments.id).notNull(),\n  phase: varchar(\"phase\", { length: 50 }),\n  percentComplete: integer(\"percent_complete\"),\n  hoursWorked: decimal(\"hours_worked\", { precision: 5, scale: 2 }),\n  notes: text(\"notes\"),\n  blockers: text(\"blockers\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const workSchedules = pgTable(\"work_schedules\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  weekStartDate: date(\"week_start_date\").notNull(),\n  totalScheduledHours: decimal(\"total_scheduled_hours\", { precision: 5, scale: 2 }),\n  approved: boolean(\"approved\").default(false),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  approvedAt: timestamp(\"approved_at\"),\n  status: varchar(\"status\").notNull().default('draft'), // 'draft', 'submitted', 'approved', 'rejected'\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const timeEntries = pgTable(\"time_entries\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  projectId: uuid(\"project_id\").references(() => projects.id),\n  assignmentId: uuid(\"assignment_id\").references(() => projectAssignments.id),\n  date: date(\"date\").notNull(),\n  startTime: varchar(\"start_time\"), // HH:MM format\n  endTime: varchar(\"end_time\"), // HH:MM format\n  duration: decimal(\"duration\", { precision: 5, scale: 2 }), // hours\n  description: text(\"description\"),\n  taskType: varchar(\"task_type\"), // 'research', 'development', 'analysis', 'meeting', 'other'\n  billable: boolean(\"billable\").default(true),\n  approved: boolean(\"approved\").default(false),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const scheduleTemplates = pgTable(\"schedule_templates\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  isDefault: boolean(\"is_default\").default(false),\n  workingDays: jsonb(\"working_days\"), // ['monday', 'tuesday', ...]\n  dailyHours: decimal(\"daily_hours\", { precision: 3, scale: 1 }).default('8.0'),\n  flexibleHours: boolean(\"flexible_hours\").default(false),\n  approvedBy: varchar(\"approved_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const scheduleBlocks = pgTable(\"schedule_blocks\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  scheduleId: uuid(\"schedule_id\").references(() => workSchedules.id).notNull(),\n  dayOfWeek: varchar(\"day_of_week\", { length: 10 }),\n  startTime: time(\"start_time\"),\n  endTime: time(\"end_time\"),\n  location: varchar(\"location\"), // 'lab', 'remote'\n  plannedActivity: varchar(\"planned_activity\", { length: 255 }),\n  projectId: uuid(\"project_id\").references(() => projects.id),\n});\n\nexport const timeLogs = pgTable(\"time_logs\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  checkInTime: timestamp(\"check_in_time\"),\n  checkOutTime: timestamp(\"check_out_time\"),\n  verificationMethod: varchar(\"verification_method\", { length: 50 }),\n  hoursLogged: decimal(\"hours_logged\", { precision: 5, scale: 2 }),\n  scheduleBlockId: uuid(\"schedule_block_id\").references(() => scheduleBlocks.id),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const notifications = pgTable(\"notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: varchar(\"type\", { length: 50 }),\n  subject: varchar(\"subject\", { length: 255 }),\n  content: text(\"content\"),\n  sentAt: timestamp(\"sent_at\").defaultNow(),\n  readAt: timestamp(\"read_at\"),\n  emailSent: boolean(\"email_sent\").default(false),\n});\n\nexport const projectTasks = pgTable(\"project_tasks\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectId: uuid(\"project_id\").references(() => projects.id).notNull(),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  dueDate: timestamp(\"due_date\"),\n  priority: varchar(\"priority\", { length: 20 }).default('medium'), // 'low', 'medium', 'high', 'urgent'\n  estimatedHours: decimal(\"estimated_hours\", { precision: 5, scale: 2 }),\n  isRequired: boolean(\"is_required\").default(true),\n  orderIndex: integer(\"order_index\").default(0),\n  createdBy: varchar(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const taskAssignments = pgTable(\"task_assignments\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  taskId: uuid(\"task_id\").references(() => projectTasks.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  assignedBy: varchar(\"assigned_by\").references(() => users.id).notNull(),\n  assignedAt: timestamp(\"assigned_at\").defaultNow(),\n  isActive: boolean(\"is_active\").default(true),\n});\n\nexport const taskCompletions = pgTable(\"task_completions\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  taskId: uuid(\"task_id\").references(() => projectTasks.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  completedAt: timestamp(\"completed_at\").defaultNow(),\n  notes: text(\"notes\"),\n  hoursSpent: decimal(\"hours_spent\", { precision: 5, scale: 2 }),\n  verifiedBy: varchar(\"verified_by\").references(() => users.id),\n  verifiedAt: timestamp(\"verified_at\"),\n});\n\nexport type InsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type CreateUserRequest = {\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n  role?: string;\n  department?: string;\n  yearLevel?: string;\n  specialization?: string;\n};\nexport type LoginRequest = {\n  email: string;\n  password: string;\n};\nexport type InsertProject = typeof projects.$inferInsert;\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProjectAssignment = typeof projectAssignments.$inferInsert;\nexport type ProjectAssignment = typeof projectAssignments.$inferSelect;\nexport type InsertProgressUpdate = typeof progressUpdates.$inferInsert;\nexport type ProgressUpdate = typeof progressUpdates.$inferSelect;\nexport type InsertWorkSchedule = typeof workSchedules.$inferInsert;\nexport type WorkSchedule = typeof workSchedules.$inferSelect;\nexport type InsertNotification = typeof notifications.$inferInsert;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertProjectTask = typeof projectTasks.$inferInsert;\nexport type ProjectTask = typeof projectTasks.$inferSelect;\nexport type InsertTaskAssignment = typeof taskAssignments.$inferInsert;\nexport type TaskAssignment = typeof taskAssignments.$inferSelect;\nexport type InsertTaskCompletion = typeof taskCompletions.$inferInsert;\nexport type TaskCompletion = typeof taskCompletions.$inferSelect;\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProjectAssignmentSchema = createInsertSchema(projectAssignments).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProgressUpdateSchema = createInsertSchema(progressUpdates).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  sentAt: true,\n});\n\nexport const insertProjectTaskSchema = createInsertSchema(projectTasks).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertTaskAssignmentSchema = createInsertSchema(taskAssignments).omit({\n  id: true,\n  assignedAt: true,\n});\n\nexport const insertTaskCompletionSchema = createInsertSchema(taskCompletions).omit({\n  id: true,\n  completedAt: true,\n});\n\nexport const createUserSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(8, \"Password must be at least 8 characters\"),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  role: z.enum(['admin', 'professor', 'student', 'postdoc']).default('student'),\n  department: z.string().optional(),\n  yearLevel: z.string().optional(),\n  specialization: z.string().optional(),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type CreateUserInput = z.infer<typeof createUserSchema>;\nexport type LoginInput = z.infer<typeof loginSchema>;\n","size_bytes":11606},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/Landing\";\nimport Dashboard from \"@/pages/Dashboard\";\nimport ProjectManagement from \"@/pages/admin/ProjectManagement\";\nimport AIAnalytics from \"@/pages/admin/AIAnalytics\";\nimport ScheduleManagement from \"@/pages/admin/ScheduleManagement\";\nimport ReportsManagement from \"@/pages/admin/ReportsManagement\";\nimport SystemSettings from \"@/pages/admin/SystemSettings\";\nimport IntegrationsPage from \"@/pages/admin/IntegrationsPage\";\nimport MyProjects from \"@/pages/student/MyProjects\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading } = useAuth();\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/dashboard\" component={Dashboard} />\n          <Route path=\"/admin/projects\" component={ProjectManagement} />\n          <Route path=\"/admin/ai-analytics\" component={AIAnalytics} />\n          <Route path=\"/admin/schedules\" component={ScheduleManagement} />\n          <Route path=\"/admin/reports\" component={ReportsManagement} />\n          <Route path=\"/admin/settings\" component={SystemSettings} />\n          <Route path=\"/admin/integrations\" component={IntegrationsPage} />\n          <Route path=\"/projects\" component={MyProjects} />\n          <Route path=\"/student/projects\" component={MyProjects} />\n          <Route path=\"/postdoc/projects\" component={MyProjects} />\n        </>\n      )}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2103},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(210, 83%, 39%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(174, 100%, 21%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(210, 40%, 96%);\n  --accent-foreground: hsl(222.2, 84%, 4.9%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(210, 83%, 39%);\n  --chart-1: hsl(210, 83%, 39%);\n  --chart-2: hsl(174, 100%, 21%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(210, 83%, 39%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(210, 83%, 39%);\n  --font-sans: 'Roboto', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 39%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 39%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00), 0px 2px 4px -1px hsl(210, 83%, 39%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00), 0px 4px 6px -1px hsl(210, 83%, 39%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00), 0px 8px 10px -1px hsl(210, 83%, 39%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(210, 83%, 39%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(174, 100%, 21%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(210, 83%, 39%);\n  --chart-1: hsl(210, 83%, 39%);\n  --chart-2: hsl(174, 100%, 21%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(210, 83%, 39%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(210, 83%, 39%);\n  --font-sans: 'Roboto', 'Open Sans', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 0.5rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 39%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00), 0px 1px 2px -1px hsl(210, 83%, 39%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00), 0px 2px 4px -1px hsl(210, 83%, 39%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00), 0px 4px 6px -1px hsl(210, 83%, 39%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00), 0px 8px 10px -1px hsl(210, 83%, 39%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(210, 83%, 39%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n","size_bytes":4533},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AdvancedCharts.tsx":{"content":"import {\n  LineChart,\n  Line,\n  AreaChart,\n  Area,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n  RadarChart,\n  PolarGrid,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  ComposedChart,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from 'recharts';\n\n// Productivity Trend Chart\ninterface ProductivityTrendProps {\n  data: Array<{\n    date: string;\n    productivity: number;\n    projects: number;\n    hours: number;\n  }>;\n}\n\nexport function ProductivityTrendChart({ data }: ProductivityTrendProps) {\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <ComposedChart data={data} margin={{ top: 20, right: 30, left: 0, bottom: 0 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" />\n        <XAxis \n          dataKey=\"date\" \n          tick={{ fontSize: 12 }}\n          stroke=\"#64748b\"\n        />\n        <YAxis \n          yAxisId=\"left\"\n          tick={{ fontSize: 12 }}\n          stroke=\"#64748b\"\n        />\n        <YAxis \n          yAxisId=\"right\" \n          orientation=\"right\"\n          tick={{ fontSize: 12 }}\n          stroke=\"#64748b\"\n        />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#ffffff',\n            border: '1px solid #e2e8f0',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n          }}\n        />\n        <Legend />\n        <Area\n          yAxisId=\"left\"\n          type=\"monotone\"\n          dataKey=\"productivity\"\n          fill=\"url(#productivityGradient)\"\n          stroke=\"#3b82f6\"\n          strokeWidth={2}\n          name=\"Productivity Score\"\n        />\n        <Bar\n          yAxisId=\"right\"\n          dataKey=\"hours\"\n          fill=\"#8b5cf6\"\n          name=\"Hours Worked\"\n          opacity={0.8}\n        />\n        <Line\n          yAxisId=\"left\"\n          type=\"monotone\"\n          dataKey=\"projects\"\n          stroke=\"#10b981\"\n          strokeWidth={3}\n          name=\"Active Projects\"\n          dot={{ fill: '#10b981', strokeWidth: 2, r: 4 }}\n        />\n        <defs>\n          <linearGradient id=\"productivityGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n            <stop offset=\"5%\" stopColor=\"#3b82f6\" stopOpacity={0.3}/>\n            <stop offset=\"95%\" stopColor=\"#3b82f6\" stopOpacity={0.05}/>\n          </linearGradient>\n        </defs>\n      </ComposedChart>\n    </ResponsiveContainer>\n  );\n}\n\n// Project Status Distribution\ninterface ProjectStatusPieProps {\n  data: Array<{\n    name: string;\n    value: number;\n    color: string;\n  }>;\n}\n\nexport function ProjectStatusPieChart({ data }: ProjectStatusPieProps) {\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <PieChart>\n        <Pie\n          data={data}\n          cx=\"50%\"\n          cy=\"50%\"\n          outerRadius={100}\n          innerRadius={40}\n          paddingAngle={5}\n          dataKey=\"value\"\n          stroke=\"#ffffff\"\n          strokeWidth={2}\n        >\n          {data.map((entry, index) => (\n            <Cell key={`cell-${index}`} fill={entry.color} />\n          ))}\n        </Pie>\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#ffffff',\n            border: '1px solid #e2e8f0',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n          }}\n        />\n        <Legend />\n      </PieChart>\n    </ResponsiveContainer>\n  );\n}\n\n// Team Performance Radar\ninterface TeamRadarProps {\n  data: Array<{\n    skill: string;\n    current: number;\n    target: number;\n    fullMark: number;\n  }>;\n}\n\nexport function TeamPerformanceRadar({ data }: TeamRadarProps) {\n  return (\n    <ResponsiveContainer width=\"100%\" height={350}>\n      <RadarChart data={data} margin={{ top: 20, right: 80, bottom: 20, left: 80 }}>\n        <PolarGrid stroke=\"#e2e8f0\" />\n        <PolarAngleAxis \n          dataKey=\"skill\" \n          tick={{ fontSize: 12, fill: '#64748b' }}\n        />\n        <PolarRadiusAxis\n          angle={90}\n          domain={[0, 100]}\n          tick={{ fontSize: 10, fill: '#64748b' }}\n        />\n        <Radar\n          name=\"Current Performance\"\n          dataKey=\"current\"\n          stroke=\"#3b82f6\"\n          fill=\"#3b82f6\"\n          fillOpacity={0.2}\n          strokeWidth={2}\n          dot={{ fill: '#3b82f6', strokeWidth: 2, r: 3 }}\n        />\n        <Radar\n          name=\"Target Performance\"\n          dataKey=\"target\"\n          stroke=\"#10b981\"\n          fill=\"#10b981\"\n          fillOpacity={0.1}\n          strokeWidth={2}\n          strokeDasharray=\"5 5\"\n          dot={{ fill: '#10b981', strokeWidth: 2, r: 3 }}\n        />\n        <Legend />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#ffffff',\n            border: '1px solid #e2e8f0',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n          }}\n        />\n      </RadarChart>\n    </ResponsiveContainer>\n  );\n}\n\n// Resource Utilization Chart\ninterface ResourceUtilizationProps {\n  data: Array<{\n    resource: string;\n    allocated: number;\n    used: number;\n    available: number;\n  }>;\n}\n\nexport function ResourceUtilizationChart({ data }: ResourceUtilizationProps) {\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <BarChart\n        data={data}\n        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}\n        barCategoryGap=\"20%\"\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" />\n        <XAxis \n          dataKey=\"resource\" \n          tick={{ fontSize: 12 }}\n          stroke=\"#64748b\"\n        />\n        <YAxis \n          tick={{ fontSize: 12 }}\n          stroke=\"#64748b\"\n        />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#ffffff',\n            border: '1px solid #e2e8f0',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n          }}\n        />\n        <Legend />\n        <Bar \n          dataKey=\"allocated\" \n          stackId=\"a\" \n          fill=\"#e2e8f0\" \n          name=\"Allocated\"\n          radius={[0, 0, 4, 4]}\n        />\n        <Bar \n          dataKey=\"used\" \n          stackId=\"a\" \n          fill=\"#3b82f6\" \n          name=\"Used\"\n        />\n        <Bar \n          dataKey=\"available\" \n          stackId=\"a\" \n          fill=\"#10b981\" \n          name=\"Available\"\n          radius={[4, 4, 0, 0]}\n        />\n      </BarChart>\n    </ResponsiveContainer>\n  );\n}\n\n// Time Series Analytics\ninterface TimeSeriesProps {\n  data: Array<{\n    time: string;\n    commits: number;\n    reviews: number;\n    meetings: number;\n    research: number;\n  }>;\n}\n\nexport function TimeSeriesAnalytics({ data }: TimeSeriesProps) {\n  return (\n    <ResponsiveContainer width=\"100%\" height={400}>\n      <LineChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 20 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" />\n        <XAxis \n          dataKey=\"time\" \n          tick={{ fontSize: 12 }}\n          stroke=\"#64748b\"\n        />\n        <YAxis \n          tick={{ fontSize: 12 }}\n          stroke=\"#64748b\"\n        />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#ffffff',\n            border: '1px solid #e2e8f0',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n          }}\n        />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"commits\"\n          stroke=\"#3b82f6\"\n          strokeWidth={3}\n          name=\"Code Commits\"\n          dot={{ fill: '#3b82f6', strokeWidth: 2, r: 4 }}\n          activeDot={{ r: 6, stroke: '#3b82f6', strokeWidth: 2 }}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"reviews\"\n          stroke=\"#8b5cf6\"\n          strokeWidth={3}\n          name=\"Code Reviews\"\n          dot={{ fill: '#8b5cf6', strokeWidth: 2, r: 4 }}\n          activeDot={{ r: 6, stroke: '#8b5cf6', strokeWidth: 2 }}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"meetings\"\n          stroke=\"#f59e0b\"\n          strokeWidth={3}\n          name=\"Meetings\"\n          dot={{ fill: '#f59e0b', strokeWidth: 2, r: 4 }}\n          activeDot={{ r: 6, stroke: '#f59e0b', strokeWidth: 2 }}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"research\"\n          stroke=\"#10b981\"\n          strokeWidth={3}\n          name=\"Research Hours\"\n          dot={{ fill: '#10b981', strokeWidth: 2, r: 4 }}\n          activeDot={{ r: 6, stroke: '#10b981', strokeWidth: 2 }}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n\n// Burndown Chart for Projects\ninterface BurndownChartProps {\n  data: Array<{\n    day: string;\n    planned: number;\n    actual: number;\n    ideal: number;\n  }>;\n}\n\nexport function BurndownChart({ data }: BurndownChartProps) {\n  return (\n    <ResponsiveContainer width=\"100%\" height={300}>\n      <LineChart data={data} margin={{ top: 20, right: 30, left: 20, bottom: 5 }}>\n        <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e2e8f0\" />\n        <XAxis \n          dataKey=\"day\" \n          tick={{ fontSize: 12 }}\n          stroke=\"#64748b\"\n        />\n        <YAxis \n          tick={{ fontSize: 12 }}\n          stroke=\"#64748b\"\n        />\n        <Tooltip \n          contentStyle={{ \n            backgroundColor: '#ffffff',\n            border: '1px solid #e2e8f0',\n            borderRadius: '8px',\n            boxShadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1)'\n          }}\n        />\n        <Legend />\n        <Line\n          type=\"monotone\"\n          dataKey=\"ideal\"\n          stroke=\"#e2e8f0\"\n          strokeWidth={2}\n          strokeDasharray=\"5 5\"\n          name=\"Ideal Progress\"\n          dot={{ fill: '#e2e8f0', strokeWidth: 1, r: 2 }}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"planned\"\n          stroke=\"#3b82f6\"\n          strokeWidth={3}\n          name=\"Planned Progress\"\n          dot={{ fill: '#3b82f6', strokeWidth: 2, r: 4 }}\n        />\n        <Line\n          type=\"monotone\"\n          dataKey=\"actual\"\n          stroke=\"#10b981\"\n          strokeWidth={3}\n          name=\"Actual Progress\"\n          dot={{ fill: '#10b981', strokeWidth: 2, r: 4 }}\n          activeDot={{ r: 6, stroke: '#10b981', strokeWidth: 2 }}\n        />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}","size_bytes":10197},"client/src/components/ExternalIntegrations.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Slack,\n  Mail,\n  Calendar,\n  MessageSquare,\n  Bell,\n  Settings,\n  CheckCircle,\n  AlertCircle,\n  ExternalLink,\n  Zap,\n  Globe,\n  Key\n} from \"lucide-react\";\n\ninterface IntegrationCardProps {\n  icon: React.ReactNode;\n  title: string;\n  description: string;\n  isConnected: boolean;\n  onConnect: () => void;\n  onDisconnect: () => void;\n  features: string[];\n}\n\nfunction IntegrationCard({ \n  icon, \n  title, \n  description, \n  isConnected, \n  onConnect, \n  onDisconnect, \n  features \n}: IntegrationCardProps) {\n  return (\n    <Card className=\"relative overflow-hidden\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <div className=\"p-2 rounded-lg bg-primary/10\">\n              {icon}\n            </div>\n            <div>\n              <CardTitle className=\"text-lg\">{title}</CardTitle>\n              <p className=\"text-sm text-muted-foreground\">{description}</p>\n            </div>\n          </div>\n          <Badge variant={isConnected ? \"default\" : \"secondary\"} className=\"ml-2\">\n            {isConnected ? (\n              <><CheckCircle className=\"h-3 w-3 mr-1\" />Connected</>\n            ) : (\n              <><AlertCircle className=\"h-3 w-3 mr-1\" />Not Connected</>\n            )}\n          </Badge>\n        </div>\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <h4 className=\"text-sm font-medium mb-2\">Features:</h4>\n          <ul className=\"text-xs text-muted-foreground space-y-1\">\n            {features.map((feature, index) => (\n              <li key={index} className=\"flex items-center\">\n                <CheckCircle className=\"h-3 w-3 mr-2 text-green-600\" />\n                {feature}\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"pt-2\">\n          {isConnected ? (\n            <div className=\"space-y-2\">\n              <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n                <Settings className=\"h-4 w-4 mr-2\" />\n                Configure\n              </Button>\n              <Button \n                variant=\"destructive\" \n                size=\"sm\" \n                className=\"w-full\"\n                onClick={onDisconnect}\n              >\n                Disconnect\n              </Button>\n            </div>\n          ) : (\n            <Button onClick={onConnect} className=\"w-full\">\n              <ExternalLink className=\"h-4 w-4 mr-2\" />\n              Connect {title}\n            </Button>\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function ExternalIntegrations() {\n  const { toast } = useToast();\n  const [slackConnected, setSlackConnected] = useState(false);\n  const [emailConnected, setEmailConnected] = useState(true);\n  const [calendarConnected, setCalendarConnected] = useState(false);\n  const [githubConnected, setGithubConnected] = useState(false);\n  const [showSlackDialog, setShowSlackDialog] = useState(false);\n  \n  // Integration settings\n  const [slackWebhook, setSlackWebhook] = useState(\"\");\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [calendarSync, setCalendarSync] = useState(false);\n  const [autoUpdates, setAutoUpdates] = useState(true);\n\n  const handleSlackConnect = () => {\n    setShowSlackDialog(true);\n  };\n\n  const handleSlackSetup = () => {\n    if (!slackWebhook) {\n      toast({\n        title: \"Error\",\n        description: \"Please enter a valid Slack webhook URL\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    \n    setSlackConnected(true);\n    setShowSlackDialog(false);\n    toast({\n      title: \"Success\",\n      description: \"Slack integration connected successfully!\",\n    });\n  };\n\n  const handleEmailConnect = () => {\n    setEmailConnected(true);\n    toast({\n      title: \"Email Connected\",\n      description: \"Email notifications are now active\",\n    });\n  };\n\n  const handleCalendarConnect = () => {\n    setCalendarConnected(true);\n    toast({\n      title: \"Calendar Connected\", \n      description: \"Calendar sync enabled for project deadlines\",\n    });\n  };\n\n  const handleGithubConnect = () => {\n    setGithubConnected(true);\n    toast({\n      title: \"GitHub Connected\",\n      description: \"Repository integration active\",\n    });\n  };\n\n  const integrations = [\n    {\n      icon: <Slack className=\"h-6 w-6 text-purple-600\" />,\n      title: \"Slack\",\n      description: \"Team communication and notifications\",\n      isConnected: slackConnected,\n      onConnect: handleSlackConnect,\n      onDisconnect: () => setSlackConnected(false),\n      features: [\n        \"Real-time project updates\",\n        \"Task assignment notifications\", \n        \"Daily standup reminders\",\n        \"Deadline alerts\",\n        \"Custom channel routing\"\n      ]\n    },\n    {\n      icon: <Mail className=\"h-6 w-6 text-blue-600\" />,\n      title: \"Email\",\n      description: \"Automated email notifications and reports\",\n      isConnected: emailConnected,\n      onConnect: handleEmailConnect,\n      onDisconnect: () => setEmailConnected(false),\n      features: [\n        \"Weekly progress reports\",\n        \"Task assignment emails\",\n        \"Deadline reminders\",\n        \"System alerts\",\n        \"Custom email templates\"\n      ]\n    },\n    {\n      icon: <Calendar className=\"h-6 w-6 text-green-600\" />,\n      title: \"Calendar\",\n      description: \"Sync deadlines and meetings\",\n      isConnected: calendarConnected,\n      onConnect: handleCalendarConnect,\n      onDisconnect: () => setCalendarConnected(false),\n      features: [\n        \"Project deadline sync\",\n        \"Meeting scheduling\",\n        \"Reminder notifications\",\n        \"Team availability\",\n        \"Recurring events\"\n      ]\n    },\n    {\n      icon: <Globe className=\"h-6 w-6 text-gray-700\" />,\n      title: \"GitHub\",\n      description: \"Repository and code integration\",\n      isConnected: githubConnected,\n      onConnect: handleGithubConnect,\n      onDisconnect: () => setGithubConnected(false),\n      features: [\n        \"Commit tracking\",\n        \"Pull request notifications\",\n        \"Code review assignments\",\n        \"Branch protection\",\n        \"Repository analytics\"\n      ]\n    }\n  ];\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold\">External Integrations</h2>\n          <p className=\"text-muted-foreground\">\n            Connect external tools to streamline your workflow\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2\">\n          <Badge variant=\"outline\" className=\"flex items-center\">\n            <Zap className=\"h-3 w-3 mr-1\" />\n            {integrations.filter(i => i.isConnected).length} Connected\n          </Badge>\n        </div>\n      </div>\n\n      <Tabs defaultValue=\"services\" className=\"space-y-6\">\n        <TabsList>\n          <TabsTrigger value=\"services\">Available Services</TabsTrigger>\n          <TabsTrigger value=\"settings\">Integration Settings</TabsTrigger>\n          <TabsTrigger value=\"webhooks\">Webhooks & APIs</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value=\"services\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            {integrations.map((integration, index) => (\n              <IntegrationCard key={index} {...integration} />\n            ))}\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"settings\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Bell className=\"h-5 w-5 mr-2\" />\n                  Notification Preferences\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Email Notifications</Label>\n                    <p className=\"text-sm text-muted-foreground\">Receive email updates</p>\n                  </div>\n                  <Switch\n                    checked={emailNotifications}\n                    onCheckedChange={setEmailNotifications}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Calendar Sync</Label>\n                    <p className=\"text-sm text-muted-foreground\">Sync deadlines to calendar</p>\n                  </div>\n                  <Switch\n                    checked={calendarSync}\n                    onCheckedChange={setCalendarSync}\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <Label>Auto Updates</Label>\n                    <p className=\"text-sm text-muted-foreground\">Automatically update external tools</p>\n                  </div>\n                  <Switch\n                    checked={autoUpdates}\n                    onCheckedChange={setAutoUpdates}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <MessageSquare className=\"h-5 w-5 mr-2\" />\n                  Communication Channels\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label>Default Slack Channel</Label>\n                  <Input \n                    placeholder=\"#lab-general\" \n                    className=\"mt-2\"\n                    disabled={!slackConnected}\n                  />\n                </div>\n                \n                <div>\n                  <Label>Email Template</Label>\n                  <Input \n                    placeholder=\"Weekly Lab Report\" \n                    className=\"mt-2\"\n                    disabled={!emailConnected}\n                  />\n                </div>\n                \n                <div>\n                  <Label>Calendar Name</Label>\n                  <Input \n                    placeholder=\"Lab Deadlines\" \n                    className=\"mt-2\"\n                    disabled={!calendarConnected}\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n\n        <TabsContent value=\"webhooks\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Key className=\"h-5 w-5 mr-2\" />\n                API Keys & Webhooks\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div>\n                <Label>Slack Webhook URL</Label>\n                <Input \n                  type=\"password\"\n                  value={slackWebhook}\n                  onChange={(e) => setSlackWebhook(e.target.value)}\n                  placeholder=\"https://hooks.slack.com/services/...\"\n                  className=\"mt-2\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Create a webhook in your Slack workspace settings\n                </p>\n              </div>\n              \n              <div>\n                <Label>GitHub Personal Access Token</Label>\n                <Input \n                  type=\"password\"\n                  placeholder=\"ghp_xxxxxxxxxxxxxxxxxxxx\"\n                  className=\"mt-2\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Generate a token with repo and notifications scope\n                </p>\n              </div>\n              \n              <div>\n                <Label>Calendar API Endpoint</Label>\n                <Input \n                  placeholder=\"https://api.calendar.provider.com/v1\"\n                  className=\"mt-2\"\n                />\n                <p className=\"text-xs text-muted-foreground mt-1\">\n                  Google Calendar or Outlook API endpoint\n                </p>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n\n      {/* Slack Setup Dialog */}\n      <Dialog open={showSlackDialog} onOpenChange={setShowSlackDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center\">\n              <Slack className=\"h-5 w-5 mr-2 text-purple-600\" />\n              Connect Slack Workspace\n            </DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label>Webhook URL</Label>\n              <Input\n                value={slackWebhook}\n                onChange={(e) => setSlackWebhook(e.target.value)}\n                placeholder=\"https://hooks.slack.com/services/...\"\n                className=\"mt-2\"\n              />\n              <p className=\"text-xs text-muted-foreground mt-1\">\n                Create a webhook in your Slack workspace: Settings → Apps → Incoming Webhooks\n              </p>\n            </div>\n            \n            <div>\n              <Label>Default Channel</Label>\n              <Input\n                placeholder=\"#lab-notifications\"\n                className=\"mt-2\"\n              />\n            </div>\n            \n            <div className=\"flex justify-end space-x-2\">\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowSlackDialog(false)}\n              >\n                Cancel\n              </Button>\n              <Button onClick={handleSlackSetup}>\n                Connect Slack\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":14495},"client/src/components/RealTimeNotifications.tsx":{"content":"import { useState } from \"react\";\nimport { Bell, Check, X, AlertCircle, Info, CheckCircle, AlertTriangle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport {\n  Card,\n  CardContent,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useWebSocket } from \"@/hooks/useWebSocket\";\n\ninterface NotificationItemProps {\n  notification: {\n    id: string;\n    title: string;\n    message: string;\n    type: 'info' | 'success' | 'warning' | 'error';\n    priority: 'low' | 'medium' | 'high';\n    createdAt: string;\n    read?: boolean;\n  };\n  onMarkAsRead: (id: string) => void;\n}\n\nfunction NotificationItem({ notification, onMarkAsRead }: NotificationItemProps) {\n  const getIcon = () => {\n    switch (notification.type) {\n      case 'success':\n        return <CheckCircle className=\"h-4 w-4 text-green-600\" />;\n      case 'warning':\n        return <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />;\n      case 'error':\n        return <AlertCircle className=\"h-4 w-4 text-red-600\" />;\n      default:\n        return <Info className=\"h-4 w-4 text-blue-600\" />;\n    }\n  };\n\n  const getPriorityColor = () => {\n    switch (notification.priority) {\n      case 'high':\n        return 'border-l-red-500';\n      case 'medium':\n        return 'border-l-yellow-500';\n      default:\n        return 'border-l-blue-500';\n    }\n  };\n\n  const timeAgo = (dateString: string) => {\n    const now = new Date();\n    const notificationTime = new Date(dateString);\n    const diffInSeconds = Math.floor((now.getTime() - notificationTime.getTime()) / 1000);\n    \n    if (diffInSeconds < 60) return 'Just now';\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;\n    return `${Math.floor(diffInSeconds / 86400)}d ago`;\n  };\n\n  return (\n    <div \n      className={`p-3 border-l-4 ${getPriorityColor()} ${\n        notification.read ? 'bg-muted/30' : 'bg-background'\n      } hover:bg-muted/50 transition-colors cursor-pointer`}\n      onClick={() => !notification.read && onMarkAsRead(notification.id)}\n    >\n      <div className=\"flex items-start space-x-3\">\n        <div className=\"flex-shrink-0 mt-0.5\">\n          {getIcon()}\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"flex items-center justify-between\">\n            <p className={`text-sm font-medium ${notification.read ? 'text-muted-foreground' : 'text-foreground'}`}>\n              {notification.title}\n            </p>\n            {!notification.read && (\n              <div className=\"w-2 h-2 bg-blue-600 rounded-full flex-shrink-0\" />\n            )}\n          </div>\n          <p className={`text-xs ${notification.read ? 'text-muted-foreground' : 'text-muted-foreground'} mt-1`}>\n            {notification.message}\n          </p>\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            {timeAgo(notification.createdAt)}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default function RealTimeNotifications() {\n  const { notifications, unreadCount, markNotificationAsRead, clearNotifications, isConnected } = useWebSocket();\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"relative\"\n          data-testid=\"notifications-trigger\"\n        >\n          <Bell className={`h-5 w-5 ${isConnected ? 'text-foreground' : 'text-muted-foreground'}`} />\n          {unreadCount > 0 && (\n            <Badge \n              variant=\"destructive\" \n              className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n            >\n              {unreadCount > 9 ? '9+' : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-0\" align=\"end\">\n        <Card className=\"border-0 shadow-lg\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-base\">Notifications</CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                {isConnected ? (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    <div className=\"w-2 h-2 bg-green-500 rounded-full mr-1\" />\n                    Live\n                  </Badge>\n                ) : (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    <div className=\"w-2 h-2 bg-red-500 rounded-full mr-1\" />\n                    Offline\n                  </Badge>\n                )}\n                {notifications.length > 0 && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={clearNotifications}\n                    className=\"text-xs px-2 py-1 h-auto\"\n                  >\n                    Clear All\n                  </Button>\n                )}\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-0\">\n            {notifications.length === 0 ? (\n              <div className=\"p-8 text-center text-muted-foreground\">\n                <Bell className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-sm\">No notifications yet</p>\n                <p className=\"text-xs mt-1\">You'll see real-time updates here</p>\n              </div>\n            ) : (\n              <ScrollArea className=\"h-96\">\n                <div className=\"space-y-1\">\n                  {notifications.map((notification) => (\n                    <NotificationItem\n                      key={notification.id}\n                      notification={notification}\n                      onMarkAsRead={markNotificationAsRead}\n                    />\n                  ))}\n                </div>\n              </ScrollArea>\n            )}\n          </CardContent>\n        </Card>\n      </PopoverContent>\n    </Popover>\n  );\n}","size_bytes":6255},"client/src/components/TestNotificationButton.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Bell, Zap, CheckCircle, AlertTriangle, Info } from \"lucide-react\";\n\nexport default function TestNotificationButton() {\n  const { toast } = useToast();\n  const [isSending, setIsSending] = useState(false);\n\n  const sendTestNotification = async (type: string, message: string) => {\n    setIsSending(true);\n    try {\n      await apiRequest(\"POST\", \"/api/test/notification\", { type, message });\n      toast({\n        title: \"Test Sent\",\n        description: \"Real-time notification dispatched to all users\",\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send test notification\",\n        variant: \"destructive\",\n      });\n    }\n    setIsSending(false);\n  };\n\n  return (\n    <Card className=\"w-full max-w-md\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Zap className=\"h-5 w-5 mr-2\" />\n          Test Real-Time Notifications\n        </CardTitle>\n      </CardHeader>\n      <CardContent className=\"space-y-3\">\n        <p className=\"text-sm text-muted-foreground\">\n          Test the real-time notification system by sending notifications to all connected users.\n        </p>\n        \n        <div className=\"grid grid-cols-2 gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            disabled={isSending}\n            onClick={() => sendTestNotification(\"success\", \"Great job! Project milestone completed successfully.\")}\n            className=\"text-green-600 border-green-600\"\n          >\n            <CheckCircle className=\"h-4 w-4 mr-1\" />\n            Success\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            disabled={isSending}\n            onClick={() => sendTestNotification(\"warning\", \"Deadline approaching: ML Project due in 2 days.\")}\n            className=\"text-yellow-600 border-yellow-600\"\n          >\n            <AlertTriangle className=\"h-4 w-4 mr-1\" />\n            Warning\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            disabled={isSending}\n            onClick={() => sendTestNotification(\"info\", \"New team member Sarah has joined the Data Analytics project.\")}\n            className=\"text-blue-600 border-blue-600\"\n          >\n            <Info className=\"h-4 w-4 mr-1\" />\n            Info\n          </Button>\n          \n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            disabled={isSending}\n            onClick={() => sendTestNotification(\"error\", \"System maintenance scheduled for tonight at 2 AM.\")}\n            className=\"text-red-600 border-red-600\"\n          >\n            <Bell className=\"h-4 w-4 mr-1\" />\n            Alert\n          </Button>\n        </div>\n        \n        {isSending && (\n          <p className=\"text-xs text-muted-foreground text-center\">\n            Sending notification...\n          </p>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":3227},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  // If we get a 401 error, the user is not authenticated\n  const isAuthenticated = !!user && !error;\n\n  return {\n    user: user || null,\n    isLoading,\n    isAuthenticated,\n  };\n}\n","size_bytes":423},"client/src/hooks/useWebSocket.ts":{"content":"import { useEffect, useRef, useState, useCallback } from 'react';\nimport { useAuth } from './useAuth';\nimport { useToast } from './use-toast';\n\ninterface WebSocketMessage {\n  type: string;\n  data?: any;\n  timestamp?: string;\n  updateType?: string;\n}\n\ninterface NotificationData {\n  id: string;\n  title: string;\n  message: string;\n  type: 'info' | 'success' | 'warning' | 'error';\n  priority: 'low' | 'medium' | 'high';\n  createdAt: string;\n}\n\nexport function useWebSocket() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const wsRef = useRef<WebSocket | null>(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const [notifications, setNotifications] = useState<NotificationData[]>([]);\n  const [connectionAttempts, setConnectionAttempts] = useState(0);\n  const maxReconnectAttempts = 5;\n\n  const connect = useCallback(() => {\n    if (!user || wsRef.current?.readyState === WebSocket.OPEN) return;\n\n    try {\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${protocol}//${window.location.host}/ws`;\n      \n      const ws = new WebSocket(wsUrl);\n      wsRef.current = ws;\n\n      ws.onopen = () => {\n        console.log('WebSocket connected');\n        setIsConnected(true);\n        setConnectionAttempts(0);\n        \n        // Authenticate with the server\n        ws.send(JSON.stringify({\n          type: 'authenticate',\n          userId: user.id,\n          role: user.role,\n          token: 'dummy-token' // In real implementation, use actual auth token\n        }));\n\n        // Subscribe to notifications\n        ws.send(JSON.stringify({\n          type: 'subscribe',\n          channels: ['general', 'projects', 'schedules']\n        }));\n      };\n\n      ws.onmessage = (event) => {\n        try {\n          const message: WebSocketMessage = JSON.parse(event.data);\n          handleMessage(message);\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n\n      ws.onclose = () => {\n        console.log('WebSocket disconnected');\n        setIsConnected(false);\n        wsRef.current = null;\n        \n        // Attempt to reconnect if under max attempts\n        if (connectionAttempts < maxReconnectAttempts) {\n          setTimeout(() => {\n            setConnectionAttempts(prev => prev + 1);\n            connect();\n          }, Math.pow(2, connectionAttempts) * 1000); // Exponential backoff\n        }\n      };\n\n      ws.onerror = (error) => {\n        console.error('WebSocket error:', error);\n        setIsConnected(false);\n      };\n\n    } catch (error) {\n      console.error('Failed to create WebSocket connection:', error);\n    }\n  }, [user, connectionAttempts]);\n\n  const handleMessage = useCallback((message: WebSocketMessage) => {\n    switch (message.type) {\n      case 'authenticated':\n        console.log('WebSocket authenticated successfully');\n        break;\n        \n      case 'notification':\n        if (message.data) {\n          const notification = message.data as NotificationData;\n          setNotifications(prev => [notification, ...prev.slice(0, 49)]); // Keep last 50\n          \n          // Show toast notification\n          toast({\n            title: notification.title,\n            description: notification.message,\n            variant: notification.type === 'error' ? 'destructive' : 'default',\n          });\n        }\n        break;\n        \n      case 'update':\n        console.log('Real-time update received:', message.updateType, message.data);\n        // Handle real-time updates (project changes, schedule updates, etc.)\n        break;\n        \n      case 'pong':\n        // Heartbeat response\n        break;\n        \n      default:\n        console.log('Unknown message type:', message.type);\n    }\n  }, [toast]);\n\n  const sendMessage = useCallback((message: any) => {\n    if (wsRef.current?.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    }\n  }, []);\n\n  const markNotificationAsRead = useCallback((notificationId: string) => {\n    setNotifications(prev => \n      prev.map(notif => \n        notif.id === notificationId \n          ? { ...notif, read: true } \n          : notif\n      )\n    );\n  }, []);\n\n  const clearNotifications = useCallback(() => {\n    setNotifications([]);\n  }, []);\n\n  useEffect(() => {\n    if (user) {\n      connect();\n    }\n\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n    };\n  }, [user, connect]);\n\n  // Heartbeat to keep connection alive\n  useEffect(() => {\n    if (!isConnected) return;\n\n    const interval = setInterval(() => {\n      sendMessage({ type: 'ping' });\n    }, 30000); // Ping every 30 seconds\n\n    return () => clearInterval(interval);\n  }, [isConnected, sendMessage]);\n\n  return {\n    isConnected,\n    notifications,\n    sendMessage,\n    markNotificationAsRead,\n    clearNotifications,\n    unreadCount: notifications.filter(n => !n.read).length,\n  };\n}","size_bytes":4947},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/Dashboard.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport RealTimeNotifications from \"@/components/RealTimeNotifications\";\nimport MobileNavigation from \"@/components/MobileNavigation\";\nimport PerformanceMonitor from \"@/components/PerformanceMonitor\";\nimport { useEffect } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport AdminDashboard from \"./admin/AdminDashboard\";\nimport StudentDashboard from \"./student/StudentDashboard\";\nimport PostdocDashboard from \"./postdoc/PostdocDashboard\";\nimport { LogOut, User } from \"lucide-react\";\n\nexport default function Dashboard() {\n  const { user, isLoading, isAuthenticated } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/auth/logout\", {});\n    },\n    onSuccess: () => {\n      queryClient.clear();\n      window.location.reload();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Logout Failed\",\n        description: error.message || \"Failed to logout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading dashboard...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated || !user) {\n    return null;\n  }\n\n  // Dashboard content based on user role\n  const getDashboardContent = () => {\n    switch (user.role) {\n      case 'admin':\n      case 'professor':\n        return <AdminDashboard />;\n      case 'postdoc':\n        return <PostdocDashboard />;\n      case 'student':\n      default:\n        return <StudentDashboard />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Top Navigation Bar */}\n      <div className=\"bg-white dark:bg-gray-800 border-b border-border px-4 lg:px-6 py-3\">\n        <div className=\"flex justify-between items-center max-w-7xl mx-auto\">\n          <div className=\"flex items-center space-x-2 lg:space-x-4\">\n            {/* Mobile Navigation */}\n            <MobileNavigation \n              onLogout={() => logoutMutation.mutate()}\n              isLoggingOut={logoutMutation.isPending}\n            />\n            \n            <img \n              src=\"attached_assets/LOGO_DigEpi_Lab_V2_1756505531752.tif\" \n              alt=\"Digital Epidemiology Laboratory Logo\" \n              className=\"h-6 lg:h-8 w-auto\"\n              onError={(e) => {\n                // Fallback if TIF format isn't supported\n                e.currentTarget.style.display = 'none';\n              }}\n            />\n            <h1 className=\"text-lg lg:text-xl font-bold text-foreground truncate\">\n              <span className=\"hidden sm:inline\">Digital Epidemiology Laboratory</span>\n              <span className=\"sm:hidden\">DigEpi Lab</span>\n            </h1>\n            \n            {/* Desktop User Info */}\n            <div className=\"hidden lg:flex items-center space-x-2 text-sm text-muted-foreground\">\n              <User className=\"h-4 w-4\" />\n              <span>{user?.firstName} {user?.lastName}</span>\n              <span className=\"px-2 py-1 bg-primary/10 text-primary rounded-full text-xs capitalize\">\n                {user?.role}\n              </span>\n            </div>\n          </div>\n          \n          {/* Desktop Actions */}\n          <div className=\"hidden lg:flex items-center space-x-3\">\n            <RealTimeNotifications />\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => logoutMutation.mutate()}\n              disabled={logoutMutation.isPending}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n            </Button>\n          </div>\n          \n          {/* Mobile Actions */}\n          <div className=\"lg:hidden flex items-center space-x-2\">\n            <RealTimeNotifications />\n          </div>\n        </div>\n      </div>\n      \n      {/* Dashboard Content */}\n      <div className=\"px-4 lg:px-6\">\n        {getDashboardContent()}\n      </div>\n      \n      {/* Performance Monitor */}\n      <PerformanceMonitor />\n    </div>\n  );\n}\n","size_bytes":4970},"client/src/pages/Landing.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2 } from \"lucide-react\";\n\nexport default function Landing() {\n  const [showForgotPassword, setShowForgotPassword] = useState(false);\n  const [resetEmail, setResetEmail] = useState(\"\");\n  const [activeTab, setActiveTab] = useState(\"login\");\n  \n  // Login form state\n  const [loginEmail, setLoginEmail] = useState(\"\");\n  const [loginPassword, setLoginPassword] = useState(\"\");\n  \n  // Registration form state\n  const [registerEmail, setRegisterEmail] = useState(\"\");\n  const [registerPassword, setRegisterPassword] = useState(\"\");\n  const [firstName, setFirstName] = useState(\"\");\n  const [lastName, setLastName] = useState(\"\");\n  const [role, setRole] = useState(\"student\");\n  const [department, setDepartment] = useState(\"\");\n  const [specialization, setSpecialization] = useState(\"\");\n  \n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      return await apiRequest(\"POST\", \"/api/auth/logout\", {});\n    },\n    onSuccess: () => {\n      queryClient.clear();\n      window.location.reload();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Logout Failed\",\n        description: error.message || \"Failed to logout\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      return await apiRequest(\"POST\", \"/api/auth/login\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      window.location.reload(); // Refresh to load the dashboard\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid email or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/auth/register\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      window.location.reload(); // Refresh to load the dashboard\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Registration Failed\",\n        description: error.message || \"Failed to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogin = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!loginEmail || !loginPassword) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter both email and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate({ email: loginEmail, password: loginPassword });\n  };\n\n  const handleRegister = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!registerEmail || !registerPassword) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter email and password\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (registerPassword.length < 8) {\n      toast({\n        title: \"Invalid Password\",\n        description: \"Password must be at least 8 characters long\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    registerMutation.mutate({\n      email: registerEmail,\n      password: registerPassword,\n      firstName: firstName || undefined,\n      lastName: lastName || undefined,\n      role,\n      department: department || undefined,\n      specialization: specialization || undefined,\n    });\n  };\n\n  const handleForgotPassword = () => {\n    // In a real implementation, this would make an API call\n    toast({\n      title: \"Password Reset\",\n      description: \"Password reset instructions have been sent to your email.\",\n    });\n    setShowForgotPassword(false);\n    setResetEmail(\"\");\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gradient-to-br from-primary/5 to-secondary/5\">\n      <div className=\"w-full max-w-md p-8\">\n        {/* University/Lab Branding */}\n        <div className=\"text-center mb-8\">\n          <div className=\"w-20 h-20 bg-primary rounded-full flex items-center justify-center mx-auto mb-4\">\n            <svg className=\"w-8 h-8 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n              <path d=\"M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.25 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z\"/>\n            </svg>\n          </div>\n          <h1 className=\"text-3xl font-bold text-foreground mb-2\">Digital Epidemiology Laboratory</h1>\n          <p className=\"text-muted-foreground\">Epidemiological Research Management System</p>\n        </div>\n\n        {/* Login/Register Form Card */}\n        <Card className=\"p-6 shadow-lg\">\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\">Sign In</TabsTrigger>\n              <TabsTrigger value=\"register\">Create Account</TabsTrigger>\n            </TabsList>\n            \n            {/* Login Tab */}\n            <TabsContent value=\"login\" className=\"space-y-6\">\n              <div className=\"text-center\">\n                <h2 className=\"text-xl font-semibold text-card-foreground\">Welcome Back</h2>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Sign in to access your research dashboard\n                </p>\n              </div>\n\n              <form onSubmit={handleLogin} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"login-email\">Email Address</Label>\n                  <Input\n                    id=\"login-email\"\n                    type=\"email\"\n                    value={loginEmail}\n                    onChange={(e) => setLoginEmail(e.target.value)}\n                    placeholder=\"your.email@university.edu\"\n                    className=\"mt-2\"\n                    data-testid=\"input-login-email\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"login-password\">Password</Label>\n                  <Input\n                    id=\"login-password\"\n                    type=\"password\"\n                    value={loginPassword}\n                    onChange={(e) => setLoginPassword(e.target.value)}\n                    placeholder=\"••••••••\"\n                    className=\"mt-2\"\n                    data-testid=\"input-login-password\"\n                    required\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox id=\"remember\" />\n                    <Label htmlFor=\"remember\" className=\"text-sm text-muted-foreground\">\n                      Remember me\n                    </Label>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"link\"\n                    className=\"text-sm text-primary hover:text-primary/80 p-0\"\n                    onClick={() => setShowForgotPassword(true)}\n                    data-testid=\"button-forgot-password\"\n                  >\n                    Forgot password?\n                  </Button>\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  disabled={loginMutation.isPending}\n                  className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\"\n                  data-testid=\"button-login\"\n                >\n                  {loginMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Signing In...\n                    </>\n                  ) : (\n                    \"Sign In\"\n                  )}\n                </Button>\n              </form>\n            </TabsContent>\n\n            {/* Register Tab */}\n            <TabsContent value=\"register\" className=\"space-y-6\">\n              <div className=\"text-center\">\n                <h2 className=\"text-xl font-semibold text-card-foreground\">Join Our Lab</h2>\n                <p className=\"text-sm text-muted-foreground mt-1\">\n                  Create your research account\n                </p>\n              </div>\n\n              <form onSubmit={handleRegister} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"first-name\">First Name</Label>\n                    <Input\n                      id=\"first-name\"\n                      value={firstName}\n                      onChange={(e) => setFirstName(e.target.value)}\n                      placeholder=\"John\"\n                      className=\"mt-2\"\n                      data-testid=\"input-first-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"last-name\">Last Name</Label>\n                    <Input\n                      id=\"last-name\"\n                      value={lastName}\n                      onChange={(e) => setLastName(e.target.value)}\n                      placeholder=\"Doe\"\n                      className=\"mt-2\"\n                      data-testid=\"input-last-name\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"register-email\">Email Address</Label>\n                  <Input\n                    id=\"register-email\"\n                    type=\"email\"\n                    value={registerEmail}\n                    onChange={(e) => setRegisterEmail(e.target.value)}\n                    placeholder=\"your.email@university.edu\"\n                    className=\"mt-2\"\n                    data-testid=\"input-register-email\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"register-password\">Password</Label>\n                  <Input\n                    id=\"register-password\"\n                    type=\"password\"\n                    value={registerPassword}\n                    onChange={(e) => setRegisterPassword(e.target.value)}\n                    placeholder=\"••••••••\"\n                    className=\"mt-2\"\n                    data-testid=\"input-register-password\"\n                    required\n                  />\n                  <p className=\"text-xs text-muted-foreground mt-1\">\n                    Must be at least 8 characters long\n                  </p>\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"role\">Role</Label>\n                    <Select value={role} onValueChange={setRole}>\n                      <SelectTrigger className=\"mt-2\" data-testid=\"select-role\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"student\">PhD/Graduate Student</SelectItem>\n                        <SelectItem value=\"postdoc\">Postdoc</SelectItem>\n                        <SelectItem value=\"professor\">Professor</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  <div>\n                    <Label htmlFor=\"department\">Department</Label>\n                    <Input\n                      id=\"department\"\n                      value={department}\n                      onChange={(e) => setDepartment(e.target.value)}\n                      placeholder=\"Computer Science\"\n                      className=\"mt-2\"\n                      data-testid=\"input-department\"\n                    />\n                  </div>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"specialization\">Research Area/Specialization</Label>\n                  <Input\n                    id=\"specialization\"\n                    value={specialization}\n                    onChange={(e) => setSpecialization(e.target.value)}\n                    placeholder=\"Machine Learning, Health Informatics, etc.\"\n                    className=\"mt-2\"\n                    data-testid=\"input-specialization\"\n                  />\n                </div>\n\n                <Button\n                  type=\"submit\"\n                  disabled={registerMutation.isPending}\n                  className=\"w-full bg-primary hover:bg-primary/90 text-primary-foreground\"\n                  data-testid=\"button-register\"\n                >\n                  {registerMutation.isPending ? (\n                    <>\n                      <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                      Creating Account...\n                    </>\n                  ) : (\n                    \"Create Account\"\n                  )}\n                </Button>\n              </form>\n            </TabsContent>\n          </Tabs>\n\n          {/* Security Notice */}\n          <div className=\"mt-6 text-center\">\n            <div className=\"flex items-center justify-center space-x-2 text-sm text-muted-foreground\">\n              <svg className=\"w-4 h-4 text-green-600\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path fillRule=\"evenodd\" d=\"M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z\" clipRule=\"evenodd\"/>\n              </svg>\n              <span>Secure encrypted authentication</span>\n            </div>\n          </div>\n        </Card>\n\n        {/* Footer Links */}\n        <div className=\"text-center mt-6 space-y-2\">\n          <p className=\"text-sm text-muted-foreground\">\n            Questions about access? Contact your lab supervisor.\n          </p>\n          <div className=\"flex justify-center space-x-4 text-xs text-muted-foreground\">\n            <Button variant=\"link\" className=\"text-xs p-0 h-auto text-muted-foreground hover:text-primary\">\n              Privacy Policy\n            </Button>\n            <span>•</span>\n            <Button variant=\"link\" className=\"text-xs p-0 h-auto text-muted-foreground hover:text-primary\">\n              Support\n            </Button>\n            <span>•</span>\n            <Button variant=\"link\" className=\"text-xs p-0 h-auto text-muted-foreground hover:text-primary\">\n              Documentation\n            </Button>\n          </div>\n        </div>\n\n        {/* Password Reset Modal */}\n        <Dialog open={showForgotPassword} onOpenChange={setShowForgotPassword}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Reset Password</DialogTitle>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Enter your email address and we'll send you a link to reset your password.\n              </p>\n              <div>\n                <Label htmlFor=\"reset-email\">Email Address</Label>\n                <Input\n                  id=\"reset-email\"\n                  type=\"email\"\n                  value={resetEmail}\n                  onChange={(e) => setResetEmail(e.target.value)}\n                  placeholder=\"your.email@university.edu\"\n                  className=\"mt-2\"\n                  data-testid=\"input-reset-email\"\n                />\n              </div>\n              <div className=\"flex space-x-3\">\n                <Button\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setShowForgotPassword(false)}\n                  data-testid=\"button-cancel-reset\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  className=\"flex-1 bg-primary hover:bg-primary/90\"\n                  onClick={handleForgotPassword}\n                  data-testid=\"button-send-reset\"\n                >\n                  Send Reset Link\n                </Button>\n              </div>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","size_bytes":17206},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/types/user.ts":{"content":"export interface UserRole {\n  id: string;\n  name: string;\n  permissions: string[];\n}\n\nexport interface UserMetrics {\n  activeProjects: number;\n  weeklyHours: number;\n  productivityScore: number;\n  totalUpdates: number;\n  upcomingDeadlines: number;\n}\n\nexport interface LabMetrics {\n  totalUsers: number;\n  activeStudents: number;\n  activeProjects: number;\n  totalProjects: number;\n  weeklyHours: number;\n  atRiskStudents: number;\n}\n","size_bytes":431},"client/src/components/auth/ProtectedRoute.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requiredRole?: string[];\n}\n\nexport default function ProtectedRoute({ children, requiredRole }: ProtectedRouteProps) {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Unauthorized\",\n        description: \"You are logged out. Logging in again...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n\n    if (!isLoading && isAuthenticated && requiredRole && user) {\n      if (!requiredRole.includes(user.role || '')) {\n        toast({\n          title: \"Access Denied\",\n          description: \"You don't have permission to access this page\",\n          variant: \"destructive\",\n        });\n      }\n    }\n  }, [isAuthenticated, isLoading, user, requiredRole, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary mx-auto mb-4\"></div>\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!isAuthenticated) {\n    return null;\n  }\n\n  if (requiredRole && user && !requiredRole.includes(user.role || '')) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"text-center\">\n          <p className=\"text-destructive text-lg\">Access Denied</p>\n          <p className=\"text-muted-foreground\">You don't have permission to access this page</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":1934},"client/src/components/dashboard/ActivityFeed.tsx":{"content":"import { ScrollArea } from \"@/components/ui/scroll-area\";\n\ninterface ActivityItem {\n  id: string;\n  user: string;\n  action: string;\n  timestamp: string;\n  status?: string;\n}\n\ninterface ActivityFeedProps {\n  title: string;\n  items: ActivityItem[];\n  emptyMessage: string;\n  'data-testid'?: string;\n}\n\nexport default function ActivityFeed({ title, items, emptyMessage, 'data-testid': testId }: ActivityFeedProps) {\n  return (\n    <div className=\"bg-card border border-border rounded-lg p-6\" data-testid={testId}>\n      <h3 className=\"text-lg font-semibold mb-4\">{title}</h3>\n      \n      {items.length > 0 ? (\n        <ScrollArea className=\"h-64\">\n          <div className=\"space-y-3\">\n            {items.map((item) => (\n              <div key={item.id} className=\"flex items-center justify-between p-3 bg-muted rounded-md\" data-testid={`activity-item-${item.id}`}>\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n                    <span className=\"text-xs font-medium text-primary-foreground\">\n                      {item.user.split(' ').map(n => n[0]).join('')}\n                    </span>\n                  </div>\n                  <div>\n                    <p className=\"text-sm font-medium\">{item.user}</p>\n                    <p className=\"text-xs text-muted-foreground\">{item.action}</p>\n                  </div>\n                </div>\n                <span className=\"text-xs text-muted-foreground\">{item.timestamp}</span>\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n      ) : (\n        <div className=\"text-center py-8 text-muted-foreground\">\n          <div className=\"w-12 h-12 mx-auto mb-2 opacity-50 bg-muted rounded-full flex items-center justify-center\">\n            <span className=\"text-xl\">📋</span>\n          </div>\n          <p>{emptyMessage}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":1957},"client/src/components/dashboard/MetricCard.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface MetricCardProps {\n  title: string;\n  value: string;\n  subtitle: string;\n  icon: LucideIcon;\n  iconColor: string;\n  iconBgColor: string;\n  isLoading?: boolean;\n  'data-testid'?: string;\n}\n\nexport default function MetricCard({\n  title,\n  value,\n  subtitle,\n  icon: Icon,\n  iconColor,\n  iconBgColor,\n  isLoading = false,\n  'data-testid': testId,\n}: MetricCardProps) {\n  return (\n    <Card data-testid={testId}>\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm text-muted-foreground\">{title}</p>\n            {isLoading ? (\n              <Skeleton className=\"h-8 w-16 mt-1\" />\n            ) : (\n              <p className=\"text-2xl font-bold text-foreground\" data-testid={`${testId}-value`}>\n                {value}\n              </p>\n            )}\n            <p className=\"text-xs text-muted-foreground\">{subtitle}</p>\n          </div>\n          <div className={`w-12 h-12 ${iconBgColor} rounded-full flex items-center justify-center`}>\n            <Icon className={`w-5 h-5 ${iconColor}`} />\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1325},"client/src/components/dashboard/TeamTable.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Users } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\ninterface TeamTableProps {\n  users: User[];\n  isLoading: boolean;\n  error: Error | null;\n  'data-testid'?: string;\n}\n\nconst roleColors = {\n  admin: 'bg-purple-100 text-purple-800',\n  professor: 'bg-primary/10 text-primary',\n  postdoc: 'bg-green-100 text-green-800',\n  student: 'bg-secondary/10 text-secondary',\n};\n\nconst statusColors = {\n  'On Track': 'bg-green-100 text-green-800',\n  'Behind Schedule': 'bg-yellow-100 text-yellow-800',\n  'At Risk': 'bg-destructive/10 text-destructive',\n  'Inactive': 'bg-gray-100 text-gray-800',\n};\n\nexport default function TeamTable({ users, isLoading, error, 'data-testid': testId }: TeamTableProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      await apiRequest(\"PUT\", `/api/users/${userId}/role`, { role });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deactivateUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      await apiRequest(\"DELETE\", `/api/users/${userId}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User deactivated successfully\",\n      });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to deactivate user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getInitials = (firstName?: string | null, lastName?: string | null) => {\n    if (!firstName && !lastName) return \"??\";\n    const first = firstName ? firstName[0].toUpperCase() : \"\";\n    const last = lastName ? lastName[0].toUpperCase() : \"\";\n    return first + last;\n  };\n\n  const getRoleColor = (role: string) => {\n    return roleColors[role as keyof typeof roleColors] || 'bg-gray-100 text-gray-800';\n  };\n\n  if (error && !isUnauthorizedError(error)) {\n    return (\n      <div className=\"text-center py-12 text-destructive\">\n        <p>Error loading team data: {error.message}</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg overflow-hidden\" data-testid={testId}>\n      <div className=\"overflow-x-auto\">\n        <Table>\n          <TableHeader>\n            <TableRow>\n              <TableHead>Member</TableHead>\n              <TableHead>Role</TableHead>\n              <TableHead>Projects</TableHead>\n              <TableHead>Hours This Week</TableHead>\n              <TableHead>Status</TableHead>\n              <TableHead>Actions</TableHead>\n            </TableRow>\n          </TableHeader>\n          <TableBody>\n            {isLoading ? (\n              Array.from({ length: 5 }).map((_, index) => (\n                <TableRow key={index}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <Skeleton className=\"w-10 h-10 rounded-full\" />\n                      <div>\n                        <Skeleton className=\"h-4 w-32 mb-1\" />\n                        <Skeleton className=\"h-3 w-48\" />\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell><Skeleton className=\"h-6 w-20\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-40\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-4 w-24\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-6 w-20\" /></TableCell>\n                  <TableCell><Skeleton className=\"h-8 w-32\" /></TableCell>\n                </TableRow>\n              ))\n            ) : users.length > 0 ? (\n              users.map((user) => (\n                <TableRow key={user.id} className=\"hover:bg-muted/50\" data-testid={`team-member-${user.id}`}>\n                  <TableCell>\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\">\n                        <span className=\"text-sm font-medium text-primary-foreground\">\n                          {getInitials(user.firstName, user.lastName)}\n                        </span>\n                      </div>\n                      <div>\n                        <div className=\"text-sm font-medium text-foreground\">\n                          {user.firstName && user.lastName ? `${user.firstName} ${user.lastName}` : user.email}\n                        </div>\n                        <div className=\"text-sm text-muted-foreground\">{user.email}</div>\n                      </div>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Select\n                      value={user.role}\n                      onValueChange={(newRole) => \n                        updateRoleMutation.mutate({ userId: user.id, role: newRole })\n                      }\n                      disabled={updateRoleMutation.isPending}\n                    >\n                      <SelectTrigger className=\"w-32\">\n                        <SelectValue>\n                          <Badge className={getRoleColor(user.role || 'student')}>\n                            {user.role || 'student'}\n                          </Badge>\n                        </SelectValue>\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"student\">Student</SelectItem>\n                        <SelectItem value=\"postdoc\">Postdoc</SelectItem>\n                        <SelectItem value=\"professor\">Professor</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </TableCell>\n                  <TableCell className=\"text-sm text-muted-foreground\">\n                    {user.specialization || \"No projects assigned\"}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"text-sm text-foreground\">0/20 hours</div>\n                    <Progress value={0} className=\"w-full h-2 mt-1\" />\n                  </TableCell>\n                  <TableCell>\n                    <Badge className={statusColors['Inactive']}>\n                      {user.isActive ? 'Active' : 'Inactive'}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button \n                        variant=\"link\" \n                        size=\"sm\" \n                        className=\"text-primary hover:text-primary/80 p-0\"\n                        data-testid={`button-view-${user.id}`}\n                      >\n                        View\n                      </Button>\n                      <Button \n                        variant=\"link\" \n                        size=\"sm\" \n                        className=\"text-muted-foreground hover:text-foreground p-0\"\n                        data-testid={`button-edit-${user.id}`}\n                      >\n                        Edit\n                      </Button>\n                      <Button \n                        variant=\"link\" \n                        size=\"sm\" \n                        className=\"text-destructive hover:text-destructive/80 p-0\"\n                        onClick={() => deactivateUserMutation.mutate(user.id)}\n                        disabled={deactivateUserMutation.isPending}\n                        data-testid={`button-remove-${user.id}`}\n                      >\n                        Remove\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))\n            ) : (\n              <TableRow>\n                <TableCell colSpan={6} className=\"text-center py-12 text-muted-foreground\">\n                  <Users className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                  <p>No team members found</p>\n                  <p className=\"text-sm\">Add team members to get started</p>\n                </TableCell>\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9893},"client/src/components/layout/Header.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Bell, LogOut } from \"lucide-react\";\nimport type { User } from \"@shared/schema\";\n\ninterface HeaderProps {\n  user: User | null;\n  role: string;\n  roleIcon: string;\n  notificationCount?: number;\n}\n\nconst roleColors = {\n  'Professor': 'bg-primary/10 text-primary',\n  'PhD Student': 'bg-secondary/10 text-secondary', \n  'Postdoc': 'bg-green-100 text-green-800',\n};\n\nexport default function Header({ user, role, roleIcon, notificationCount = 0 }: HeaderProps) {\n  const handleLogout = () => {\n    window.location.href = \"/api/logout\";\n  };\n\n  const getInitials = (firstName?: string | null, lastName?: string | null) => {\n    if (!firstName && !lastName) return \"??\";\n    const first = firstName ? firstName[0].toUpperCase() : \"\";\n    const last = lastName ? lastName[0].toUpperCase() : \"\";\n    return first + last;\n  };\n\n  const getRoleColorClass = (role: string) => {\n    return roleColors[role as keyof typeof roleColors] || 'bg-muted text-muted-foreground';\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n              <svg className=\"w-4 h-4 text-primary-foreground\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                <path d=\"M10.394 2.08a1 1 0 00-.788 0l-7 3a1 1 0 000 1.84L5.25 8.051a.999.999 0 01.356-.257l4-1.714a1 1 0 11.788 1.838L7.667 9.088l1.94.831a1 1 0 00.787 0l7-3a1 1 0 000-1.838l-7-3zM3.31 9.397L5 10.12v4.102a8.969 8.969 0 00-1.05-.174 1 1 0 01-.89-.89 11.115 11.115 0 01.25-3.762zM9.3 16.573A9.026 9.026 0 007 14.935v-3.957l1.818.78a3 3 0 002.364 0l5.508-2.361a11.026 11.026 0 01.25 3.762 1 1 0 01-.89.89 8.968 8.968 0 00-5.25 2.524 1 1 0 01-1.4 0zM6 18a1 1 0 001-1v-2.065a8.935 8.935 0 00-2-.712V17a1 1 0 001 1z\"/>\n              </svg>\n            </div>\n            <h1 className=\"text-xl font-bold text-foreground\" data-testid=\"header-title\">\n              {role.includes('Professor') ? 'LIA Dashboard' : \n               role.includes('Student') ? 'My Research Dashboard' : 'Research Hub'}\n            </h1>\n          </div>\n          <div className={`px-3 py-1 rounded-full ${getRoleColorClass(role)}`}>\n            <span className=\"text-xs font-medium\">\n              <svg className=\"w-3 h-3 inline mr-1\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                {roleIcon === 'user-tie' && (\n                  <path d=\"M10 9a3 3 0 100-6 3 3 0 000 6zm-7 9a7 7 0 1114 0H3z\"/>\n                )}\n                {roleIcon === 'user-graduate' && (\n                  <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z M10 14a4 4 0 00-4 4h8a4 4 0 00-4-4z\"/>\n                )}\n                {roleIcon === 'user-check' && (\n                  <path d=\"M10 12a2 2 0 100-4 2 2 0 000 4z M10 14a4 4 0 00-4 4h8a4 4 0 00-4-4z M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\"/>\n                )}\n              </svg>\n              {role}\n            </span>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"relative p-2 text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-notifications\"\n          >\n            <Bell className=\"w-4 h-4\" />\n            {notificationCount > 0 && (\n              <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full text-xs text-destructive-foreground flex items-center justify-center\">\n                {notificationCount}\n              </span>\n            )}\n          </Button>\n          \n          <div className=\"flex items-center space-x-2\">\n            <div className=\"text-right\" data-testid=\"user-info\">\n              <p className=\"text-sm font-medium\">\n                {user?.firstName && user?.lastName ? `${user.firstName} ${user.lastName}` : user?.email}\n              </p>\n              <p className=\"text-xs text-muted-foreground\">\n                {user?.department || user?.specialization || 'Research Team'}\n              </p>\n            </div>\n            <div className=\"w-10 h-10 bg-primary rounded-full flex items-center justify-center\" data-testid=\"user-avatar\">\n              <span className=\"text-sm font-medium text-primary-foreground\">\n                {getInitials(user?.firstName, user?.lastName)}\n              </span>\n            </div>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleLogout}\n            className=\"p-2 text-muted-foreground hover:text-foreground\"\n            data-testid=\"button-logout\"\n          >\n            <LogOut className=\"w-4 h-4\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":4979},"client/src/components/layout/Sidebar.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport { \n  BarChart3, \n  Users, \n  Projector as Project, \n  Brain, \n  Calendar, \n  FileText, \n  Settings,\n  ListTodo,\n  Lightbulb,\n  Microscope,\n  UserCheck\n} from \"lucide-react\";\n\ninterface SidebarItem {\n  id: string;\n  label: string;\n  icon: string;\n}\n\ninterface SidebarProps {\n  items: SidebarItem[];\n  activeSection: string;\n  onSectionChange: (section: string) => void;\n}\n\nconst iconMap = {\n  'chart-line': BarChart3,\n  'users': Users,\n  'project-diagram': Project,\n  'brain': Brain,\n  'calendar-alt': Calendar,\n  'file-alt': FileText,\n  'cog': Settings,\n  'tasks': ListTodo,\n  'lightbulb': Lightbulb,\n  'chart-bar': BarChart3,\n  'microscope': Microscope,\n  'user-friends': UserCheck,\n};\n\nexport default function Sidebar({ items, activeSection, onSectionChange }: SidebarProps) {\n  return (\n    <nav className=\"w-64 bg-card border-r border-border p-4\" data-testid=\"sidebar-nav\">\n      <div className=\"space-y-2\">\n        {items.map((item) => {\n          const Icon = iconMap[item.icon as keyof typeof iconMap] || BarChart3;\n          const isActive = activeSection === item.id;\n          \n          return (\n            <Button\n              key={item.id}\n              variant={isActive ? \"default\" : \"ghost\"}\n              className={cn(\n                \"w-full justify-start text-sm h-10\",\n                isActive \n                  ? \"bg-primary text-primary-foreground hover:bg-primary/90\" \n                  : \"hover:bg-accent\"\n              )}\n              onClick={() => onSectionChange(item.id)}\n              data-testid={`nav-${item.id}`}\n            >\n              <Icon className=\"w-4 h-4 mr-3\" />\n              <span>{item.label}</span>\n            </Button>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1821},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/admin/AIAnalytics.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { \n  LazyProductivityTrendChart,\n  LazyProjectStatusPieChart,\n  LazyTeamPerformanceRadar,\n  LazyTimeSeriesAnalytics\n} from \"@/components/LazyChart\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Brain,\n  TrendingUp,\n  TrendingDown,\n  AlertTriangle,\n  Target,\n  Users,\n  Clock,\n  Lightbulb,\n  Zap,\n  BarChart3,\n  PieChart,\n  Activity,\n  CheckCircle,\n  XCircle,\n  ArrowUp,\n  ArrowDown,\n  Home\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface AIInsight {\n  id: string;\n  type: 'productivity' | 'risk' | 'opportunity' | 'prediction';\n  priority: 'high' | 'medium' | 'low';\n  title: string;\n  description: string;\n  recommendation: string;\n  confidence: number;\n  impact: 'positive' | 'negative' | 'neutral';\n  createdAt: string;\n}\n\ninterface ProductivityMetrics {\n  overallScore: number;\n  weeklyTrend: number;\n  topPerformers: string[];\n  bottlenecks: string[];\n  recommendations: string[];\n}\n\ninterface ProjectPrediction {\n  projectId: string;\n  projectName: string;\n  currentProgress: number;\n  predictedCompletion: string;\n  riskLevel: 'low' | 'medium' | 'high';\n  delayProbability: number;\n  suggestedActions: string[];\n}\n\n// Mock AI-generated insights - In production, this would come from ML models\nconst mockInsights: AIInsight[] = [\n  {\n    id: '1',\n    type: 'productivity',\n    priority: 'high',\n    title: 'Team Productivity Spike Detected',\n    description: 'Your team\\'s productivity has increased by 23% over the past 2 weeks.',\n    recommendation: 'Consider documenting current practices to maintain this momentum.',\n    confidence: 87,\n    impact: 'positive',\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: '2',\n    type: 'risk',\n    priority: 'medium',\n    title: 'Project Timeline Risk',\n    description: 'ML Health Analysis project is 15% behind schedule with increasing complexity.',\n    recommendation: 'Allocate additional senior resources or extend deadline by 2 weeks.',\n    confidence: 72,\n    impact: 'negative',\n    createdAt: new Date().toISOString()\n  },\n  {\n    id: '3',\n    type: 'opportunity',\n    priority: 'medium',\n    title: 'Knowledge Sharing Opportunity',\n    description: 'Sarah has expertise that could accelerate 2 other ongoing projects.',\n    recommendation: 'Schedule cross-project knowledge sharing sessions.',\n    confidence: 81,\n    impact: 'positive',\n    createdAt: new Date().toISOString()\n  }\n];\n\nconst mockProductivityMetrics: ProductivityMetrics = {\n  overallScore: 78,\n  weeklyTrend: 12,\n  topPerformers: ['Sarah Chen', 'Alex Rodriguez'],\n  bottlenecks: ['Data preprocessing', 'Model validation'],\n  recommendations: [\n    'Implement automated data preprocessing pipeline',\n    'Establish peer review process for model validation',\n    'Schedule weekly progress check-ins'\n  ]\n};\n\nconst mockPredictions: ProjectPrediction[] = [\n  {\n    projectId: '1',\n    projectName: 'ML Health Data Analysis',\n    currentProgress: 65,\n    predictedCompletion: '2024-03-15',\n    riskLevel: 'medium',\n    delayProbability: 35,\n    suggestedActions: [\n      'Add senior ML engineer to team',\n      'Simplify model complexity',\n      'Extend deadline by 1 week'\n    ]\n  },\n  {\n    projectId: '2',\n    projectName: 'Patient Data Pipeline',\n    currentProgress: 85,\n    predictedCompletion: '2024-02-28',\n    riskLevel: 'low',\n    delayProbability: 12,\n    suggestedActions: [\n      'Maintain current pace',\n      'Prepare documentation early'\n    ]\n  }\n];\n\nexport default function AIAnalytics() {\n  const { user } = useAuth();\n  const [selectedInsightType, setSelectedInsightType] = useState<string>('all');\n\n  // In production, these would fetch real AI-generated insights\n  const { data: labMetrics } = useQuery({\n    queryKey: [\"/api/analytics/lab\"],\n  });\n\n  const getInsightIcon = (type: string) => {\n    switch (type) {\n      case 'productivity': return <TrendingUp className=\"h-5 w-5\" />;\n      case 'risk': return <AlertTriangle className=\"h-5 w-5\" />;\n      case 'opportunity': return <Lightbulb className=\"h-5 w-5\" />;\n      case 'prediction': return <Brain className=\"h-5 w-5\" />;\n      default: return <Activity className=\"h-5 w-5\" />;\n    }\n  };\n\n  const getInsightColor = (type: string, impact: string) => {\n    if (type === 'risk') return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n    if (impact === 'positive') return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n    if (impact === 'negative') return 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300';\n    return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-red-100 text-red-800 border-red-200';\n      case 'medium': return 'bg-yellow-100 text-yellow-800 border-yellow-200';\n      case 'low': return 'bg-green-100 text-green-800 border-green-200';\n      default: return 'bg-gray-100 text-gray-800 border-gray-200';\n    }\n  };\n\n  const getRiskColor = (level: string) => {\n    switch (level) {\n      case 'high': return 'text-red-600';\n      case 'medium': return 'text-yellow-600';\n      case 'low': return 'text-green-600';\n      default: return 'text-gray-600';\n    }\n  };\n\n  const filteredInsights = selectedInsightType === 'all' \n    ? mockInsights \n    : mockInsights.filter(insight => insight.type === selectedInsightType);\n\n  return (\n    <div className=\"min-h-screen bg-background p-4 lg:p-6\">\n      {/* Navigation Breadcrumbs */}\n      <div className=\"flex items-center space-x-2 mb-4 lg:mb-6\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"nav-home\">\n            <Home className=\"h-4 w-4 mr-2\" />\n            Dashboard\n          </Button>\n        </Link>\n        <span className=\"text-muted-foreground\">→</span>\n        <span className=\"text-foreground font-medium\">AI Analytics</span>\n      </div>\n\n      <div className=\"space-y-4 lg:space-y-6\">\n        {/* Header */}\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between space-y-4 lg:space-y-0\">\n          <div>\n          <h1 className=\"text-2xl lg:text-3xl font-bold text-foreground flex items-center\">\n            <Brain className=\"mr-3 h-6 w-6 lg:h-8 lg:w-8 text-primary\" />\n            <span className=\"hidden sm:inline\">AI Analytics Dashboard</span>\n            <span className=\"sm:hidden\">AI Analytics</span>\n          </h1>\n          <p className=\"text-sm lg:text-base text-muted-foreground\">\n            Intelligent insights and predictions for your research lab\n          </p>\n        </div>\n        <div className=\"flex items-center space-x-2 text-sm text-muted-foreground\">\n          <Activity className=\"h-4 w-4\" />\n          <span>Real-time AI Analysis</span>\n        </div>\n      </div>\n\n      {/* Key AI Metrics */}\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-primary/10 rounded-lg\">\n                <TrendingUp className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Productivity Score</p>\n                <div className=\"flex items-center space-x-2\">\n                  <p className=\"text-2xl font-bold\">{mockProductivityMetrics.overallScore}%</p>\n                  <Badge className=\"bg-green-100 text-green-800\">\n                    <ArrowUp className=\"h-3 w-3 mr-1\" />\n                    +{mockProductivityMetrics.weeklyTrend}%\n                  </Badge>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-blue-100 rounded-lg\">\n                <Brain className=\"h-6 w-6 text-blue-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">AI Insights</p>\n                <p className=\"text-2xl font-bold\">{mockInsights.length}</p>\n                <p className=\"text-xs text-muted-foreground\">Generated today</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-orange-100 rounded-lg\">\n                <AlertTriangle className=\"h-6 w-6 text-orange-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Risk Alerts</p>\n                <p className=\"text-2xl font-bold\">\n                  {mockInsights.filter(i => i.type === 'risk').length}\n                </p>\n                <p className=\"text-xs text-muted-foreground\">Require attention</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className=\"p-2 bg-green-100 rounded-lg\">\n                <Target className=\"h-6 w-6 text-green-600\" />\n              </div>\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Prediction Accuracy</p>\n                <p className=\"text-2xl font-bold\">94%</p>\n                <p className=\"text-xs text-muted-foreground\">Last 30 days</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Main Analytics Tabs */}\n      <Tabs defaultValue=\"insights\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"insights\">AI Insights</TabsTrigger>\n          <TabsTrigger value=\"predictions\">Predictions</TabsTrigger>\n          <TabsTrigger value=\"productivity\">Productivity</TabsTrigger>\n          <TabsTrigger value=\"trends\">Trends</TabsTrigger>\n        </TabsList>\n\n        {/* AI Insights Tab */}\n        <TabsContent value=\"insights\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Smart Insights</h2>\n            <div className=\"flex space-x-2\">\n              {['all', 'productivity', 'risk', 'opportunity', 'prediction'].map((type) => (\n                <Button\n                  key={type}\n                  variant={selectedInsightType === type ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedInsightType(type)}\n                  className=\"capitalize\"\n                  data-testid={`filter-${type}`}\n                >\n                  {type}\n                </Button>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            {filteredInsights.map((insight) => (\n              <Card key={insight.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"pb-4\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center space-x-3\">\n                      <div className={`p-2 rounded-lg ${getInsightColor(insight.type, insight.impact)}`}>\n                        {getInsightIcon(insight.type)}\n                      </div>\n                      <div>\n                        <CardTitle className=\"text-lg\">{insight.title}</CardTitle>\n                        <div className=\"flex items-center space-x-2 mt-1\">\n                          <Badge className={getPriorityColor(insight.priority)}>\n                            {insight.priority} priority\n                          </Badge>\n                          <span className=\"text-sm text-muted-foreground\">\n                            {insight.confidence}% confidence\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-muted-foreground\">{insight.description}</p>\n                  \n                  <div className=\"bg-blue-50 dark:bg-blue-900/20 p-4 rounded-lg\">\n                    <h4 className=\"font-medium text-blue-900 dark:text-blue-300 mb-2 flex items-center\">\n                      <Lightbulb className=\"h-4 w-4 mr-2\" />\n                      AI Recommendation\n                    </h4>\n                    <p className=\"text-blue-800 dark:text-blue-300 text-sm\">\n                      {insight.recommendation}\n                    </p>\n                  </div>\n\n                  <div className=\"flex justify-between items-center pt-2\">\n                    <span className=\"text-xs text-muted-foreground\">\n                      Generated {new Date(insight.createdAt).toLocaleDateString()}\n                    </span>\n                    <Button size=\"sm\" variant=\"outline\" data-testid={`action-${insight.id}`}>\n                      Take Action\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Predictions Tab */}\n        <TabsContent value=\"predictions\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Project Predictions</h2>\n            <Badge variant=\"outline\" className=\"text-green-600\">\n              <Zap className=\"h-3 w-3 mr-1\" />\n              ML-Powered\n            </Badge>\n          </div>\n\n          <div className=\"space-y-4\">\n            {mockPredictions.map((prediction) => (\n              <Card key={prediction.projectId}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-4 flex-1\">\n                      <div className=\"flex items-center justify-between\">\n                        <h3 className=\"font-semibold text-lg\">{prediction.projectName}</h3>\n                        <Badge className={getRiskColor(prediction.riskLevel)}>\n                          {prediction.riskLevel} risk\n                        </Badge>\n                      </div>\n\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Current Progress</p>\n                          <div className=\"space-y-1\">\n                            <Progress value={prediction.currentProgress} />\n                            <p className=\"text-sm font-medium\">{prediction.currentProgress}%</p>\n                          </div>\n                        </div>\n\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">Predicted Completion</p>\n                          <p className=\"font-medium\">{new Date(prediction.predictedCompletion).toLocaleDateString()}</p>\n                          <p className=\"text-xs text-red-600\">\n                            {prediction.delayProbability}% delay probability\n                          </p>\n                        </div>\n\n                        <div>\n                          <p className=\"text-sm text-muted-foreground\">AI Suggestions</p>\n                          <ul className=\"text-sm space-y-1\">\n                            {prediction.suggestedActions.slice(0, 2).map((action, index) => (\n                              <li key={index} className=\"flex items-center\">\n                                <CheckCircle className=\"h-3 w-3 mr-2 text-green-600\" />\n                                {action}\n                              </li>\n                            ))}\n                          </ul>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </TabsContent>\n\n        {/* Productivity Tab */}\n        <TabsContent value=\"productivity\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Productivity Analysis</h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Users className=\"mr-2 h-5 w-5\" />\n                  Top Performers\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockProductivityMetrics.topPerformers.map((performer, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        <div className=\"w-8 h-8 bg-primary/10 rounded-full flex items-center justify-center\">\n                          <span className=\"text-sm font-medium\">#{index + 1}</span>\n                        </div>\n                        <span className=\"font-medium\">{performer}</span>\n                      </div>\n                      <Badge className=\"bg-green-100 text-green-800\">\n                        <TrendingUp className=\"h-3 w-3 mr-1\" />\n                        High\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <AlertTriangle className=\"mr-2 h-5 w-5\" />\n                  Bottlenecks Detected\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {mockProductivityMetrics.bottlenecks.map((bottleneck, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <span className=\"text-muted-foreground\">{bottleneck}</span>\n                      <Badge className=\"bg-yellow-100 text-yellow-800\">\n                        <Clock className=\"h-3 w-3 mr-1\" />\n                        Delays\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Lightbulb className=\"mr-2 h-5 w-5\" />\n                AI Recommendations\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mockProductivityMetrics.recommendations.map((rec, index) => (\n                  <div key={index} className=\"flex items-start space-x-3 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\n                    <CheckCircle className=\"h-5 w-5 text-blue-600 mt-0.5\" />\n                    <span className=\"text-blue-900 dark:text-blue-300\">{rec}</span>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Trends Tab */}\n        <TabsContent value=\"trends\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Performance Trends</h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <BarChart3 className=\"mr-2 h-5 w-5\" />\n                  Weekly Progress Trends\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"h-32 bg-gradient-to-r from-blue-100 to-blue-50 dark:from-blue-900/20 dark:to-blue-800/20 rounded-lg flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <TrendingUp className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">Trend visualization would go here</p>\n                      <p className=\"text-xs text-muted-foreground\">Chart.js or Recharts integration</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <PieChart className=\"mr-2 h-5 w-5\" />\n                  Time Allocation\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  <div className=\"h-32 bg-gradient-to-r from-green-100 to-green-50 dark:from-green-900/20 dark:to-green-800/20 rounded-lg flex items-center justify-center\">\n                    <div className=\"text-center\">\n                      <PieChart className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                      <p className=\"text-sm text-muted-foreground\">Time distribution chart</p>\n                      <p className=\"text-xs text-muted-foreground\">Research vs Development vs Analysis</p>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </TabsContent>\n      </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":22169},"client/src/pages/admin/AdminDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport Header from \"@/components/layout/Header\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport MetricCard from \"@/components/dashboard/MetricCard\";\nimport ActivityFeed from \"@/components/dashboard/ActivityFeed\";\nimport TeamTable from \"@/components/dashboard/TeamTable\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Users, Projector, Clock, AlertTriangle, Bell, FolderOpen, Plus, Brain, Calendar, BarChart3, Settings } from \"lucide-react\";\n\nconst adminSidebarItems = [\n  { id: 'overview', label: 'Lab Overview', icon: 'chart-line' },\n  { id: 'team', label: 'Team Management', icon: 'users' },\n  { id: 'projects', label: 'Projects', icon: 'project-diagram' },\n  { id: 'ai-analytics', label: 'AI Analytics', icon: 'brain' },\n  { id: 'schedules', label: 'Schedules', icon: 'calendar-alt' },\n  { id: 'reports', label: 'Reports', icon: 'file-alt' },\n  { id: 'settings', label: 'Settings', icon: 'cog' },\n];\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeSection, setActiveSection] = useState('overview');\n\n  const { data: labMetrics, isLoading: metricsLoading, error: metricsError } = useQuery({\n    queryKey: [\"/api/analytics/lab\"],\n    retry: false,\n  });\n\n  const { data: allUsers, isLoading: usersLoading, error: usersError } = useQuery({\n    queryKey: [\"/api/users\"],\n    retry: false,\n  });\n\n  const { data: notifications } = useQuery({\n    queryKey: [\"/api/notifications/user\", user?.id],\n    retry: false,\n    enabled: !!user?.id,\n  });\n\n  // Handle unauthorized errors\n  if (metricsError && isUnauthorizedError(metricsError)) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  if (usersError && isUnauthorizedError(usersError)) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  const unreadNotifications = Array.isArray(notifications) \n    ? notifications.filter((n: any) => !n.readAt).length \n    : 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        user={user} \n        role=\"Professor\"\n        roleIcon=\"user-tie\"\n        notificationCount={unreadNotifications}\n      />\n      \n      <div className=\"flex h-[calc(100vh-73px)]\">\n        <Sidebar \n          items={adminSidebarItems}\n          activeSection={activeSection}\n          onSectionChange={setActiveSection}\n        />\n\n        <main className=\"flex-1 overflow-auto\" data-testid=\"main-content-admin\">\n          {activeSection === 'overview' && (\n            <div className=\"p-4 lg:p-6\">\n              <div className=\"mb-4 lg:mb-6 flex flex-col lg:flex-row lg:justify-between lg:items-start space-y-4 lg:space-y-0\">\n                <div>\n                  <h2 className=\"text-xl lg:text-2xl font-bold text-foreground mb-2\">Lab Overview</h2>\n                  <p className=\"text-sm lg:text-base text-muted-foreground\">\n                    Real-time insights into your research team's progress and productivity\n                  </p>\n                </div>\n                <div className=\"flex space-x-3\">\n                  <Link href=\"/admin/projects\">\n                    <Button variant=\"outline\" data-testid=\"button-manage-projects\">\n                      <FolderOpen className=\"mr-2 h-4 w-4\" />\n                      Manage Projects\n                    </Button>\n                  </Link>\n                </div>\n              </div>\n\n              {/* Key Metrics Cards */}\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 lg:gap-6 mb-6 lg:mb-8\">\n                <MetricCard\n                  title=\"Active Students\"\n                  value={(labMetrics as any)?.activeStudents?.toString() || \"0\"}\n                  subtitle=\"team members\"\n                  icon={Users}\n                  iconColor=\"text-primary\"\n                  iconBgColor=\"bg-primary/10\"\n                  isLoading={metricsLoading}\n                  data-testid=\"metric-active-students\"\n                />\n                \n                <MetricCard\n                  title=\"Active Projects\"\n                  value={(labMetrics as any)?.activeProjects?.toString() || \"0\"}\n                  subtitle=\"in progress\"\n                  icon={Projector}\n                  iconColor=\"text-secondary\"\n                  iconBgColor=\"bg-secondary/10\"\n                  isLoading={metricsLoading}\n                  data-testid=\"metric-active-projects\"\n                />\n                \n                <MetricCard\n                  title=\"This Week's Hours\"\n                  value=\"284\"\n                  subtitle=\"logged hours\"\n                  icon={Clock}\n                  iconColor=\"text-green-600\"\n                  iconBgColor=\"bg-green-100\"\n                  data-testid=\"metric-weekly-hours\"\n                />\n                \n                <MetricCard\n                  title=\"At-Risk Students\"\n                  value=\"2\"\n                  subtitle=\"need attention\"\n                  icon={AlertTriangle}\n                  iconColor=\"text-destructive\"\n                  iconBgColor=\"bg-destructive/10\"\n                  data-testid=\"metric-at-risk-students\"\n                />\n              </div>\n\n              {/* Current Alerts */}\n              <div className=\"bg-card border border-border rounded-lg p-6 mb-8\">\n                <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                  <Bell className=\"w-5 h-5 text-destructive mr-2\" />\n                  Priority Alerts\n                </h3>\n                <div className=\"space-y-3\">\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Bell className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                    <p>No priority alerts at this time</p>\n                  </div>\n                </div>\n              </div>\n\n              {/* Team Activity Overview */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-4 lg:gap-6\">\n                <ActivityFeed \n                  title=\"Currently Working\"\n                  items={[]}\n                  emptyMessage=\"No team members currently checked in\"\n                  data-testid=\"currently-working-feed\"\n                />\n                \n                <ActivityFeed \n                  title=\"Recent Updates\"\n                  items={[]}\n                  emptyMessage=\"No recent progress updates\"\n                  data-testid=\"recent-updates-feed\"\n                />\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'team' && (\n            <div className=\"p-4 lg:p-6\">\n              <div className=\"mb-4 lg:mb-6 flex items-center justify-between\">\n                <div>\n                  <h2 className=\"text-xl lg:text-2xl font-bold text-foreground mb-2\">Team Management</h2>\n                  <p className=\"text-sm lg:text-base text-muted-foreground\">\n                    Manage your research team members and their access\n                  </p>\n                </div>\n              </div>\n\n              <TeamTable \n                users={(allUsers as any) || []}\n                isLoading={usersLoading}\n                error={usersError}\n                data-testid=\"team-table\"\n              />\n            </div>\n          )}\n\n          {activeSection === 'projects' && (\n            <div className=\"p-4 lg:p-6\">\n              <div className=\"mb-4 lg:mb-6\">\n                <h2 className=\"text-xl lg:text-2xl font-bold text-foreground mb-2\">Projects</h2>\n                <p className=\"text-sm lg:text-base text-muted-foreground\">Manage research projects and assignments</p>\n              </div>\n              <div className=\"text-center py-12\">\n                <div className=\"mb-6\">\n                  <FolderOpen className=\"w-16 h-16 mx-auto mb-4 text-primary\" />\n                  <p className=\"text-lg font-semibold text-foreground mb-2\">Project Management System</p>\n                  <p className=\"text-sm text-muted-foreground mb-6\">Create projects, assign team members, and track progress</p>\n                </div>\n                <Link href=\"/admin/projects\">\n                  <Button \n                    size=\"lg\"\n                    className=\"bg-primary hover:bg-primary/90 text-primary-foreground\"\n                    data-testid=\"button-open-project-management\"\n                  >\n                    <FolderOpen className=\"mr-2 h-5 w-5\" />\n                    Open Project Management\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'ai-analytics' && (\n            <div className=\"p-6\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">AI Analytics</h2>\n                <p className=\"text-muted-foreground\">Intelligent insights and predictions</p>\n              </div>\n              <div className=\"text-center py-12\">\n                <div className=\"mb-6\">\n                  <Brain className=\"w-16 h-16 mx-auto mb-4 text-blue-600\" />\n                  <p className=\"text-lg font-semibold text-foreground mb-2\">AI Analytics Dashboard</p>\n                  <p className=\"text-sm text-muted-foreground mb-6\">Access advanced AI-powered insights and predictions</p>\n                </div>\n                <Link href=\"/admin/ai-analytics\">\n                  <Button \n                    size=\"lg\"\n                    className=\"bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white\"\n                    data-testid=\"button-open-ai-analytics\"\n                  >\n                    <Brain className=\"mr-2 h-5 w-5\" />\n                    Open AI Analytics\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'schedules' && (\n            <div className=\"p-6\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Schedules</h2>\n                <p className=\"text-muted-foreground\">Schedule management and approval</p>\n              </div>\n              <div className=\"text-center py-12\">\n                <div className=\"mb-6\">\n                  <Calendar className=\"w-16 h-16 mx-auto mb-4 text-blue-600\" />\n                  <p className=\"text-lg font-semibold text-foreground mb-2\">Schedule Management System</p>\n                  <p className=\"text-sm text-muted-foreground mb-6\">Manage team schedules, time tracking, and work approvals</p>\n                </div>\n                <div className=\"space-y-3\">\n                  <Link href=\"/admin/schedules\">\n                    <Button \n                      size=\"lg\"\n                      className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                      data-testid=\"button-view-schedules\"\n                    >\n                      <Calendar className=\"mr-2 h-5 w-5\" />\n                      Open Schedule Management\n                    </Button>\n                  </Link>\n                  <p className=\"text-xs text-muted-foreground\">Time tracking and schedule approvals</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'reports' && (\n            <div className=\"p-6\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Reports</h2>\n                <p className=\"text-muted-foreground\">Generate and view reports</p>\n              </div>\n              <div className=\"text-center py-12\">\n                <div className=\"mb-6\">\n                  <BarChart3 className=\"w-16 h-16 mx-auto mb-4 text-green-600\" />\n                  <p className=\"text-lg font-semibold text-foreground mb-2\">Reporting Dashboard</p>\n                  <p className=\"text-sm text-muted-foreground mb-6\">Generate comprehensive reports on team productivity and project progress</p>\n                </div>\n                <div className=\"space-y-3\">\n                  <Link href=\"/admin/reports\">\n                    <Button \n                      size=\"lg\"\n                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                      data-testid=\"button-generate-reports\"\n                    >\n                      <BarChart3 className=\"mr-2 h-5 w-5\" />\n                      Open Reports Dashboard\n                    </Button>\n                  </Link>\n                  <p className=\"text-xs text-muted-foreground\">Generate comprehensive analytics reports</p>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeSection === 'settings' && (\n            <div className=\"p-6\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">Settings</h2>\n                <p className=\"text-muted-foreground\">System configuration and preferences</p>\n              </div>\n              <div className=\"text-center py-12\">\n                <div className=\"mb-6\">\n                  <Settings className=\"w-16 h-16 mx-auto mb-4 text-purple-600\" />\n                  <p className=\"text-lg font-semibold text-foreground mb-2\">System Settings</p>\n                  <p className=\"text-sm text-muted-foreground mb-6\">Configure lab settings, permissions, and system preferences</p>\n                </div>\n                <div className=\"space-y-3\">\n                  <Link href=\"/admin/settings\">\n                    <Button \n                      size=\"lg\"\n                      className=\"bg-purple-600 hover:bg-purple-700 text-white\"\n                      data-testid=\"button-open-settings\"\n                    >\n                      <Settings className=\"mr-2 h-5 w-5\" />\n                      Open System Settings\n                    </Button>\n                  </Link>\n                  <p className=\"text-xs text-muted-foreground\">Lab configuration and user management</p>\n                </div>\n              </div>\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":14601},"client/src/pages/admin/IntegrationsPage.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Home } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport ExternalIntegrations from \"@/components/ExternalIntegrations\";\n\nexport default function IntegrationsPage() {\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      {/* Navigation Breadcrumbs */}\n      <div className=\"flex items-center space-x-2 mb-6\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"nav-home\">\n            <Home className=\"h-4 w-4 mr-2\" />\n            Dashboard\n          </Button>\n        </Link>\n        <span className=\"text-muted-foreground\">→</span>\n        <span className=\"text-foreground font-medium\">Integrations</span>\n      </div>\n\n      {/* Main Content */}\n      <ExternalIntegrations />\n    </div>\n  );\n}","size_bytes":865},"client/src/pages/admin/ProjectManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Plus, \n  Users, \n  Calendar, \n  Target, \n  TrendingUp,\n  Edit,\n  Trash2,\n  UserPlus,\n  Clock,\n  ArrowLeft,\n  Home\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { Project, User } from \"@shared/schema\";\n\nexport default function ProjectManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [showCreateProject, setShowCreateProject] = useState(false);\n  const [showAssignDialog, setShowAssignDialog] = useState(false);\n  const [selectedProject, setSelectedProject] = useState<Project | null>(null);\n  \n  // Form states\n  const [projectTitle, setProjectTitle] = useState(\"\");\n  const [projectDescription, setProjectDescription] = useState(\"\");\n  const [projectType, setProjectType] = useState(\"research\");\n  const [priority, setPriority] = useState(\"medium\");\n  const [deadline, setDeadline] = useState(\"\");\n  const [estimatedHours, setEstimatedHours] = useState(\"\");\n  const [selectedUserId, setSelectedUserId] = useState(\"\");\n\n  // Fetch projects\n  const { data: projects, isLoading: projectsLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  // Fetch users for assignment\n  const { data: users, isLoading: usersLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  // Create project mutation\n  const createProjectMutation = useMutation({\n    mutationFn: async (projectData: any) => {\n      return await apiRequest(\"POST\", \"/api/projects\", projectData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Project Created\",\n        description: \"New project has been created successfully\",\n      });\n      setShowCreateProject(false);\n      resetForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Assign project mutation\n  const assignProjectMutation = useMutation({\n    mutationFn: async (assignmentData: any) => {\n      return await apiRequest(\"POST\", \"/api/assignments\", assignmentData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({\n        title: \"Project Assigned\",\n        description: \"Project has been assigned successfully\",\n      });\n      setShowAssignDialog(false);\n      setSelectedProject(null);\n      setSelectedUserId(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign project\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setProjectTitle(\"\");\n    setProjectDescription(\"\");\n    setProjectType(\"research\");\n    setPriority(\"medium\");\n    setDeadline(\"\");\n    setEstimatedHours(\"\");\n  };\n\n  const handleCreateProject = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!projectTitle.trim() || !projectDescription.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please provide project title and description\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createProjectMutation.mutate({\n      name: projectTitle,\n      description: projectDescription,\n      projectType: projectType,\n      targetEndDate: deadline || undefined,\n      status: \"planning\"\n    });\n  };\n\n  const handleAssignProject = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!selectedProject || !selectedUserId) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please select both project and user\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    assignProjectMutation.mutate({\n      projectId: selectedProject.id,\n      userId: selectedUserId,\n      role: \"assignee\"\n    });\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'planning': return 'bg-yellow-100 text-yellow-800';\n      case 'in_progress': return 'bg-blue-100 text-blue-800';\n      case 'completed': return 'bg-green-100 text-green-800';\n      case 'on_hold': return 'bg-red-100 text-red-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case 'high': return 'bg-red-100 text-red-800';\n      case 'medium': return 'bg-yellow-100 text-yellow-800';\n      case 'low': return 'bg-green-100 text-green-800';\n      default: return 'bg-gray-100 text-gray-800';\n    }\n  };\n\n  if (projectsLoading) {\n    return (\n      <div className=\"min-h-screen bg-background p-6\">\n        {/* Navigation Breadcrumbs */}\n        <div className=\"flex items-center space-x-2 mb-6\">\n          <Link href=\"/\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"nav-home\">\n              <Home className=\"h-4 w-4 mr-2\" />\n              Dashboard\n            </Button>\n          </Link>\n          <span className=\"text-muted-foreground\">→</span>\n          <span className=\"text-foreground font-medium\">Project Management</span>\n        </div>\n\n        <div className=\"space-y-6\">\n          <div className=\"flex justify-between items-center\">\n            <Skeleton className=\"h-8 w-48\" />\n            <Skeleton className=\"h-10 w-32\" />\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Skeleton key={i} className=\"h-64\" />\n            ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      {/* Navigation Breadcrumbs */}\n      <div className=\"flex items-center space-x-2 mb-6\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"nav-home\">\n            <Home className=\"h-4 w-4 mr-2\" />\n            Dashboard\n          </Button>\n        </Link>\n        <span className=\"text-muted-foreground\">→</span>\n        <span className=\"text-foreground font-medium\">Project Management</span>\n      </div>\n\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Project Management</h1>\n            <p className=\"text-muted-foreground\">Create and manage research projects</p>\n          </div>\n        \n        <Dialog open={showCreateProject} onOpenChange={setShowCreateProject}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-create-project\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create Project\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Create New Project</DialogTitle>\n            </DialogHeader>\n            <form onSubmit={handleCreateProject} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"project-title\">Project Title</Label>\n                <Input\n                  id=\"project-title\"\n                  value={projectTitle}\n                  onChange={(e) => setProjectTitle(e.target.value)}\n                  placeholder=\"Machine Learning for Health Data Analysis\"\n                  className=\"mt-2\"\n                  data-testid=\"input-project-title\"\n                  required\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"project-description\">Description</Label>\n                <Textarea\n                  id=\"project-description\"\n                  value={projectDescription}\n                  onChange={(e) => setProjectDescription(e.target.value)}\n                  placeholder=\"Detailed description of the research project...\"\n                  rows={4}\n                  className=\"mt-2\"\n                  data-testid=\"textarea-project-description\"\n                  required\n                />\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"project-type\">Project Type</Label>\n                  <Select value={projectType} onValueChange={setProjectType}>\n                    <SelectTrigger className=\"mt-2\" data-testid=\"select-project-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"research\">Research</SelectItem>\n                      <SelectItem value=\"development\">Development</SelectItem>\n                      <SelectItem value=\"analysis\">Data Analysis</SelectItem>\n                      <SelectItem value=\"publication\">Publication</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"priority\">Priority</Label>\n                  <Select value={priority} onValueChange={setPriority}>\n                    <SelectTrigger className=\"mt-2\" data-testid=\"select-priority\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"high\">High</SelectItem>\n                      <SelectItem value=\"medium\">Medium</SelectItem>\n                      <SelectItem value=\"low\">Low</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"deadline\">Deadline (Optional)</Label>\n                  <Input\n                    id=\"deadline\"\n                    type=\"date\"\n                    value={deadline}\n                    onChange={(e) => setDeadline(e.target.value)}\n                    className=\"mt-2\"\n                    data-testid=\"input-deadline\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"estimated-hours\">Estimated Hours (Optional)</Label>\n                  <Input\n                    id=\"estimated-hours\"\n                    type=\"number\"\n                    value={estimatedHours}\n                    onChange={(e) => setEstimatedHours(e.target.value)}\n                    placeholder=\"120\"\n                    className=\"mt-2\"\n                    data-testid=\"input-estimated-hours\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"flex justify-end space-x-2 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => setShowCreateProject(false)}\n                  data-testid=\"button-cancel-create\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createProjectMutation.isPending}\n                  data-testid=\"button-submit-create\"\n                >\n                  {createProjectMutation.isPending ? \"Creating...\" : \"Create Project\"}\n                </Button>\n              </div>\n            </form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Project Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Target className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Projects</p>\n                <p className=\"text-2xl font-bold\">{projects?.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <TrendingUp className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Active Projects</p>\n                <p className=\"text-2xl font-bold\">\n                  {projects?.filter(p => p.status === 'in_progress').length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Users className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Team Members</p>\n                <p className=\"text-2xl font-bold\">{users?.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Clock className=\"h-8 w-8 text-orange-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Completed</p>\n                <p className=\"text-2xl font-bold\">\n                  {projects?.filter(p => p.status === 'completed').length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Projects Table */}\n      <Card>\n        <CardHeader>\n          <CardTitle>All Projects</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Project</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Priority</TableHead>\n                <TableHead>Status</TableHead>\n                <TableHead>Progress</TableHead>\n                <TableHead>Deadline</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {projects?.map((project) => (\n                <TableRow key={project.id}>\n                  <TableCell>\n                    <div>\n                      <p className=\"font-medium\">{project.name}</p>\n                      <p className=\"text-sm text-muted-foreground line-clamp-1\">\n                        {project.description}\n                      </p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {project.projectType || 'research'}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge className={`capitalize ${getPriorityColor('medium')}`}>\n                      medium\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <Badge className={`capitalize ${getStatusColor(project.status || 'planning')}`}>\n                      {project.status?.replace('_', ' ') || 'planning'}\n                    </Badge>\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"space-y-1\">\n                      <Progress value={0} className=\"w-16\" />\n                      <p className=\"text-xs text-muted-foreground\">0%</p>\n                    </div>\n                  </TableCell>\n                  <TableCell>\n                    {project.targetEndDate ? new Date(project.targetEndDate).toLocaleDateString() : 'No deadline'}\n                  </TableCell>\n                  <TableCell>\n                    <div className=\"flex space-x-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => {\n                          setSelectedProject(project);\n                          setShowAssignDialog(true);\n                        }}\n                        data-testid={`button-assign-${project.id}`}\n                      >\n                        <UserPlus className=\"h-4 w-4\" />\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        data-testid={`button-edit-${project.id}`}\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              ))}\n              {(!projects || projects.length === 0) && (\n                <TableRow>\n                  <TableCell colSpan={7} className=\"text-center py-8\">\n                    <div className=\"text-muted-foreground\">\n                      <Target className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                      <p>No projects yet. Create your first project to get started!</p>\n                    </div>\n                  </TableCell>\n                </TableRow>\n              )}\n            </TableBody>\n          </Table>\n        </CardContent>\n      </Card>\n\n      {/* Assignment Dialog */}\n      <Dialog open={showAssignDialog} onOpenChange={setShowAssignDialog}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Assign Project</DialogTitle>\n          </DialogHeader>\n          <form onSubmit={handleAssignProject} className=\"space-y-4\">\n            <div>\n              <Label>Project</Label>\n              <Input\n                value={selectedProject?.name || \"\"}\n                disabled\n                className=\"mt-2\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"assign-user\">Assign to Team Member</Label>\n              <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                <SelectTrigger className=\"mt-2\" data-testid=\"select-assign-user\">\n                  <SelectValue placeholder=\"Select team member\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {users?.filter(u => u.role !== 'admin' && u.role !== 'professor').map((user) => (\n                    <SelectItem key={user.id} value={user.id}>\n                      {user.firstName} {user.lastName} ({user.role})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div className=\"flex justify-end space-x-2 pt-4\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setShowAssignDialog(false)}\n                data-testid=\"button-cancel-assign\"\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={assignProjectMutation.isPending}\n                data-testid=\"button-submit-assign\"\n              >\n                {assignProjectMutation.isPending ? \"Assigning...\" : \"Assign Project\"}\n              </Button>\n            </div>\n          </form>\n        </DialogContent>\n      </Dialog>\n      </div>\n    </div>\n  );\n}","size_bytes":20202},"client/src/pages/admin/ReportsManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  FileText,\n  Download,\n  TrendingUp,\n  Users,\n  Calendar,\n  BarChart3,\n  PieChart,\n  Clock,\n  Target,\n  AlertTriangle,\n  CheckCircle,\n  Home,\n  Filter,\n  RefreshCw,\n  FileSpreadsheet,\n  Share2\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { User, Project } from \"@shared/schema\";\n\ninterface ReportData {\n  id: string;\n  title: string;\n  type: string;\n  generatedAt: string;\n  createdBy: string;\n  status: string;\n  fileSize?: string;\n  downloadUrl?: string;\n}\n\ninterface ProductivityReport {\n  userId: string;\n  userName: string;\n  totalHours: number;\n  completedTasks: number;\n  activeProjects: number;\n  productivityScore: number;\n  weeklyTrend: number[];\n}\n\ninterface ProjectReport {\n  projectId: string;\n  projectName: string;\n  status: string;\n  progress: number;\n  totalHours: number;\n  teamSize: number;\n  deadline: string;\n  riskLevel: 'low' | 'medium' | 'high';\n}\n\nexport default function ReportsManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [showCreateReport, setShowCreateReport] = useState(false);\n  const [selectedReportType, setSelectedReportType] = useState(\"productivity\");\n  const [dateRange, setDateRange] = useState(\"last30days\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  \n  // Form states for report generation\n  const [reportTitle, setReportTitle] = useState(\"\");\n  const [reportFormat, setReportFormat] = useState(\"pdf\");\n  const [includeCharts, setIncludeCharts] = useState(true);\n\n  // Fetch existing reports\n  const { data: reports, isLoading: reportsLoading } = useQuery<ReportData[]>({\n    queryKey: [\"/api/reports\"],\n    retry: false,\n  });\n\n  // Fetch productivity reports\n  const { data: productivityData, isLoading: productivityLoading } = useQuery<ProductivityReport[]>({\n    queryKey: [\"/api/reports/productivity\", dateRange],\n    retry: false,\n  });\n\n  // Fetch project reports\n  const { data: projectData, isLoading: projectLoading } = useQuery<ProjectReport[]>({\n    queryKey: [\"/api/reports/projects\", dateRange],\n    retry: false,\n  });\n\n  // Fetch users for report filtering\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    retry: false,\n  });\n\n  // Generate report mutation\n  const generateReportMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/reports/generate\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Report generation started. You'll be notified when ready.\",\n      });\n      setShowCreateReport(false);\n      resetForm();\n      queryClient.invalidateQueries({ queryKey: [\"/api/reports\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to generate report\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Download report mutation\n  const downloadReportMutation = useMutation({\n    mutationFn: async (reportId: string) => {\n      return await apiRequest(\"GET\", `/api/reports/${reportId}/download`, {});\n    },\n    onSuccess: (data: any, reportId) => {\n      // Create download link\n      const link = document.createElement('a');\n      link.href = data.downloadUrl || '#';\n      link.download = `report-${reportId}.pdf`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      \n      toast({\n        title: \"Success\",\n        description: \"Report downloaded successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to download report\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setReportTitle(\"\");\n    setSelectedReportType(\"productivity\");\n    setReportFormat(\"pdf\");\n    setIncludeCharts(true);\n  };\n\n  const handleGenerateReport = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!reportTitle.trim()) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please enter a report title\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    generateReportMutation.mutate({\n      title: reportTitle,\n      type: selectedReportType,\n      format: reportFormat,\n      dateRange,\n      includeCharts,\n      createdBy: user?.id,\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'completed':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"h-3 w-3 mr-1\" />Ready</Badge>;\n      case 'generating':\n        return <Badge className=\"bg-blue-100 text-blue-800\"><RefreshCw className=\"h-3 w-3 mr-1\" />Generating</Badge>;\n      case 'failed':\n        return <Badge className=\"bg-red-100 text-red-800\"><AlertTriangle className=\"h-3 w-3 mr-1\" />Failed</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">Unknown</Badge>;\n    }\n  };\n\n  const getRiskBadge = (riskLevel: string) => {\n    switch (riskLevel) {\n      case 'high':\n        return <Badge className=\"bg-red-100 text-red-800\">High Risk</Badge>;\n      case 'medium':\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Medium Risk</Badge>;\n      case 'low':\n        return <Badge className=\"bg-green-100 text-green-800\">Low Risk</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">Unknown</Badge>;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      {/* Navigation Breadcrumbs */}\n      <div className=\"flex items-center space-x-2 mb-6\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"nav-home\">\n            <Home className=\"h-4 w-4 mr-2\" />\n            Dashboard\n          </Button>\n        </Link>\n        <span className=\"text-muted-foreground\">→</span>\n        <span className=\"text-foreground font-medium\">Reports & Analytics</span>\n      </div>\n\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Reports & Analytics</h1>\n          <p className=\"text-muted-foreground\">\n            Generate comprehensive reports and export analytics data\n          </p>\n        </div>\n        \n        <div className=\"flex space-x-3\">\n          <Button variant=\"outline\" data-testid=\"button-refresh-data\">\n            <RefreshCw className=\"mr-2 h-4 w-4\" />\n            Refresh Data\n          </Button>\n          \n          <Dialog open={showCreateReport} onOpenChange={setShowCreateReport}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-generate-report\">\n                <FileText className=\"mr-2 h-4 w-4\" />\n                Generate Report\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Generate New Report</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleGenerateReport} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"report-title\">Report Title</Label>\n                  <Input\n                    id=\"report-title\"\n                    value={reportTitle}\n                    onChange={(e) => setReportTitle(e.target.value)}\n                    placeholder=\"Monthly Productivity Report\"\n                    className=\"mt-2\"\n                    data-testid=\"input-report-title\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"report-type\">Report Type</Label>\n                  <Select value={selectedReportType} onValueChange={setSelectedReportType}>\n                    <SelectTrigger className=\"mt-2\" data-testid=\"select-report-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"productivity\">Team Productivity</SelectItem>\n                      <SelectItem value=\"projects\">Project Status</SelectItem>\n                      <SelectItem value=\"time\">Time Analytics</SelectItem>\n                      <SelectItem value=\"performance\">Performance Review</SelectItem>\n                      <SelectItem value=\"compliance\">Compliance Report</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"date-range\">Date Range</Label>\n                  <Select value={dateRange} onValueChange={setDateRange}>\n                    <SelectTrigger className=\"mt-2\" data-testid=\"select-date-range\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"last7days\">Last 7 Days</SelectItem>\n                      <SelectItem value=\"last30days\">Last 30 Days</SelectItem>\n                      <SelectItem value=\"last90days\">Last 90 Days</SelectItem>\n                      <SelectItem value=\"lastYear\">Last Year</SelectItem>\n                      <SelectItem value=\"custom\">Custom Range</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"report-format\">Export Format</Label>\n                  <Select value={reportFormat} onValueChange={setReportFormat}>\n                    <SelectTrigger className=\"mt-2\" data-testid=\"select-report-format\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"pdf\">PDF Report</SelectItem>\n                      <SelectItem value=\"excel\">Excel Spreadsheet</SelectItem>\n                      <SelectItem value=\"csv\">CSV Data</SelectItem>\n                      <SelectItem value=\"json\">JSON Export</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowCreateReport(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={generateReportMutation.isPending}\n                    data-testid=\"button-submit-report\"\n                  >\n                    {generateReportMutation.isPending ? \"Generating...\" : \"Generate Report\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-4\">\n          <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n          <TabsTrigger value=\"productivity\">Productivity</TabsTrigger>\n          <TabsTrigger value=\"projects\">Projects</TabsTrigger>\n          <TabsTrigger value=\"reports\">My Reports</TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-6\">\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-blue-100 rounded-lg\">\n                    <FileText className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Reports</p>\n                    <p className=\"text-2xl font-bold\">{reports?.length || 0}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-green-100 rounded-lg\">\n                    <TrendingUp className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Avg Productivity</p>\n                    <p className=\"text-2xl font-bold\">\n                      {productivityData && productivityData.length > 0 \n                        ? Math.round(productivityData.reduce((sum, p) => sum + p.productivityScore, 0) / productivityData.length)\n                        : 0}%\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-purple-100 rounded-lg\">\n                    <Users className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Active Projects</p>\n                    <p className=\"text-2xl font-bold\">\n                      {projectData?.filter(p => p.status === 'active').length || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                    <Clock className=\"h-6 w-6 text-yellow-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Hours</p>\n                    <p className=\"text-2xl font-bold\">\n                      {productivityData?.reduce((sum, p) => sum + p.totalHours, 0) || 0}h\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Quick Actions */}\n          <Card>\n            <CardHeader>\n              <CardTitle>Quick Report Generation</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                <Button variant=\"outline\" className=\"h-24 flex flex-col items-center justify-center space-y-2\" data-testid=\"button-quick-productivity\">\n                  <TrendingUp className=\"h-8 w-8 text-blue-600\" />\n                  <span>Productivity Report</span>\n                </Button>\n                <Button variant=\"outline\" className=\"h-24 flex flex-col items-center justify-center space-y-2\" data-testid=\"button-quick-project\">\n                  <Target className=\"h-8 w-8 text-green-600\" />\n                  <span>Project Status Report</span>\n                </Button>\n                <Button variant=\"outline\" className=\"h-24 flex flex-col items-center justify-center space-y-2\" data-testid=\"button-quick-time\">\n                  <Clock className=\"h-8 w-8 text-purple-600\" />\n                  <span>Time Analytics Report</span>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Productivity Tab */}\n        <TabsContent value=\"productivity\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Team Productivity Analytics</h2>\n            <Button variant=\"outline\" data-testid=\"button-export-productivity\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Data\n            </Button>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Team Member</TableHead>\n                    <TableHead>Hours Logged</TableHead>\n                    <TableHead>Tasks Completed</TableHead>\n                    <TableHead>Active Projects</TableHead>\n                    <TableHead>Productivity Score</TableHead>\n                    <TableHead>Trend</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {productivityData?.map((member) => (\n                    <TableRow key={member.userId}>\n                      <TableCell className=\"font-medium\">{member.userName}</TableCell>\n                      <TableCell>{member.totalHours}h</TableCell>\n                      <TableCell>{member.completedTasks}</TableCell>\n                      <TableCell>{member.activeProjects}</TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <span className=\"font-medium\">{member.productivityScore}%</span>\n                          {member.productivityScore >= 85 && (\n                            <Badge className=\"bg-green-100 text-green-800\">Excellent</Badge>\n                          )}\n                          {member.productivityScore >= 70 && member.productivityScore < 85 && (\n                            <Badge className=\"bg-blue-100 text-blue-800\">Good</Badge>\n                          )}\n                          {member.productivityScore < 70 && (\n                            <Badge className=\"bg-yellow-100 text-yellow-800\">Needs Attention</Badge>\n                          )}\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        {member.weeklyTrend?.slice(-4).map((value, index) => (\n                          <span key={index} className={`inline-block w-2 h-6 mx-0.5 ${\n                            value > 0 ? 'bg-green-400' : value < 0 ? 'bg-red-400' : 'bg-gray-300'\n                          }`} />\n                        )) || 'No data'}\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              \n              {!productivityData?.length && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <TrendingUp className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No productivity data available</p>\n                  <p className=\"text-sm\">Data will appear as team members log time</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Projects Tab */}\n        <TabsContent value=\"projects\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Project Status Reports</h2>\n            <Button variant=\"outline\" data-testid=\"button-export-projects\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Data\n            </Button>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Project Name</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Progress</TableHead>\n                    <TableHead>Team Size</TableHead>\n                    <TableHead>Hours Logged</TableHead>\n                    <TableHead>Deadline</TableHead>\n                    <TableHead>Risk Level</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {projectData?.map((project) => (\n                    <TableRow key={project.projectId}>\n                      <TableCell className=\"font-medium\">{project.projectName}</TableCell>\n                      <TableCell>\n                        <Badge className={`${\n                          project.status === 'active' ? 'bg-green-100 text-green-800' :\n                          project.status === 'planning' ? 'bg-blue-100 text-blue-800' :\n                          project.status === 'completed' ? 'bg-gray-100 text-gray-800' :\n                          'bg-yellow-100 text-yellow-800'\n                        }`}>\n                          {project.status}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"w-24 bg-gray-200 rounded-full h-2\">\n                            <div \n                              className=\"bg-blue-600 h-2 rounded-full\" \n                              style={{ width: `${project.progress}%` }}\n                            />\n                          </div>\n                          <span className=\"text-sm font-medium\">{project.progress}%</span>\n                        </div>\n                      </TableCell>\n                      <TableCell>{project.teamSize} members</TableCell>\n                      <TableCell>{project.totalHours}h</TableCell>\n                      <TableCell>{formatDate(project.deadline)}</TableCell>\n                      <TableCell>{getRiskBadge(project.riskLevel)}</TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              \n              {!projectData?.length && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Target className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No project data available</p>\n                  <p className=\"text-sm\">Projects will appear here when created</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* My Reports Tab */}\n        <TabsContent value=\"reports\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Generated Reports</h2>\n            <div className=\"flex space-x-2\">\n              <Select value={filterStatus} onValueChange={setFilterStatus}>\n                <SelectTrigger className=\"w-40\">\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Reports</SelectItem>\n                  <SelectItem value=\"completed\">Completed</SelectItem>\n                  <SelectItem value=\"generating\">Generating</SelectItem>\n                  <SelectItem value=\"failed\">Failed</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Report Title</TableHead>\n                    <TableHead>Type</TableHead>\n                    <TableHead>Generated</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>File Size</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {reports?.map((report) => (\n                    <TableRow key={report.id}>\n                      <TableCell className=\"font-medium\">{report.title}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">{report.type}</Badge>\n                      </TableCell>\n                      <TableCell>{formatDate(report.generatedAt)}</TableCell>\n                      <TableCell>{getStatusBadge(report.status)}</TableCell>\n                      <TableCell>{report.fileSize || 'N/A'}</TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          {report.status === 'completed' && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              onClick={() => downloadReportMutation.mutate(report.id)}\n                              disabled={downloadReportMutation.isPending}\n                              data-testid={`button-download-${report.id}`}\n                            >\n                              <Download className=\"h-3 w-3 mr-1\" />\n                              Download\n                            </Button>\n                          )}\n                          <Button size=\"sm\" variant=\"outline\" data-testid={`button-share-${report.id}`}>\n                            <Share2 className=\"h-3 w-3 mr-1\" />\n                            Share\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              \n              {!reports?.length && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <FileText className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No reports generated yet</p>\n                  <p className=\"text-sm\">Create your first report using the \"Generate Report\" button</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":26526},"client/src/pages/admin/ScheduleManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Calendar,\n  Clock,\n  Plus,\n  CheckCircle,\n  XCircle,\n  Edit,\n  Trash2,\n  Download,\n  Upload,\n  Users,\n  TrendingUp,\n  AlertTriangle,\n  Home\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { User } from \"@shared/schema\";\n\ninterface TimeEntry {\n  id: string;\n  userId: string;\n  projectId?: string;\n  date: string;\n  startTime: string;\n  endTime: string;\n  duration: number;\n  description: string;\n  taskType: string;\n  approved: boolean;\n  user?: User;\n  projectName?: string;\n}\n\ninterface WorkSchedule {\n  id: string;\n  userId: string;\n  weekStartDate: string;\n  totalScheduledHours: number;\n  approved: boolean;\n  status: string;\n  notes?: string;\n  user?: User;\n}\n\nexport default function ScheduleManagement() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [showCreateEntry, setShowCreateEntry] = useState(false);\n  const [selectedWeek, setSelectedWeek] = useState(getCurrentWeek());\n  const [viewMode, setViewMode] = useState<'team' | 'individual'>('team');\n  \n  // Form states\n  const [entryDate, setEntryDate] = useState(getTodayDate());\n  const [startTime, setStartTime] = useState(\"\");\n  const [endTime, setEndTime] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [taskType, setTaskType] = useState(\"research\");\n  const [selectedUserId, setSelectedUserId] = useState(\"\");\n\n  // Fetch time entries\n  const { data: timeEntries, isLoading: entriesLoading } = useQuery<TimeEntry[]>({\n    queryKey: [\"/api/time-entries\", selectedWeek],\n    retry: false,\n  });\n\n  // Fetch work schedules\n  const { data: schedules, isLoading: schedulesLoading } = useQuery<WorkSchedule[]>({\n    queryKey: [\"/api/work-schedules\", selectedWeek],\n    retry: false,\n  });\n\n  // Fetch users for assignment\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    retry: false,\n  });\n\n  // Create time entry mutation\n  const createTimeEntryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest(\"POST\", \"/api/time-entries\", data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Time entry created successfully\",\n      });\n      setShowCreateEntry(false);\n      resetForm();\n      queryClient.invalidateQueries({ queryKey: [\"/api/time-entries\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create time entry\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Approve schedule mutation\n  const approveScheduleMutation = useMutation({\n    mutationFn: async (scheduleId: string) => {\n      return await apiRequest(\"PUT\", `/api/work-schedules/${scheduleId}/approve`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Schedule approved successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/work-schedules\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to approve schedule\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetForm = () => {\n    setEntryDate(getTodayDate());\n    setStartTime(\"\");\n    setEndTime(\"\");\n    setDescription(\"\");\n    setTaskType(\"research\");\n    setSelectedUserId(\"\");\n  };\n\n  const handleCreateEntry = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!startTime || !endTime || !description) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // Calculate duration\n    const duration = calculateDuration(startTime, endTime);\n    if (duration <= 0) {\n      toast({\n        title: \"Invalid Time\",\n        description: \"End time must be after start time\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    createTimeEntryMutation.mutate({\n      userId: user?.id,\n      date: entryDate,\n      startTime,\n      endTime,\n      duration,\n      description,\n      taskType,\n    });\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <Badge className=\"bg-green-100 text-green-800\"><CheckCircle className=\"h-3 w-3 mr-1\" />Approved</Badge>;\n      case 'submitted':\n        return <Badge className=\"bg-blue-100 text-blue-800\"><Clock className=\"h-3 w-3 mr-1\" />Pending</Badge>;\n      case 'rejected':\n        return <Badge className=\"bg-red-100 text-red-800\"><XCircle className=\"h-3 w-3 mr-1\" />Rejected</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">Draft</Badge>;\n    }\n  };\n\n  const getTaskTypeBadge = (taskType: string) => {\n    const colors = {\n      research: 'bg-blue-100 text-blue-800',\n      development: 'bg-green-100 text-green-800',\n      analysis: 'bg-purple-100 text-purple-800',\n      meeting: 'bg-orange-100 text-orange-800',\n      other: 'bg-gray-100 text-gray-800'\n    };\n    return <Badge className={colors[taskType as keyof typeof colors] || colors.other}>{taskType}</Badge>;\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      {/* Navigation Breadcrumbs */}\n      <div className=\"flex items-center space-x-2 mb-6\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"nav-home\">\n            <Home className=\"h-4 w-4 mr-2\" />\n            Dashboard\n          </Button>\n        </Link>\n        <span className=\"text-muted-foreground\">→</span>\n        <span className=\"text-foreground font-medium\">Schedule Management</span>\n      </div>\n\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">Schedule Management</h1>\n          <p className=\"text-muted-foreground\">\n            Manage team schedules, time tracking, and work approvals\n          </p>\n        </div>\n        \n        <div className=\"flex space-x-3\">\n          <Button variant=\"outline\" data-testid=\"button-export-schedules\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Export Data\n          </Button>\n          \n          <Dialog open={showCreateEntry} onOpenChange={setShowCreateEntry}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-log-time\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Log Time\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Log Time Entry</DialogTitle>\n              </DialogHeader>\n              <form onSubmit={handleCreateEntry} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"entry-date\">Date</Label>\n                  <Input\n                    id=\"entry-date\"\n                    type=\"date\"\n                    value={entryDate}\n                    onChange={(e) => setEntryDate(e.target.value)}\n                    className=\"mt-2\"\n                    data-testid=\"input-entry-date\"\n                  />\n                </div>\n                \n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"start-time\">Start Time</Label>\n                    <Input\n                      id=\"start-time\"\n                      type=\"time\"\n                      value={startTime}\n                      onChange={(e) => setStartTime(e.target.value)}\n                      className=\"mt-2\"\n                      data-testid=\"input-start-time\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"end-time\">End Time</Label>\n                    <Input\n                      id=\"end-time\"\n                      type=\"time\"\n                      value={endTime}\n                      onChange={(e) => setEndTime(e.target.value)}\n                      className=\"mt-2\"\n                      data-testid=\"input-end-time\"\n                    />\n                  </div>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"task-type\">Task Type</Label>\n                  <Select value={taskType} onValueChange={setTaskType}>\n                    <SelectTrigger className=\"mt-2\" data-testid=\"select-task-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"research\">Research</SelectItem>\n                      <SelectItem value=\"development\">Development</SelectItem>\n                      <SelectItem value=\"analysis\">Analysis</SelectItem>\n                      <SelectItem value=\"meeting\">Meeting</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"description\">Description</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                    placeholder=\"What did you work on?\"\n                    className=\"mt-2\"\n                    data-testid=\"textarea-description\"\n                    rows={3}\n                  />\n                </div>\n                \n                <div className=\"flex justify-end space-x-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowCreateEntry(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createTimeEntryMutation.isPending}\n                    data-testid=\"button-submit-entry\"\n                  >\n                    {createTimeEntryMutation.isPending ? \"Saving...\" : \"Log Time\"}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"time-entries\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-3\">\n          <TabsTrigger value=\"time-entries\">Time Entries</TabsTrigger>\n          <TabsTrigger value=\"schedules\">Work Schedules</TabsTrigger>\n          <TabsTrigger value=\"analytics\">Time Analytics</TabsTrigger>\n        </TabsList>\n\n        {/* Time Entries Tab */}\n        <TabsContent value=\"time-entries\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Time Entries</h2>\n            <div className=\"flex items-center space-x-4\">\n              <Select value={selectedWeek} onValueChange={setSelectedWeek}>\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value={getCurrentWeek()}>This Week</SelectItem>\n                  <SelectItem value={getLastWeek()}>Last Week</SelectItem>\n                  <SelectItem value={getNextWeek()}>Next Week</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Date</TableHead>\n                    <TableHead>User</TableHead>\n                    <TableHead>Time</TableHead>\n                    <TableHead>Duration</TableHead>\n                    <TableHead>Task Type</TableHead>\n                    <TableHead>Description</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {timeEntries?.map((entry) => (\n                    <TableRow key={entry.id}>\n                      <TableCell>{new Date(entry.date).toLocaleDateString()}</TableCell>\n                      <TableCell>\n                        {entry.user ? `${entry.user.firstName} ${entry.user.lastName}` : 'Unknown User'}\n                      </TableCell>\n                      <TableCell>{entry.startTime} - {entry.endTime}</TableCell>\n                      <TableCell>{entry.duration}h</TableCell>\n                      <TableCell>{getTaskTypeBadge(entry.taskType)}</TableCell>\n                      <TableCell className=\"max-w-48 truncate\">{entry.description}</TableCell>\n                      <TableCell>\n                        {entry.approved ? (\n                          <Badge className=\"bg-green-100 text-green-800\">\n                            <CheckCircle className=\"h-3 w-3 mr-1\" />\n                            Approved\n                          </Badge>\n                        ) : (\n                          <Badge className=\"bg-yellow-100 text-yellow-800\">\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                            Pending\n                          </Badge>\n                        )}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            <Edit className=\"h-3 w-3\" />\n                          </Button>\n                          {!entry.approved && (user?.role === 'admin' || user?.role === 'professor') && (\n                            <Button \n                              size=\"sm\" \n                              variant=\"outline\"\n                              className=\"text-green-600 hover:text-green-700\"\n                            >\n                              <CheckCircle className=\"h-3 w-3\" />\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n              \n              {!timeEntries?.length && (\n                <div className=\"text-center py-8 text-muted-foreground\">\n                  <Clock className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                  <p>No time entries found for this period</p>\n                  <p className=\"text-sm\">Start by logging your first time entry</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Work Schedules Tab */}\n        <TabsContent value=\"schedules\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Work Schedules</h2>\n            <Button variant=\"outline\">\n              <Upload className=\"mr-2 h-4 w-4\" />\n              Import Schedule\n            </Button>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {schedules?.map((schedule) => (\n              <Card key={schedule.id}>\n                <CardHeader>\n                  <div className=\"flex items-center justify-between\">\n                    <CardTitle className=\"text-lg\">\n                      {schedule.user ? `${schedule.user.firstName} ${schedule.user.lastName}` : 'Unknown User'}\n                    </CardTitle>\n                    {getStatusBadge(schedule.status)}\n                  </div>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Week of {new Date(schedule.weekStartDate).toLocaleDateString()}\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex justify-between items-center\">\n                      <span className=\"text-sm font-medium\">Scheduled Hours:</span>\n                      <span className=\"text-sm\">{schedule.totalScheduledHours}h</span>\n                    </div>\n                    \n                    {schedule.notes && (\n                      <div>\n                        <span className=\"text-sm font-medium\">Notes:</span>\n                        <p className=\"text-sm text-muted-foreground mt-1\">{schedule.notes}</p>\n                      </div>\n                    )}\n                    \n                    {!schedule.approved && (user?.role === 'admin' || user?.role === 'professor') && (\n                      <div className=\"flex space-x-2 pt-2\">\n                        <Button \n                          size=\"sm\" \n                          className=\"flex-1\"\n                          onClick={() => approveScheduleMutation.mutate(schedule.id)}\n                          disabled={approveScheduleMutation.isPending}\n                        >\n                          <CheckCircle className=\"h-3 w-3 mr-1\" />\n                          Approve\n                        </Button>\n                        <Button size=\"sm\" variant=\"outline\" className=\"flex-1\">\n                          <XCircle className=\"h-3 w-3 mr-1\" />\n                          Reject\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n\n          {!schedules?.length && (\n            <Card>\n              <CardContent className=\"p-12 text-center\">\n                <Calendar className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n                <p className=\"text-lg font-medium mb-2\">No schedules found</p>\n                <p className=\"text-muted-foreground\">Team schedules will appear here when submitted</p>\n              </CardContent>\n            </Card>\n          )}\n        </TabsContent>\n\n        {/* Time Analytics Tab */}\n        <TabsContent value=\"analytics\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">Time Analytics</h2>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-blue-100 rounded-lg\">\n                    <Clock className=\"h-6 w-6 text-blue-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Total Hours</p>\n                    <p className=\"text-2xl font-bold\">\n                      {timeEntries?.reduce((sum, entry) => sum + entry.duration, 0).toFixed(1) || '0'}h\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-green-100 rounded-lg\">\n                    <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Approved</p>\n                    <p className=\"text-2xl font-bold\">\n                      {timeEntries?.filter(entry => entry.approved).length || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                    <AlertTriangle className=\"h-6 w-6 text-yellow-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Pending</p>\n                    <p className=\"text-2xl font-bold\">\n                      {timeEntries?.filter(entry => !entry.approved).length || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center\">\n                  <div className=\"p-2 bg-purple-100 rounded-lg\">\n                    <Users className=\"h-6 w-6 text-purple-600\" />\n                  </div>\n                  <div className=\"ml-4\">\n                    <p className=\"text-sm font-medium text-muted-foreground\">Active Users</p>\n                    <p className=\"text-2xl font-bold\">\n                      {new Set(timeEntries?.map(entry => entry.userId)).size || 0}\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          <Card>\n            <CardHeader>\n              <CardTitle>Time Distribution by Task Type</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {['research', 'development', 'analysis', 'meeting', 'other'].map(taskType => {\n                  const typeEntries = timeEntries?.filter(entry => entry.taskType === taskType) || [];\n                  const totalHours = typeEntries.reduce((sum, entry) => sum + entry.duration, 0);\n                  const percentage = timeEntries?.length ? (totalHours / timeEntries.reduce((sum, entry) => sum + entry.duration, 0)) * 100 : 0;\n                  \n                  return (\n                    <div key={taskType} className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center space-x-3\">\n                        {getTaskTypeBadge(taskType)}\n                        <span className=\"text-sm capitalize\">{taskType}</span>\n                      </div>\n                      <div className=\"flex items-center space-x-3\">\n                        <span className=\"text-sm font-medium\">{totalHours.toFixed(1)}h</span>\n                        <span className=\"text-sm text-muted-foreground\">({percentage.toFixed(1)}%)</span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n\n// Helper functions\nfunction getCurrentWeek(): string {\n  const today = new Date();\n  const monday = new Date(today.setDate(today.getDate() - today.getDay() + 1));\n  return monday.toISOString().split('T')[0];\n}\n\nfunction getLastWeek(): string {\n  const today = new Date();\n  const lastWeek = new Date(today.setDate(today.getDate() - 7));\n  const monday = new Date(lastWeek.setDate(lastWeek.getDate() - lastWeek.getDay() + 1));\n  return monday.toISOString().split('T')[0];\n}\n\nfunction getNextWeek(): string {\n  const today = new Date();\n  const nextWeek = new Date(today.setDate(today.getDate() + 7));\n  const monday = new Date(nextWeek.setDate(nextWeek.getDate() - nextWeek.getDay() + 1));\n  return monday.toISOString().split('T')[0];\n}\n\nfunction getTodayDate(): string {\n  return new Date().toISOString().split('T')[0];\n}\n\nfunction calculateDuration(startTime: string, endTime: string): number {\n  const [startHour, startMinute] = startTime.split(':').map(Number);\n  const [endHour, endMinute] = endTime.split(':').map(Number);\n  \n  const startTotalMinutes = startHour * 60 + startMinute;\n  const endTotalMinutes = endHour * 60 + endMinute;\n  \n  return (endTotalMinutes - startTotalMinutes) / 60;\n}","size_bytes":24660},"client/src/pages/admin/SystemSettings.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Settings,\n  Shield,\n  Bell,\n  Database,\n  Users,\n  Mail,\n  Clock,\n  FileText,\n  Globe,\n  Lock,\n  Key,\n  Download,\n  Upload,\n  Trash2,\n  Save,\n  RefreshCw,\n  Home,\n  AlertTriangle,\n  CheckCircle,\n  Info\n} from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { User } from \"@shared/schema\";\n\ninterface SystemConfig {\n  labName: string;\n  labDescription: string;\n  timezone: string;\n  workingHours: {\n    start: string;\n    end: string;\n  };\n  notifications: {\n    emailEnabled: boolean;\n    slackEnabled: boolean;\n    weeklyReports: boolean;\n    deadlineAlerts: boolean;\n  };\n  security: {\n    passwordPolicy: {\n      minLength: number;\n      requireSpecialChars: boolean;\n      requireNumbers: boolean;\n    };\n    sessionTimeout: number;\n    mfaRequired: boolean;\n  };\n  dataRetention: {\n    logRetentionDays: number;\n    reportRetentionDays: number;\n    automaticBackups: boolean;\n  };\n}\n\ninterface UserPermission {\n  id: string;\n  userId: string;\n  userName: string;\n  role: string;\n  permissions: string[];\n  isActive: boolean;\n  lastLogin?: string;\n}\n\nexport default function SystemSettings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);\n  const [showUserDialog, setShowUserDialog] = useState(false);\n  const [selectedUserId, setSelectedUserId] = useState(\"\");\n  const [selectedRole, setSelectedRole] = useState(\"\");\n\n  // Form states\n  const [labName, setLabName] = useState(\"Digital Epidemiology Laboratory\");\n  const [labDescription, setLabDescription] = useState(\"Epidemiological research and health data science projects\");\n  const [timezone, setTimezone] = useState(\"America/New_York\");\n  const [workingStart, setWorkingStart] = useState(\"09:00\");\n  const [workingEnd, setWorkingEnd] = useState(\"17:00\");\n  const [emailNotifications, setEmailNotifications] = useState(true);\n  const [weeklyReports, setWeeklyReports] = useState(true);\n  const [deadlineAlerts, setDeadlineAlerts] = useState(true);\n  const [minPasswordLength, setMinPasswordLength] = useState(8);\n  const [requireSpecialChars, setRequireSpecialChars] = useState(true);\n  const [sessionTimeout, setSessionTimeout] = useState(480); // 8 hours in minutes\n  const [mfaRequired, setMfaRequired] = useState(false);\n  const [logRetentionDays, setLogRetentionDays] = useState(90);\n  const [automaticBackups, setAutomaticBackups] = useState(true);\n\n  // Fetch system configuration\n  const { data: systemConfig, isLoading: configLoading } = useQuery<SystemConfig>({\n    queryKey: [\"/api/admin/system-config\"],\n    retry: false,\n  });\n\n  // Fetch user permissions\n  const { data: userPermissions, isLoading: permissionsLoading } = useQuery<UserPermission[]>({\n    queryKey: [\"/api/admin/user-permissions\"],\n    retry: false,\n  });\n\n  // Fetch all users for management\n  const { data: users } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n    retry: false,\n  });\n\n  // Save configuration mutation\n  const saveConfigMutation = useMutation({\n    mutationFn: async (configData: any) => {\n      return await apiRequest(\"PUT\", \"/api/admin/system-config\", configData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Settings Saved\",\n        description: \"System configuration updated successfully\",\n      });\n      setHasUnsavedChanges(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/system-config\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save settings\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update user role mutation\n  const updateUserRoleMutation = useMutation({\n    mutationFn: async ({ userId, role }: { userId: string; role: string }) => {\n      return await apiRequest(\"PUT\", `/api/admin/users/${userId}/role`, { role });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"User role updated successfully\",\n      });\n      setShowUserDialog(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/user-permissions\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update user role\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveConfig = () => {\n    const configData = {\n      labName,\n      labDescription,\n      timezone,\n      workingHours: { start: workingStart, end: workingEnd },\n      notifications: {\n        emailEnabled: emailNotifications,\n        weeklyReports,\n        deadlineAlerts,\n      },\n      security: {\n        passwordPolicy: {\n          minLength: minPasswordLength,\n          requireSpecialChars,\n        },\n        sessionTimeout,\n        mfaRequired,\n      },\n      dataRetention: {\n        logRetentionDays,\n        automaticBackups,\n      },\n    };\n\n    saveConfigMutation.mutate(configData);\n  };\n\n  const handleFieldChange = () => {\n    setHasUnsavedChanges(true);\n  };\n\n  const getRoleBadge = (role: string) => {\n    switch (role) {\n      case 'admin':\n        return <Badge className=\"bg-red-100 text-red-800\">Admin</Badge>;\n      case 'professor':\n        return <Badge className=\"bg-blue-100 text-blue-800\">Professor</Badge>;\n      case 'postdoc':\n        return <Badge className=\"bg-purple-100 text-purple-800\">Postdoc</Badge>;\n      case 'student':\n        return <Badge className=\"bg-green-100 text-green-800\">Student</Badge>;\n      default:\n        return <Badge className=\"bg-gray-100 text-gray-800\">{role}</Badge>;\n    }\n  };\n\n  const getStatusBadge = (isActive: boolean) => {\n    return isActive ? (\n      <Badge className=\"bg-green-100 text-green-800\">\n        <CheckCircle className=\"h-3 w-3 mr-1\" />\n        Active\n      </Badge>\n    ) : (\n      <Badge className=\"bg-gray-100 text-gray-800\">\n        <AlertTriangle className=\"h-3 w-3 mr-1\" />\n        Inactive\n      </Badge>\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background p-6\">\n      {/* Navigation Breadcrumbs */}\n      <div className=\"flex items-center space-x-2 mb-6\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" size=\"sm\" className=\"text-muted-foreground hover:text-foreground\" data-testid=\"nav-home\">\n            <Home className=\"h-4 w-4 mr-2\" />\n            Dashboard\n          </Button>\n        </Link>\n        <span className=\"text-muted-foreground\">→</span>\n        <span className=\"text-foreground font-medium\">System Settings</span>\n      </div>\n\n      {/* Header */}\n      <div className=\"flex justify-between items-center mb-8\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">System Settings</h1>\n          <p className=\"text-muted-foreground\">\n            Configure lab settings, user permissions, and system preferences\n          </p>\n        </div>\n        \n        <div className=\"flex space-x-3\">\n          {hasUnsavedChanges && (\n            <div className=\"flex items-center space-x-2 text-amber-600\">\n              <AlertTriangle className=\"h-4 w-4\" />\n              <span className=\"text-sm\">Unsaved changes</span>\n            </div>\n          )}\n          \n          <Button\n            onClick={handleSaveConfig}\n            disabled={saveConfigMutation.isPending || !hasUnsavedChanges}\n            data-testid=\"button-save-config\"\n          >\n            <Save className=\"mr-2 h-4 w-4\" />\n            {saveConfigMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n          </Button>\n        </div>\n      </div>\n\n      {/* Main Content */}\n      <Tabs defaultValue=\"general\" className=\"space-y-6\">\n        <TabsList className=\"grid w-full grid-cols-5\">\n          <TabsTrigger value=\"general\">General</TabsTrigger>\n          <TabsTrigger value=\"notifications\">Notifications</TabsTrigger>\n          <TabsTrigger value=\"security\">Security</TabsTrigger>\n          <TabsTrigger value=\"users\">User Management</TabsTrigger>\n          <TabsTrigger value=\"data\">Data & Backup</TabsTrigger>\n        </TabsList>\n\n        {/* General Settings Tab */}\n        <TabsContent value=\"general\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Settings className=\"mr-2 h-5 w-5\" />\n                Lab Configuration\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"lab-name\">Lab Name</Label>\n                    <Input\n                      id=\"lab-name\"\n                      value={labName}\n                      onChange={(e) => { setLabName(e.target.value); handleFieldChange(); }}\n                      className=\"mt-2\"\n                      data-testid=\"input-lab-name\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label htmlFor=\"timezone\">Timezone</Label>\n                    <Select value={timezone} onValueChange={(value) => { setTimezone(value); handleFieldChange(); }}>\n                      <SelectTrigger className=\"mt-2\" data-testid=\"select-timezone\">\n                        <SelectValue />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"America/New_York\">Eastern Time</SelectItem>\n                        <SelectItem value=\"America/Chicago\">Central Time</SelectItem>\n                        <SelectItem value=\"America/Denver\">Mountain Time</SelectItem>\n                        <SelectItem value=\"America/Los_Angeles\">Pacific Time</SelectItem>\n                        <SelectItem value=\"UTC\">UTC</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"lab-description\">Lab Description</Label>\n                    <Textarea\n                      id=\"lab-description\"\n                      value={labDescription}\n                      onChange={(e) => { setLabDescription(e.target.value); handleFieldChange(); }}\n                      className=\"mt-2\"\n                      data-testid=\"textarea-lab-description\"\n                      rows={3}\n                    />\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"border-t pt-6\">\n                <h3 className=\"text-lg font-medium mb-4\">Working Hours</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"working-start\">Start Time</Label>\n                    <Input\n                      id=\"working-start\"\n                      type=\"time\"\n                      value={workingStart}\n                      onChange={(e) => { setWorkingStart(e.target.value); handleFieldChange(); }}\n                      className=\"mt-2\"\n                      data-testid=\"input-working-start\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"working-end\">End Time</Label>\n                    <Input\n                      id=\"working-end\"\n                      type=\"time\"\n                      value={workingEnd}\n                      onChange={(e) => { setWorkingEnd(e.target.value); handleFieldChange(); }}\n                      className=\"mt-2\"\n                      data-testid=\"input-working-end\"\n                    />\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Notifications Tab */}\n        <TabsContent value=\"notifications\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Bell className=\"mr-2 h-5 w-5\" />\n                Notification Preferences\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label>Email Notifications</Label>\n                    <p className=\"text-sm text-muted-foreground\">Send system notifications via email</p>\n                  </div>\n                  <Switch\n                    checked={emailNotifications}\n                    onCheckedChange={(checked) => { setEmailNotifications(checked); handleFieldChange(); }}\n                    data-testid=\"switch-email-notifications\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label>Weekly Reports</Label>\n                    <p className=\"text-sm text-muted-foreground\">Automatically generate weekly progress reports</p>\n                  </div>\n                  <Switch\n                    checked={weeklyReports}\n                    onCheckedChange={(checked) => { setWeeklyReports(checked); handleFieldChange(); }}\n                    data-testid=\"switch-weekly-reports\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label>Deadline Alerts</Label>\n                    <p className=\"text-sm text-muted-foreground\">Send alerts for approaching project deadlines</p>\n                  </div>\n                  <Switch\n                    checked={deadlineAlerts}\n                    onCheckedChange={(checked) => { setDeadlineAlerts(checked); handleFieldChange(); }}\n                    data-testid=\"switch-deadline-alerts\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Security Tab */}\n        <TabsContent value=\"security\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Shield className=\"mr-2 h-5 w-5\" />\n                Security Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"min-password-length\">Minimum Password Length</Label>\n                  <Input\n                    id=\"min-password-length\"\n                    type=\"number\"\n                    min=\"6\"\n                    max=\"20\"\n                    value={minPasswordLength}\n                    onChange={(e) => { setMinPasswordLength(parseInt(e.target.value)); handleFieldChange(); }}\n                    className=\"mt-2 w-32\"\n                    data-testid=\"input-min-password-length\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label>Require Special Characters</Label>\n                    <p className=\"text-sm text-muted-foreground\">Passwords must contain special characters</p>\n                  </div>\n                  <Switch\n                    checked={requireSpecialChars}\n                    onCheckedChange={(checked) => { setRequireSpecialChars(checked); handleFieldChange(); }}\n                    data-testid=\"switch-require-special-chars\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"session-timeout\">Session Timeout (minutes)</Label>\n                  <Input\n                    id=\"session-timeout\"\n                    type=\"number\"\n                    min=\"30\"\n                    max=\"1440\"\n                    value={sessionTimeout}\n                    onChange={(e) => { setSessionTimeout(parseInt(e.target.value)); handleFieldChange(); }}\n                    className=\"mt-2 w-32\"\n                    data-testid=\"input-session-timeout\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label>Multi-Factor Authentication</Label>\n                    <p className=\"text-sm text-muted-foreground\">Require MFA for all users</p>\n                  </div>\n                  <Switch\n                    checked={mfaRequired}\n                    onCheckedChange={(checked) => { setMfaRequired(checked); handleFieldChange(); }}\n                    data-testid=\"switch-mfa-required\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* User Management Tab */}\n        <TabsContent value=\"users\" className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h2 className=\"text-xl font-semibold\">User Management</h2>\n            <Dialog open={showUserDialog} onOpenChange={setShowUserDialog}>\n              <DialogTrigger asChild>\n                <Button data-testid=\"button-add-user\">\n                  <Users className=\"mr-2 h-4 w-4\" />\n                  Add User\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Add New User</DialogTitle>\n                </DialogHeader>\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label>Select User</Label>\n                    <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                      <SelectTrigger className=\"mt-2\">\n                        <SelectValue placeholder=\"Choose a user\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        {users?.map((user) => (\n                          <SelectItem key={user.id} value={user.id}>\n                            {user.firstName} {user.lastName} ({user.email})\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div>\n                    <Label>Role</Label>\n                    <Select value={selectedRole} onValueChange={setSelectedRole}>\n                      <SelectTrigger className=\"mt-2\">\n                        <SelectValue placeholder=\"Choose a role\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"student\">Student</SelectItem>\n                        <SelectItem value=\"postdoc\">Postdoc</SelectItem>\n                        <SelectItem value=\"professor\">Professor</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                  </div>\n                  \n                  <div className=\"flex justify-end space-x-2\">\n                    <Button variant=\"outline\" onClick={() => setShowUserDialog(false)}>\n                      Cancel\n                    </Button>\n                    <Button\n                      onClick={() => updateUserRoleMutation.mutate({ userId: selectedUserId, role: selectedRole })}\n                      disabled={!selectedUserId || !selectedRole || updateUserRoleMutation.isPending}\n                    >\n                      {updateUserRoleMutation.isPending ? \"Adding...\" : \"Add User\"}\n                    </Button>\n                  </div>\n                </div>\n              </DialogContent>\n            </Dialog>\n          </div>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>User</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Last Login</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {users?.map((user) => (\n                    <TableRow key={user.id}>\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium\">{user.firstName} {user.lastName}</p>\n                          <p className=\"text-sm text-muted-foreground\">{user.email}</p>\n                        </div>\n                      </TableCell>\n                      <TableCell>{getRoleBadge(user.role)}</TableCell>\n                      <TableCell>{getStatusBadge(user.isActive ?? false)}</TableCell>\n                      <TableCell>\n                        Never\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex space-x-2\">\n                          <Button size=\"sm\" variant=\"outline\">\n                            Edit\n                          </Button>\n                          {user.role !== 'admin' && (\n                            <Button size=\"sm\" variant=\"outline\" className=\"text-red-600 hover:text-red-700\">\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Data & Backup Tab */}\n        <TabsContent value=\"data\" className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center\">\n                <Database className=\"mr-2 h-5 w-5\" />\n                Data Management\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"log-retention\">Log Retention (days)</Label>\n                  <Input\n                    id=\"log-retention\"\n                    type=\"number\"\n                    min=\"7\"\n                    max=\"365\"\n                    value={logRetentionDays}\n                    onChange={(e) => { setLogRetentionDays(parseInt(e.target.value)); handleFieldChange(); }}\n                    className=\"mt-2 w-32\"\n                    data-testid=\"input-log-retention\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-1\">\n                    <Label>Automatic Backups</Label>\n                    <p className=\"text-sm text-muted-foreground\">Daily automatic database backups</p>\n                  </div>\n                  <Switch\n                    checked={automaticBackups}\n                    onCheckedChange={(checked) => { setAutomaticBackups(checked); handleFieldChange(); }}\n                    data-testid=\"switch-automatic-backups\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"border-t pt-6\">\n                <h3 className=\"text-lg font-medium mb-4\">Data Operations</h3>\n                <div className=\"flex space-x-4\">\n                  <Button variant=\"outline\" data-testid=\"button-export-data\">\n                    <Download className=\"mr-2 h-4 w-4\" />\n                    Export All Data\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-backup-now\">\n                    <Database className=\"mr-2 h-4 w-4\" />\n                    Backup Now\n                  </Button>\n                  <Button variant=\"outline\" data-testid=\"button-restore-backup\">\n                    <Upload className=\"mr-2 h-4 w-4\" />\n                    Restore Backup\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":25295},"client/src/pages/postdoc/PostdocDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/layout/Header\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport MetricCard from \"@/components/dashboard/MetricCard\";\nimport ActivityFeed from \"@/components/dashboard/ActivityFeed\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Projector, Users, FileText, Trophy, Crown, Lightbulb } from \"lucide-react\";\nimport { Progress } from \"@/components/ui/progress\";\n\nconst postdocSidebarItems = [\n  { id: 'dashboard', label: 'Dashboard', icon: 'chart-line' },\n  { id: 'projects', label: 'My Projects', icon: 'project-diagram' },\n  { id: 'mentorship', label: 'Mentorship', icon: 'user-friends' },\n  { id: 'team-analytics', label: 'Team Analytics', icon: 'chart-bar' },\n  { id: 'schedule', label: 'Schedule', icon: 'calendar-alt' },\n  { id: 'lab-overview', label: 'Lab Overview', icon: 'microscope' },\n];\n\nexport default function PostdocDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeSection, setActiveSection] = useState('dashboard');\n\n  const { data: userMetrics, isLoading: metricsLoading, error: metricsError } = useQuery({\n    queryKey: [\"/api/analytics/user\", user?.id],\n    retry: false,\n    enabled: !!user?.id,\n  });\n\n  const { data: userProjects, isLoading: projectsLoading, error: projectsError } = useQuery({\n    queryKey: [\"/api/projects\"],\n    retry: false,\n  });\n\n  const { data: notifications } = useQuery({\n    queryKey: [\"/api/notifications/user\", user?.id],\n    retry: false,\n    enabled: !!user?.id,\n  });\n\n  // Handle unauthorized errors\n  if ((metricsError && isUnauthorizedError(metricsError)) || \n      (projectsError && isUnauthorizedError(projectsError))) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  const unreadNotifications = notifications?.filter(n => !n.readAt).length || 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        user={user} \n        role=\"Postdoc\"\n        roleIcon=\"user-check\"\n        notificationCount={unreadNotifications}\n      />\n      \n      <div className=\"flex h-[calc(100vh-73px)]\">\n        <Sidebar \n          items={postdocSidebarItems}\n          activeSection={activeSection}\n          onSectionChange={setActiveSection}\n        />\n\n        <main className=\"flex-1 overflow-auto\" data-testid=\"main-content-postdoc\">\n          {activeSection === 'dashboard' && (\n            <div className=\"p-6\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">\n                  Welcome back, Dr. {user?.lastName || 'Researcher'}!\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  Your research projects and mentorship overview\n                </p>\n              </div>\n\n              {/* Enhanced Metrics for Postdoc */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n                <MetricCard\n                  title=\"Active Projects\"\n                  value={userMetrics?.activeProjects?.toString() || \"0\"}\n                  subtitle=\"leading 0 teams\"\n                  icon={Projector}\n                  iconColor=\"text-primary\"\n                  iconBgColor=\"bg-primary/10\"\n                  isLoading={metricsLoading}\n                  data-testid=\"metric-active-projects\"\n                />\n                \n                <MetricCard\n                  title=\"Mentoring\"\n                  value=\"0\"\n                  subtitle=\"graduate students\"\n                  icon={Users}\n                  iconColor=\"text-green-600\"\n                  iconBgColor=\"bg-green-100\"\n                  data-testid=\"metric-mentees\"\n                />\n                \n                <MetricCard\n                  title=\"Publications\"\n                  value=\"0\"\n                  subtitle=\"in review\"\n                  icon={FileText}\n                  iconColor=\"text-secondary\"\n                  iconBgColor=\"bg-secondary/10\"\n                  data-testid=\"metric-publications\"\n                />\n                \n                <MetricCard\n                  title=\"Team Performance\"\n                  value={userMetrics?.productivityScore?.toString() || \"0\"}\n                  subtitle=\"% average\"\n                  icon={Trophy}\n                  iconColor=\"text-yellow-600\"\n                  iconBgColor=\"bg-yellow-100\"\n                  isLoading={metricsLoading}\n                  data-testid=\"metric-team-performance\"\n                />\n              </div>\n\n              {/* Mentorship Overview */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n                {/* Mentees Status */}\n                <div className=\"bg-card border border-border rounded-lg p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Users className=\"w-5 h-5 text-green-600 mr-2\" />\n                    Mentees Progress\n                  </h3>\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Users className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                    <p>No mentees assigned yet</p>\n                    <p className=\"text-sm\">Students will appear here once assigned</p>\n                  </div>\n                </div>\n\n                {/* Project Leadership */}\n                <div className=\"bg-card border border-border rounded-lg p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Crown className=\"w-5 h-5 text-yellow-600 mr-2\" />\n                    Leading Projects\n                  </h3>\n                  {userProjects && userProjects.length > 0 ? (\n                    <div className=\"space-y-4\">\n                      {userProjects.map((project: any) => (\n                        <div key={project.id} className=\"border border-border rounded-lg p-4\" data-testid={`leading-project-${project.id}`}>\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <h4 className=\"text-sm font-semibold\">{project.name}</h4>\n                            <span className=\"text-xs bg-primary/10 text-primary px-2 py-1 rounded\">Leading</span>\n                          </div>\n                          <p className=\"text-xs text-muted-foreground mb-2\">\n                            Due: {project.targetEndDate ? new Date(project.targetEndDate).toLocaleDateString() : 'TBD'}\n                          </p>\n                          <Progress value={0} className=\"h-2 mb-1\" />\n                          <div className=\"flex justify-between text-xs text-muted-foreground\">\n                            <span>Progress: 0%</span>\n                            <span>Status: {project.status}</span>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Crown className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                      <p>No projects under your leadership</p>\n                      <p className=\"text-sm\">Projects will appear here once assigned</p>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              {/* Recent Activities and AI Insights */}\n              <div className=\"bg-card border border-border rounded-lg p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Recent Activities & AI Suggestions</h3>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n                  <ActivityFeed \n                    title=\"Team Updates\"\n                    items={[]}\n                    emptyMessage=\"No recent team activities\"\n                    data-testid=\"team-updates-feed\"\n                  />\n                  \n                  {/* AI Suggestions */}\n                  <div>\n                    <h4 className=\"text-sm font-medium text-muted-foreground mb-3\">AI Insights & Suggestions</h4>\n                    <div className=\"text-center py-8 text-muted-foreground\">\n                      <Lightbulb className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                      <p>AI insights coming in Phase 2</p>\n                      <p className=\"text-sm\">Personalized recommendations will appear here</p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )}\n\n          {activeSection !== 'dashboard' && (\n            <div className=\"p-6\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2 capitalize\">\n                  {activeSection.replace('-', ' ')}\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  {activeSection === 'projects' && 'Manage your research projects and collaborations'}\n                  {activeSection === 'mentorship' && 'Guide and support graduate students'}\n                  {activeSection === 'team-analytics' && 'Analyze team performance and productivity'}\n                  {activeSection === 'schedule' && 'Manage your research schedule'}\n                  {activeSection === 'lab-overview' && 'View lab-wide activities and insights'}\n                </p>\n              </div>\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <div className=\"w-16 h-16 mx-auto mb-4 opacity-50 bg-muted rounded-full flex items-center justify-center\">\n                  <span className=\"text-2xl\">⚙️</span>\n                </div>\n                <p className=\"text-lg capitalize\">{activeSection.replace('-', ' ')} coming in Phase 2</p>\n                <p className=\"text-sm\">Enhanced functionality will be available soon</p>\n              </div>\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10250},"client/src/pages/student/MyProjects.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { \n  Target, \n  Clock, \n  Calendar, \n  User, \n  FileText,\n  PlayCircle,\n  PauseCircle,\n  CheckCircle\n} from \"lucide-react\";\nimport type { Project, ProjectAssignment, ProgressUpdate } from \"@shared/schema\";\n\ninterface ProjectWithAssignment extends Project {\n  assignment?: ProjectAssignment;\n  latestProgress?: ProgressUpdate;\n}\n\nexport default function MyProjects() {\n  const { user } = useAuth();\n\n  // Fetch user's assigned projects\n  const { data: projects, isLoading } = useQuery<ProjectWithAssignment[]>({\n    queryKey: [\"/api/assignments/user\", user?.id],\n    enabled: !!user?.id,\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case 'active': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300';\n      case 'completed': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300';\n      case 'paused': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300';\n    }\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case 'active': return <PlayCircle className=\"h-4 w-4\" />;\n      case 'completed': return <CheckCircle className=\"h-4 w-4\" />;\n      case 'paused': return <PauseCircle className=\"h-4 w-4\" />;\n      default: return <Target className=\"h-4 w-4\" />;\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <Skeleton className=\"h-8 w-64\" />\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {Array.from({ length: 6 }).map((_, i) => (\n            <Skeleton key={i} className=\"h-72\" />\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-6\">\n      {/* Header */}\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">My Projects</h1>\n          <p className=\"text-muted-foreground\">\n            Track your assigned research projects and progress\n          </p>\n        </div>\n      </div>\n\n      {/* Project Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Target className=\"h-8 w-8 text-blue-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Total Projects</p>\n                <p className=\"text-2xl font-bold\">{projects?.length || 0}</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <PlayCircle className=\"h-8 w-8 text-green-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Active</p>\n                <p className=\"text-2xl font-bold\">\n                  {projects?.filter(p => p.status === 'active').length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <CheckCircle className=\"h-8 w-8 text-purple-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Completed</p>\n                <p className=\"text-2xl font-bold\">\n                  {projects?.filter(p => p.status === 'completed').length || 0}\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n        \n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <Clock className=\"h-8 w-8 text-orange-600\" />\n              <div className=\"ml-4\">\n                <p className=\"text-sm font-medium text-muted-foreground\">Hours This Week</p>\n                <p className=\"text-2xl font-bold\">0</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Projects Grid */}\n      {projects && projects.length > 0 ? (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {projects.map((project) => (\n            <Card key={project.id} className=\"hover:shadow-lg transition-shadow\">\n              <CardHeader>\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <CardTitle className=\"text-lg mb-2 line-clamp-2\">\n                      {project.name}\n                    </CardTitle>\n                    <div className=\"flex items-center space-x-2\">\n                      <Badge className={getStatusColor(project.status)} variant=\"secondary\">\n                        <span className=\"flex items-center space-x-1\">\n                          {getStatusIcon(project.status)}\n                          <span className=\"capitalize\">{project.status}</span>\n                        </span>\n                      </Badge>\n                      {project.projectType && (\n                        <Badge variant=\"outline\" className=\"capitalize\">\n                          {project.projectType}\n                        </Badge>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              \n              <CardContent className=\"space-y-4\">\n                <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                  {project.description}\n                </p>\n                \n                <div className=\"space-y-3\">\n                  <div className=\"flex items-center text-sm text-muted-foreground\">\n                    <Calendar className=\"h-4 w-4 mr-2\" />\n                    <span>\n                      {project.targetEndDate \n                        ? `Due: ${new Date(project.targetEndDate).toLocaleDateString()}`\n                        : 'No deadline set'\n                      }\n                    </span>\n                  </div>\n                  \n                  {project.assignment && (\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <User className=\"h-4 w-4 mr-2\" />\n                      <span className=\"capitalize\">\n                        Role: {project.assignment.role || 'Assignee'}\n                      </span>\n                    </div>\n                  )}\n                  \n                  {/* Progress */}\n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-muted-foreground\">Progress</span>\n                      <span className=\"font-medium\">\n                        {project.latestProgress?.percentComplete || 0}%\n                      </span>\n                    </div>\n                    <Progress value={project.latestProgress?.percentComplete || 0} />\n                  </div>\n                  \n                  {project.latestProgress?.hoursWorked && (\n                    <div className=\"flex items-center text-sm text-muted-foreground\">\n                      <Clock className=\"h-4 w-4 mr-2\" />\n                      <span>{project.latestProgress.hoursWorked} hours logged</span>\n                    </div>\n                  )}\n                </div>\n                \n                <div className=\"flex space-x-2 pt-4\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\" \n                    className=\"flex-1\"\n                    data-testid={`button-view-project-${project.id}`}\n                  >\n                    <FileText className=\"h-4 w-4 mr-2\" />\n                    View Details\n                  </Button>\n                  <Button \n                    size=\"sm\" \n                    className=\"flex-1\"\n                    data-testid={`button-log-progress-${project.id}`}\n                  >\n                    <PlayCircle className=\"h-4 w-4 mr-2\" />\n                    Log Progress\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card>\n          <CardContent className=\"p-12 text-center\">\n            <Target className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground opacity-50\" />\n            <h3 className=\"text-xl font-semibold mb-2\">No Projects Yet</h3>\n            <p className=\"text-muted-foreground mb-4\">\n              You haven't been assigned to any projects yet. \n              Your supervisor will assign projects to you through the lab management system.\n            </p>\n            <p className=\"text-sm text-muted-foreground\">\n              Once assigned, you'll be able to track your progress, log hours, and collaborate with your team here.\n            </p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":9487},"client/src/pages/student/StudentDashboard.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/layout/Header\";\nimport Sidebar from \"@/components/layout/Sidebar\";\nimport MetricCard from \"@/components/dashboard/MetricCard\";\nimport ActivityFeed from \"@/components/dashboard/ActivityFeed\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { Clock, Projector, Calendar, TrendingUp, Plus, BookOpen, HelpCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\n\nconst studentSidebarItems = [\n  { id: 'dashboard', label: 'Dashboard', icon: 'chart-line' },\n  { id: 'projects', label: 'My Projects', icon: 'project-diagram' },\n  { id: 'schedule', label: 'Schedule', icon: 'calendar-alt' },\n  { id: 'progress', label: 'Progress', icon: 'tasks' },\n  { id: 'insights', label: 'AI Insights', icon: 'lightbulb' },\n  { id: 'lab-stats', label: 'Lab Statistics', icon: 'chart-bar' },\n];\n\nexport default function StudentDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [activeSection, setActiveSection] = useState('dashboard');\n\n  const { data: userMetrics, isLoading: metricsLoading, error: metricsError } = useQuery({\n    queryKey: [\"/api/analytics/user\", user?.id],\n    retry: false,\n    enabled: !!user?.id,\n  });\n\n  const { data: userProjects, isLoading: projectsLoading, error: projectsError } = useQuery({\n    queryKey: [\"/api/projects\"],\n    retry: false,\n  });\n\n  const { data: notifications } = useQuery({\n    queryKey: [\"/api/notifications/user\", user?.id],\n    retry: false,\n    enabled: !!user?.id,\n  });\n\n  // Handle unauthorized errors\n  if ((metricsError && isUnauthorizedError(metricsError)) || \n      (projectsError && isUnauthorizedError(projectsError))) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  const unreadNotifications = notifications?.filter(n => !n.readAt).length || 0;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        user={user} \n        role=\"PhD Student\"\n        roleIcon=\"user-graduate\"\n        notificationCount={unreadNotifications}\n      />\n      \n      <div className=\"flex h-[calc(100vh-73px)]\">\n        <Sidebar \n          items={studentSidebarItems}\n          activeSection={activeSection}\n          onSectionChange={setActiveSection}\n        />\n\n        <main className=\"flex-1 overflow-auto\" data-testid=\"main-content-student\">\n          {activeSection === 'dashboard' && (\n            <div className=\"p-6\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2\">\n                  Welcome back, {user?.firstName || 'Student'}!\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  Here's your research progress and upcoming tasks\n                </p>\n              </div>\n\n              {/* Personal Metrics */}\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n                <MetricCard\n                  title=\"Hours This Week\"\n                  value=\"0\"\n                  subtitle=\"of 20 required\"\n                  icon={Clock}\n                  iconColor=\"text-green-600\"\n                  iconBgColor=\"bg-green-100\"\n                  data-testid=\"metric-weekly-hours\"\n                />\n                \n                <MetricCard\n                  title=\"Active Projects\"\n                  value={userMetrics?.activeProjects?.toString() || \"0\"}\n                  subtitle=\"in progress\"\n                  icon={Projector}\n                  iconColor=\"text-primary\"\n                  iconBgColor=\"bg-primary/10\"\n                  isLoading={metricsLoading}\n                  data-testid=\"metric-active-projects\"\n                />\n                \n                <MetricCard\n                  title=\"Upcoming Deadlines\"\n                  value=\"0\"\n                  subtitle=\"next 2 weeks\"\n                  icon={Calendar}\n                  iconColor=\"text-yellow-600\"\n                  iconBgColor=\"bg-yellow-100\"\n                  data-testid=\"metric-upcoming-deadlines\"\n                />\n                \n                <MetricCard\n                  title=\"Productivity Score\"\n                  value={userMetrics?.productivityScore?.toString() || \"0\"}\n                  subtitle=\"% efficiency\"\n                  icon={TrendingUp}\n                  iconColor=\"text-secondary\"\n                  iconBgColor=\"bg-secondary/10\"\n                  isLoading={metricsLoading}\n                  data-testid=\"metric-productivity-score\"\n                />\n              </div>\n\n              {/* Today's Schedule & Quick Actions */}\n              <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n                {/* Today's Schedule */}\n                <div className=\"bg-card border border-border rounded-lg p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                    <Calendar className=\"w-5 h-5 text-primary mr-2\" />\n                    Today's Schedule\n                  </h3>\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Calendar className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                    <p>No scheduled activities for today</p>\n                    <p className=\"text-sm\">Submit your weekly schedule to get started</p>\n                  </div>\n                </div>\n\n                {/* Quick Actions */}\n                <div className=\"bg-card border border-border rounded-lg p-6\">\n                  <h3 className=\"text-lg font-semibold mb-4\">Quick Actions</h3>\n                  <div className=\"grid grid-cols-2 gap-3\">\n                    <Button \n                      variant=\"outline\"\n                      className=\"p-4 h-auto flex-col items-start space-y-2 bg-primary/10 border-primary/20 hover:bg-primary/20 text-left\"\n                      data-testid=\"button-update-progress\"\n                    >\n                      <Plus className=\"w-5 h-5 text-primary\" />\n                      <span className=\"text-sm font-medium text-primary\">Update Progress</span>\n                    </Button>\n                    \n                    <Button \n                      variant=\"outline\"\n                      className=\"p-4 h-auto flex-col items-start space-y-2 bg-secondary/10 border-secondary/20 hover:bg-secondary/20 text-left\"\n                      data-testid=\"button-submit-schedule\"\n                    >\n                      <Calendar className=\"w-5 h-5 text-secondary\" />\n                      <span className=\"text-sm font-medium text-secondary\">Submit Schedule</span>\n                    </Button>\n                    \n                    <Button \n                      variant=\"outline\"\n                      className=\"p-4 h-auto flex-col items-start space-y-2 bg-green-50 border-green-200 hover:bg-green-100 text-left\"\n                      data-testid=\"button-log-hours\"\n                    >\n                      <Clock className=\"w-5 h-5 text-green-600\" />\n                      <span className=\"text-sm font-medium text-green-600\">Log Hours</span>\n                    </Button>\n                    \n                    <Button \n                      variant=\"outline\"\n                      className=\"p-4 h-auto flex-col items-start space-y-2 bg-yellow-50 border-yellow-200 hover:bg-yellow-100 text-left\"\n                      data-testid=\"button-get-help\"\n                    >\n                      <HelpCircle className=\"w-5 h-5 text-yellow-600\" />\n                      <span className=\"text-sm font-medium text-yellow-600\">Get Help</span>\n                    </Button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Project Progress Overview */}\n              <div className=\"bg-card border border-border rounded-lg p-6\">\n                <h3 className=\"text-lg font-semibold mb-4\">Project Progress</h3>\n                {userProjects && userProjects.length > 0 ? (\n                  <div className=\"space-y-6\">\n                    {userProjects.map((project: any) => (\n                      <div key={project.id} className=\"border border-border rounded-lg p-4\" data-testid={`project-${project.id}`}>\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <h4 className=\"text-sm font-semibold text-foreground\">{project.name}</h4>\n                          <span className=\"text-xs text-muted-foreground\">\n                            Due: {project.targetEndDate ? new Date(project.targetEndDate).toLocaleDateString() : 'TBD'}\n                          </span>\n                        </div>\n                        \n                        <div className=\"mb-3\">\n                          <div className=\"flex justify-between text-xs text-muted-foreground mb-1\">\n                            <span>Overall Progress</span>\n                            <span>0%</span>\n                          </div>\n                          <Progress value={0} className=\"h-2\" />\n                        </div>\n\n                        <div className=\"grid grid-cols-3 gap-4 text-xs\">\n                          <div>\n                            <p className=\"text-muted-foreground mb-1\">Literature Review</p>\n                            <Progress value={0} className=\"h-1\" />\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground mb-1\">Data Analysis</p>\n                            <Progress value={0} className=\"h-1\" />\n                          </div>\n                          <div>\n                            <p className=\"text-muted-foreground mb-1\">Writing</p>\n                            <Progress value={0} className=\"h-1\" />\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                ) : (\n                  <div className=\"text-center py-8 text-muted-foreground\">\n                    <Projector className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\n                    <p>No projects assigned yet</p>\n                    <p className=\"text-sm\">Contact your supervisor to get started</p>\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n\n          {(activeSection !== 'dashboard' && activeSection !== 'projects') && (\n            <div className=\"p-6\">\n              <div className=\"mb-6\">\n                <h2 className=\"text-2xl font-bold text-foreground mb-2 capitalize\">\n                  {activeSection.replace('-', ' ')}\n                </h2>\n                <p className=\"text-muted-foreground\">\n                  {activeSection === 'schedule' && 'Manage your work schedule and check-ins'}\n                  {activeSection === 'progress' && 'Track your research progress and milestones'}\n                  {activeSection === 'insights' && 'AI-powered insights and recommendations'}\n                  {activeSection === 'lab-stats' && 'View lab-wide statistics and benchmarks'}\n                </p>\n              </div>\n              <div className=\"text-center py-12 text-muted-foreground\">\n                <div className=\"w-16 h-16 mx-auto mb-4 opacity-50 bg-muted rounded-full flex items-center justify-center\">\n                  <span className=\"text-2xl\">🚧</span>\n                </div>\n                <p className=\"text-lg capitalize\">{activeSection.replace('-', ' ')} coming in Phase 2</p>\n                <p className=\"text-sm\">Enhanced functionality will be available soon</p>\n              </div>\n            </div>\n          )}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":11982},"client/src/components/LazyChart.tsx":{"content":"import { Suspense, lazy } from 'react';\nimport { Skeleton } from '@/components/ui/skeleton';\n\n// Lazy load chart components for better performance\nconst ProductivityTrendChart = lazy(() => \n  import('@/components/AdvancedCharts').then(module => ({ \n    default: module.ProductivityTrendChart \n  }))\n);\n\nconst ProjectStatusPieChart = lazy(() => \n  import('@/components/AdvancedCharts').then(module => ({ \n    default: module.ProjectStatusPieChart \n  }))\n);\n\nconst TeamPerformanceRadar = lazy(() => \n  import('@/components/AdvancedCharts').then(module => ({ \n    default: module.TeamPerformanceRadar \n  }))\n);\n\nconst ResourceUtilizationChart = lazy(() => \n  import('@/components/AdvancedCharts').then(module => ({ \n    default: module.ResourceUtilizationChart \n  }))\n);\n\nconst TimeSeriesAnalytics = lazy(() => \n  import('@/components/AdvancedCharts').then(module => ({ \n    default: module.TimeSeriesAnalytics \n  }))\n);\n\nconst BurndownChart = lazy(() => \n  import('@/components/AdvancedCharts').then(module => ({ \n    default: module.BurndownChart \n  }))\n);\n\n// Loading fallback component\nfunction ChartSkeleton({ height = 300 }: { height?: number }) {\n  return (\n    <div className=\"w-full\" style={{ height }}>\n      <Skeleton className=\"w-full h-full rounded-lg\" />\n      <div className=\"mt-4 space-y-2\">\n        <Skeleton className=\"h-4 w-1/3\" />\n        <Skeleton className=\"h-3 w-1/2\" />\n      </div>\n    </div>\n  );\n}\n\n// Lazy wrapper components with mobile-optimized heights\ninterface LazyChartProps {\n  data: any[];\n  className?: string;\n}\n\nexport function LazyProductivityTrendChart({ data, className }: LazyChartProps) {\n  return (\n    <div className={className}>\n      <Suspense fallback={<ChartSkeleton height={250} />}>\n        <div className=\"h-64 md:h-80\">\n          <ProductivityTrendChart data={data} />\n        </div>\n      </Suspense>\n    </div>\n  );\n}\n\nexport function LazyProjectStatusPieChart({ data, className }: LazyChartProps) {\n  return (\n    <div className={className}>\n      <Suspense fallback={<ChartSkeleton height={250} />}>\n        <div className=\"h-64 md:h-80\">\n          <ProjectStatusPieChart data={data} />\n        </div>\n      </Suspense>\n    </div>\n  );\n}\n\nexport function LazyTeamPerformanceRadar({ data, className }: LazyChartProps) {\n  return (\n    <div className={className}>\n      <Suspense fallback={<ChartSkeleton height={300} />}>\n        <div className=\"h-72 md:h-96\">\n          <TeamPerformanceRadar data={data} />\n        </div>\n      </Suspense>\n    </div>\n  );\n}\n\nexport function LazyResourceUtilizationChart({ data, className }: LazyChartProps) {\n  return (\n    <div className={className}>\n      <Suspense fallback={<ChartSkeleton height={250} />}>\n        <div className=\"h-64 md:h-80\">\n          <ResourceUtilizationChart data={data} />\n        </div>\n      </Suspense>\n    </div>\n  );\n}\n\nexport function LazyTimeSeriesAnalytics({ data, className }: LazyChartProps) {\n  return (\n    <div className={className}>\n      <Suspense fallback={<ChartSkeleton height={350} />}>\n        <div className=\"h-80 md:h-96\">\n          <TimeSeriesAnalytics data={data} />\n        </div>\n      </Suspense>\n    </div>\n  );\n}\n\nexport function LazyBurndownChart({ data, className }: LazyChartProps) {\n  return (\n    <div className={className}>\n      <Suspense fallback={<ChartSkeleton height={250} />}>\n        <div className=\"h-64 md:h-80\">\n          <BurndownChart data={data} />\n        </div>\n      </Suspense>\n    </div>\n  );\n}","size_bytes":3463},"client/src/components/MobileNavigation.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport RealTimeNotifications from \"@/components/RealTimeNotifications\";\nimport {\n  Menu,\n  Home,\n  FolderOpen,\n  Brain,\n  Calendar,\n  BarChart3,\n  Settings,\n  Globe,\n  LogOut,\n  User,\n  X\n} from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\n\ninterface MobileNavProps {\n  onLogout: () => void;\n  isLoggingOut: boolean;\n}\n\nexport default function MobileNavigation({ onLogout, isLoggingOut }: MobileNavProps) {\n  const { user } = useAuth();\n  const [location] = useLocation();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const isAdmin = user?.role === 'admin' || user?.role === 'professor';\n\n  const navItems = [\n    { href: \"/\", icon: Home, label: \"Dashboard\", adminOnly: false },\n    ...(isAdmin ? [\n      { href: \"/admin/projects\", icon: FolderOpen, label: \"Projects\", adminOnly: true },\n      { href: \"/admin/ai-analytics\", icon: Brain, label: \"AI Analytics\", adminOnly: true },\n      { href: \"/admin/schedules\", icon: Calendar, label: \"Schedules\", adminOnly: true },\n      { href: \"/admin/reports\", icon: BarChart3, label: \"Reports\", adminOnly: true },\n      { href: \"/admin/integrations\", icon: Globe, label: \"Integrations\", adminOnly: true },\n      { href: \"/admin/settings\", icon: Settings, label: \"Settings\", adminOnly: true },\n    ] : [\n      { href: \"/projects\", icon: FolderOpen, label: \"My Projects\", adminOnly: false },\n    ])\n  ];\n\n  const handleNavClick = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <div className=\"lg:hidden\">\n      <Sheet open={isOpen} onOpenChange={setIsOpen}>\n        <SheetTrigger asChild>\n          <Button variant=\"ghost\" size=\"sm\" className=\"px-2\" data-testid=\"mobile-menu-trigger\">\n            <Menu className=\"h-6 w-6\" />\n          </Button>\n        </SheetTrigger>\n        <SheetContent side=\"left\" className=\"w-72 p-0\">\n          <div className=\"flex flex-col h-full\">\n            {/* Header */}\n            <div className=\"p-6 border-b bg-primary text-primary-foreground\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center space-x-3\">\n                  <div className=\"w-8 h-8 bg-primary-foreground/20 rounded-full flex items-center justify-center\">\n                    <User className=\"h-4 w-4\" />\n                  </div>\n                  <div>\n                    <p className=\"font-medium text-sm\">{user?.firstName} {user?.lastName}</p>\n                    <Badge variant=\"secondary\" className=\"text-xs mt-1\">\n                      {user?.role}\n                    </Badge>\n                  </div>\n                </div>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsOpen(false)}\n                  className=\"text-primary-foreground hover:bg-primary-foreground/20\"\n                >\n                  <X className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n\n            {/* Navigation Items */}\n            <div className=\"flex-1 py-4\">\n              <nav className=\"space-y-1 px-4\">\n                {navItems.map((item) => {\n                  const isActive = location === item.href;\n                  const Icon = item.icon;\n                  \n                  return (\n                    <Link key={item.href} href={item.href}>\n                      <button\n                        onClick={handleNavClick}\n                        className={`w-full flex items-center space-x-3 px-3 py-3 rounded-lg text-sm font-medium transition-colors ${\n                          isActive\n                            ? 'bg-primary text-primary-foreground'\n                            : 'text-muted-foreground hover:text-foreground hover:bg-muted'\n                        }`}\n                        data-testid={`mobile-nav-${item.label.toLowerCase().replace(' ', '-')}`}\n                      >\n                        <Icon className=\"h-5 w-5\" />\n                        <span>{item.label}</span>\n                      </button>\n                    </Link>\n                  );\n                })}\n              </nav>\n            </div>\n\n            {/* Footer Actions */}\n            <div className=\"p-4 border-t space-y-3\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium text-muted-foreground\">Notifications</span>\n                <RealTimeNotifications />\n              </div>\n              \n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => {\n                  setIsOpen(false);\n                  onLogout();\n                }}\n                disabled={isLoggingOut}\n                className=\"w-full\"\n                data-testid=\"mobile-logout\"\n              >\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                {isLoggingOut ? \"Logging out...\" : \"Logout\"}\n              </Button>\n            </div>\n          </div>\n        </SheetContent>\n      </Sheet>\n    </div>\n  );\n}","size_bytes":5229},"client/src/components/PerformanceMonitor.tsx":{"content":"import { useEffect, useState } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Progress } from '@/components/ui/progress';\nimport { Button } from '@/components/ui/button';\nimport { \n  Activity, \n  Zap, \n  Clock, \n  Wifi, \n  Database,\n  RefreshCw,\n  AlertTriangle,\n  CheckCircle\n} from 'lucide-react';\n\ninterface PerformanceMetrics {\n  loadTime: number;\n  memoryUsage: number;\n  cacheHitRate: number;\n  networkLatency: number;\n  jsHeapSize: number;\n  domNodes: number;\n  connectionType: string;\n  isOnline: boolean;\n}\n\nexport default function PerformanceMonitor() {\n  const [metrics, setMetrics] = useState<PerformanceMetrics | null>(null);\n  const [isVisible, setIsVisible] = useState(false);\n\n  const collectMetrics = () => {\n    try {\n      const navigation = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming;\n      const memory = (performance as any).memory;\n      const connection = (navigator as any).connection;\n\n      const newMetrics: PerformanceMetrics = {\n        loadTime: navigation.loadEventEnd - navigation.loadEventStart,\n        memoryUsage: memory ? Math.round((memory.usedJSHeapSize / memory.totalJSHeapSize) * 100) : 0,\n        cacheHitRate: Math.random() * 40 + 60, // Simulated - in real app would track actual cache hits\n        networkLatency: navigation.responseEnd - navigation.requestStart,\n        jsHeapSize: memory ? Math.round(memory.usedJSHeapSize / 1024 / 1024) : 0,\n        domNodes: document.querySelectorAll('*').length,\n        connectionType: connection?.effectiveType || 'unknown',\n        isOnline: navigator.onLine\n      };\n\n      setMetrics(newMetrics);\n    } catch (error) {\n      console.warn('Performance metrics collection failed:', error);\n    }\n  };\n\n  useEffect(() => {\n    collectMetrics();\n    \n    // Update metrics every 30 seconds\n    const interval = setInterval(collectMetrics, 30000);\n    \n    return () => clearInterval(interval);\n  }, []);\n\n  const getPerformanceGrade = (metrics: PerformanceMetrics): { grade: string; color: string } => {\n    let score = 100;\n    \n    if (metrics.loadTime > 3000) score -= 20;\n    if (metrics.memoryUsage > 80) score -= 15;\n    if (metrics.cacheHitRate < 70) score -= 10;\n    if (metrics.networkLatency > 1000) score -= 15;\n    \n    if (score >= 90) return { grade: 'A', color: 'text-green-600' };\n    if (score >= 80) return { grade: 'B', color: 'text-blue-600' };\n    if (score >= 70) return { grade: 'C', color: 'text-yellow-600' };\n    return { grade: 'D', color: 'text-red-600' };\n  };\n\n  if (!metrics) return null;\n\n  const { grade, color } = getPerformanceGrade(metrics);\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50\">\n      {/* Performance Badge */}\n      <div className=\"flex items-center space-x-2 mb-2\">\n        <Button\n          variant={isVisible ? \"default\" : \"secondary\"}\n          size=\"sm\"\n          onClick={() => setIsVisible(!isVisible)}\n          className=\"shadow-lg\"\n        >\n          <Activity className=\"h-4 w-4 mr-1\" />\n          Performance {grade}\n        </Button>\n        \n        <Badge variant={metrics.isOnline ? \"default\" : \"destructive\"} className=\"shadow-lg\">\n          <Wifi className=\"h-3 w-3 mr-1\" />\n          {metrics.isOnline ? 'Online' : 'Offline'}\n        </Badge>\n      </div>\n\n      {/* Detailed Metrics Panel */}\n      {isVisible && (\n        <Card className=\"w-80 shadow-xl border-2\">\n          <CardHeader className=\"pb-3\">\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-lg flex items-center\">\n                <Zap className=\"h-5 w-5 mr-2 text-yellow-500\" />\n                Performance Monitor\n              </CardTitle>\n              <div className=\"flex items-center space-x-2\">\n                <span className={`text-2xl font-bold ${color}`}>{grade}</span>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={collectMetrics}\n                  className=\"p-1\"\n                >\n                  <RefreshCw className=\"h-4 w-4\" />\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          \n          <CardContent className=\"space-y-4\">\n            {/* Load Time */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center\">\n                  <Clock className=\"h-4 w-4 mr-2 text-blue-500\" />\n                  <span className=\"text-sm font-medium\">Load Time</span>\n                </div>\n                <span className=\"text-sm text-muted-foreground\">\n                  {metrics.loadTime.toFixed(0)}ms\n                </span>\n              </div>\n              <Progress \n                value={Math.min((metrics.loadTime / 5000) * 100, 100)} \n                className=\"h-2\"\n              />\n            </div>\n\n            {/* Memory Usage */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center\">\n                  <Database className=\"h-4 w-4 mr-2 text-purple-500\" />\n                  <span className=\"text-sm font-medium\">Memory Usage</span>\n                </div>\n                <span className=\"text-sm text-muted-foreground\">\n                  {metrics.memoryUsage}% ({metrics.jsHeapSize}MB)\n                </span>\n              </div>\n              <Progress \n                value={metrics.memoryUsage} \n                className=\"h-2\"\n              />\n            </div>\n\n            {/* Cache Hit Rate */}\n            <div>\n              <div className=\"flex items-center justify-between mb-2\">\n                <div className=\"flex items-center\">\n                  <CheckCircle className=\"h-4 w-4 mr-2 text-green-500\" />\n                  <span className=\"text-sm font-medium\">Cache Hit Rate</span>\n                </div>\n                <span className=\"text-sm text-muted-foreground\">\n                  {metrics.cacheHitRate.toFixed(1)}%\n                </span>\n              </div>\n              <Progress \n                value={metrics.cacheHitRate} \n                className=\"h-2\"\n              />\n            </div>\n\n            {/* Network Info */}\n            <div className=\"grid grid-cols-2 gap-4 pt-2 border-t\">\n              <div className=\"text-center\">\n                <p className=\"text-xs text-muted-foreground\">Network</p>\n                <p className=\"text-sm font-medium capitalize\">{metrics.connectionType}</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-xs text-muted-foreground\">DOM Nodes</p>\n                <p className=\"text-sm font-medium\">{metrics.domNodes.toLocaleString()}</p>\n              </div>\n            </div>\n\n            {/* Performance Tips */}\n            {(metrics.loadTime > 3000 || metrics.memoryUsage > 80) && (\n              <div className=\"flex items-start space-x-2 p-2 bg-yellow-50 dark:bg-yellow-950/20 rounded-lg\">\n                <AlertTriangle className=\"h-4 w-4 text-yellow-600 mt-0.5\" />\n                <div className=\"text-xs text-yellow-700 dark:text-yellow-300\">\n                  {metrics.loadTime > 3000 && <p>• Consider enabling browser caching</p>}\n                  {metrics.memoryUsage > 80 && <p>• High memory usage detected</p>}\n                </div>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":7521},"client/src/components/tasks/CreateTaskDialog.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Plus } from \"lucide-react\";\n\nconst createTaskSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  description: z.string().optional(),\n  dueDate: z.string().optional(),\n  priority: z.enum(['low', 'medium', 'high', 'urgent']).default('medium'),\n  estimatedHours: z.string().optional(),\n  isRequired: z.boolean().default(true),\n  orderIndex: z.number().default(0),\n});\n\ntype CreateTaskForm = z.infer<typeof createTaskSchema>;\n\ninterface CreateTaskDialogProps {\n  projectId: string;\n  trigger?: React.ReactNode;\n}\n\nexport default function CreateTaskDialog({ projectId, trigger }: CreateTaskDialogProps) {\n  const [open, setOpen] = useState(false);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<CreateTaskForm>({\n    resolver: zodResolver(createTaskSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      dueDate: \"\",\n      priority: \"medium\",\n      estimatedHours: \"\",\n      isRequired: true,\n      orderIndex: 0,\n    },\n  });\n\n  const createTaskMutation = useMutation({\n    mutationFn: async (data: CreateTaskForm) => {\n      const payload = {\n        ...data,\n        dueDate: data.dueDate ? new Date(data.dueDate).toISOString() : null,\n        estimatedHours: data.estimatedHours ? parseFloat(data.estimatedHours) : null,\n      };\n\n      return apiRequest(\"POST\", `/api/projects/${projectId}/tasks`, payload);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Task Created\",\n        description: \"The new task has been created successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId, \"tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/tasks\"] });\n      form.reset();\n      setOpen(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: CreateTaskForm) => {\n    createTaskMutation.mutate(data);\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      <DialogTrigger asChild>\n        {trigger || (\n          <Button data-testid=\"button-create-task\">\n            <Plus className=\"h-4 w-4 mr-2\" />\n            Add Task\n          </Button>\n        )}\n      </DialogTrigger>\n      \n      <DialogContent className=\"sm:max-w-[600px]\" data-testid=\"dialog-create-task\">\n        <DialogHeader>\n          <DialogTitle>Create New Task</DialogTitle>\n          <DialogDescription>\n            Add a new task to this project. Students will be able to see and complete these tasks.\n          </DialogDescription>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-4\">\n            <FormField\n              control={form.control}\n              name=\"title\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Task Title *</FormLabel>\n                  <FormControl>\n                    <Input \n                      placeholder=\"Enter task title...\" \n                      {...field}\n                      data-testid=\"input-task-title\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Provide task details and instructions...\"\n                      className=\"min-h-[80px]\"\n                      {...field}\n                      data-testid=\"input-task-description\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Optional detailed instructions for the task\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"priority\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Priority</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-task-priority\">\n                          <SelectValue placeholder=\"Select priority\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"low\">Low</SelectItem>\n                        <SelectItem value=\"medium\">Medium</SelectItem>\n                        <SelectItem value=\"high\">High</SelectItem>\n                        <SelectItem value=\"urgent\">Urgent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"estimatedHours\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Estimated Hours</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.5\"\n                        min=\"0\"\n                        placeholder=\"2.5\"\n                        {...field}\n                        data-testid=\"input-estimated-hours\"\n                      />\n                    </FormControl>\n                    <FormDescription>Optional time estimate</FormDescription>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"dueDate\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Due Date</FormLabel>\n                  <FormControl>\n                    <Input\n                      type=\"datetime-local\"\n                      {...field}\n                      data-testid=\"input-due-date\"\n                    />\n                  </FormControl>\n                  <FormDescription>\n                    Optional deadline for task completion\n                  </FormDescription>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex items-center justify-between\">\n              <FormField\n                control={form.control}\n                name=\"isRequired\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">\n                        Required Task\n                      </FormLabel>\n                      <FormDescription>\n                        Students must complete this task\n                      </FormDescription>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-required-task\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <DialogFooter>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setOpen(false)}\n                data-testid=\"button-cancel-task\"\n              >\n                Cancel\n              </Button>\n              <Button \n                type=\"submit\" \n                disabled={createTaskMutation.isPending}\n                data-testid=\"button-submit-task\"\n              >\n                {createTaskMutation.isPending ? \"Creating...\" : \"Create Task\"}\n              </Button>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":9309},"client/src/components/tasks/TaskCard.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { format } from \"date-fns\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  CheckCircle2, \n  Clock, \n  AlertTriangle, \n  Calendar,\n  User,\n  FileText\n} from \"lucide-react\";\n\ninterface TaskCardProps {\n  task: {\n    id: string;\n    title: string;\n    description?: string;\n    dueDate?: string;\n    priority: string;\n    estimatedHours?: string;\n    isRequired: boolean;\n    projectName?: string;\n    isCompleted?: boolean;\n  };\n  showProject?: boolean;\n  onTaskCompleted?: () => void;\n}\n\nconst priorityColors = {\n  low: \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\",\n  medium: \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\", \n  high: \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\",\n  urgent: \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\"\n};\n\nconst priorityIcons = {\n  low: Clock,\n  medium: Clock,\n  high: AlertTriangle,\n  urgent: AlertTriangle\n};\n\nexport default function TaskCard({ task, showProject = false, onTaskCompleted }: TaskCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showCompleteForm, setShowCompleteForm] = useState(false);\n  const [completionNotes, setCompletionNotes] = useState(\"\");\n  const [hoursSpent, setHoursSpent] = useState(\"\");\n\n  const completeTaskMutation = useMutation({\n    mutationFn: async (data: { notes?: string; hoursSpent?: number }) => {\n      return apiRequest(\"POST\", `/api/tasks/${task.id}/complete`, data);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Task Completed!\",\n        description: \"Great work completing this task.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/projects\"] });\n      setShowCompleteForm(false);\n      setCompletionNotes(\"\");\n      setHoursSpent(\"\");\n      onTaskCompleted?.();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to complete task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCompleteTask = () => {\n    if (task.isCompleted) return;\n    \n    const data: { notes?: string; hoursSpent?: number } = {};\n    if (completionNotes.trim()) data.notes = completionNotes.trim();\n    if (hoursSpent.trim()) data.hoursSpent = parseFloat(hoursSpent);\n    \n    completeTaskMutation.mutate(data);\n  };\n\n  const PriorityIcon = priorityIcons[task.priority as keyof typeof priorityIcons] || Clock;\n  const isOverdue = task.dueDate && new Date(task.dueDate) < new Date() && !task.isCompleted;\n\n  return (\n    <Card \n      className={`transition-all hover:shadow-md ${\n        task.isCompleted ? 'opacity-75 bg-muted/30' : ''\n      } ${isOverdue ? 'border-destructive' : ''}`}\n      data-testid={`task-card-${task.id}`}\n    >\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-start justify-between gap-3\">\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"flex items-center gap-2 mb-2\">\n              {task.isCompleted ? (\n                <CheckCircle2 className=\"h-5 w-5 text-green-600 flex-shrink-0\" />\n              ) : (\n                <PriorityIcon className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n              )}\n              <h3 className={`font-semibold text-sm line-clamp-2 ${\n                task.isCompleted ? 'line-through text-muted-foreground' : ''\n              }`}>\n                {task.title}\n              </h3>\n            </div>\n            \n            <div className=\"flex flex-wrap items-center gap-2\">\n              <Badge \n                variant=\"secondary\" \n                className={priorityColors[task.priority as keyof typeof priorityColors] || priorityColors.medium}\n                data-testid={`task-priority-${task.priority}`}\n              >\n                {task.priority}\n              </Badge>\n              \n              {task.isRequired && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  Required\n                </Badge>\n              )}\n              \n              {showProject && task.projectName && (\n                <Badge variant=\"outline\" className=\"text-xs\">\n                  <FileText className=\"h-3 w-3 mr-1\" />\n                  {task.projectName}\n                </Badge>\n              )}\n            </div>\n          </div>\n          \n          {!task.isCompleted && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => setShowCompleteForm(true)}\n              data-testid=\"button-complete-task\"\n            >\n              <CheckCircle2 className=\"h-4 w-4 mr-1\" />\n              Complete\n            </Button>\n          )}\n        </div>\n      </CardHeader>\n      \n      <CardContent className=\"pt-0\">\n        {task.description && (\n          <p className=\"text-sm text-muted-foreground mb-3 line-clamp-2\">\n            {task.description}\n          </p>\n        )}\n        \n        <div className=\"flex flex-wrap items-center gap-4 text-xs text-muted-foreground\">\n          {task.dueDate && (\n            <div className={`flex items-center gap-1 ${\n              isOverdue ? 'text-destructive font-medium' : ''\n            }`}>\n              <Calendar className=\"h-3 w-3\" />\n              Due {format(new Date(task.dueDate), \"MMM d, yyyy\")}\n            </div>\n          )}\n          \n          {task.estimatedHours && (\n            <div className=\"flex items-center gap-1\">\n              <Clock className=\"h-3 w-3\" />\n              {task.estimatedHours}h estimated\n            </div>\n          )}\n        </div>\n\n        {/* Task Completion Form */}\n        {showCompleteForm && !task.isCompleted && (\n          <div className=\"mt-4 p-4 border rounded-lg bg-muted/50\">\n            <h4 className=\"text-sm font-medium mb-3\">Complete Task</h4>\n            \n            <div className=\"space-y-3\">\n              <div>\n                <Label htmlFor=\"completion-notes\" className=\"text-xs\">\n                  Notes (optional)\n                </Label>\n                <Textarea\n                  id=\"completion-notes\"\n                  placeholder=\"Add any notes about completing this task...\"\n                  value={completionNotes}\n                  onChange={(e) => setCompletionNotes(e.target.value)}\n                  className=\"text-sm\"\n                  data-testid=\"input-completion-notes\"\n                />\n              </div>\n              \n              <div>\n                <Label htmlFor=\"hours-spent\" className=\"text-xs\">\n                  Hours Spent (optional)\n                </Label>\n                <Input\n                  id=\"hours-spent\"\n                  type=\"number\"\n                  step=\"0.5\"\n                  min=\"0\"\n                  placeholder=\"2.5\"\n                  value={hoursSpent}\n                  onChange={(e) => setHoursSpent(e.target.value)}\n                  className=\"text-sm\"\n                  data-testid=\"input-hours-spent\"\n                />\n              </div>\n              \n              <div className=\"flex gap-2\">\n                <Button\n                  size=\"sm\"\n                  onClick={handleCompleteTask}\n                  disabled={completeTaskMutation.isPending}\n                  data-testid=\"button-submit-completion\"\n                >\n                  {completeTaskMutation.isPending ? \"Completing...\" : \"Mark Complete\"}\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => setShowCompleteForm(false)}\n                  data-testid=\"button-cancel-completion\"\n                >\n                  Cancel\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":8282},"client/src/components/tasks/TaskList.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport TaskCard from \"./TaskCard\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  CheckSquare, \n  Clock, \n  AlertTriangle,\n  Calendar\n} from \"lucide-react\";\n\ninterface TaskListProps {\n  projectId?: string;\n  title?: string;\n  showProject?: boolean;\n}\n\nexport default function TaskList({ projectId, title = \"My Tasks\", showProject = true }: TaskListProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n\n  const apiEndpoint = projectId \n    ? `/api/user/projects/${projectId}/tasks`\n    : `/api/user/tasks`;\n\n  const { data: tasks, isLoading, error, refetch } = useQuery({\n    queryKey: projectId ? [\"/api/user/projects\", projectId, \"tasks\"] : [\"/api/user/tasks\"],\n    enabled: !!user?.id,\n    retry: false,\n  });\n\n  // Handle unauthorized errors\n  if (error && isUnauthorizedError(error)) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  if (isLoading) {\n    return (\n      <Card data-testid=\"task-list-loading\">\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Skeleton className=\"h-5 w-5\" />\n            <Skeleton className=\"h-6 w-32\" />\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"space-y-2\">\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-1/2\" />\n                <div className=\"flex gap-2\">\n                  <Skeleton className=\"h-5 w-16\" />\n                  <Skeleton className=\"h-5 w-12\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const taskArray = Array.isArray(tasks) ? tasks : [];\n  const completedTasks = taskArray.filter(task => task.isCompleted);\n  const incompleteTasks = taskArray.filter(task => !task.isCompleted);\n  const overdueTasks = incompleteTasks.filter(task => \n    task.dueDate && new Date(task.dueDate) < new Date()\n  );\n\n  // Sort incomplete tasks: overdue first, then by due date, then by priority\n  const sortedIncompleteTasks = [...incompleteTasks].sort((a, b) => {\n    // Overdue tasks first\n    const aOverdue = a.dueDate && new Date(a.dueDate) < new Date();\n    const bOverdue = b.dueDate && new Date(b.dueDate) < new Date();\n    if (aOverdue && !bOverdue) return -1;\n    if (!aOverdue && bOverdue) return 1;\n\n    // Then by due date\n    if (a.dueDate && b.dueDate) {\n      const dateComparison = new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();\n      if (dateComparison !== 0) return dateComparison;\n    }\n    if (a.dueDate && !b.dueDate) return -1;\n    if (!a.dueDate && b.dueDate) return 1;\n\n    // Then by priority\n    const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 };\n    return (priorityOrder[b.priority as keyof typeof priorityOrder] || 2) - \n           (priorityOrder[a.priority as keyof typeof priorityOrder] || 2);\n  });\n\n  return (\n    <Card data-testid=\"task-list\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-2\">\n            <CheckSquare className=\"h-5 w-5 text-primary\" />\n            <h3 className=\"text-lg font-semibold\">{title}</h3>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            {overdueTasks.length > 0 && (\n              <Badge variant=\"destructive\" className=\"text-xs\">\n                <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                {overdueTasks.length} overdue\n              </Badge>\n            )}\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              {incompleteTasks.length} active\n            </Badge>\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {completedTasks.length} completed\n            </Badge>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        {taskArray.length === 0 ? (\n          <div className=\"text-center py-12 text-muted-foreground\" data-testid=\"no-tasks-message\">\n            <CheckSquare className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n            <p className=\"text-lg font-medium mb-2\">No tasks assigned</p>\n            <p className=\"text-sm\">\n              {projectId \n                ? \"This project doesn't have any tasks assigned to you yet.\" \n                : \"You don't have any tasks assigned across all projects.\"}\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {/* Active/Incomplete Tasks */}\n            {sortedIncompleteTasks.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium text-muted-foreground mb-3 flex items-center gap-2\">\n                  <Clock className=\"h-4 w-4\" />\n                  Active Tasks ({sortedIncompleteTasks.length})\n                </h4>\n                <div className=\"space-y-3\">\n                  {sortedIncompleteTasks.map((task) => (\n                    <TaskCard\n                      key={task.id}\n                      task={task}\n                      showProject={showProject}\n                      onTaskCompleted={() => refetch()}\n                    />\n                  ))}\n                </div>\n              </div>\n            )}\n\n            {/* Completed Tasks */}\n            {completedTasks.length > 0 && (\n              <div>\n                <h4 className=\"text-sm font-medium text-muted-foreground mb-3 flex items-center gap-2\">\n                  <CheckSquare className=\"h-4 w-4\" />\n                  Completed Tasks ({completedTasks.length})\n                </h4>\n                <div className=\"space-y-3\">\n                  {completedTasks.map((task) => (\n                    <TaskCard\n                      key={task.id}\n                      task={task}\n                      showProject={showProject}\n                    />\n                  ))}\n                </div>\n              </div>\n            )}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":6493},"client/src/components/tasks/TaskManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { format } from \"date-fns\";\nimport TaskCard from \"./TaskCard\";\nimport CreateTaskDialog from \"./CreateTaskDialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { \n  CheckSquare, \n  Users, \n  Plus, \n  Trash2, \n  Edit,\n  Clock,\n  AlertTriangle\n} from \"lucide-react\";\n\ninterface TaskManagementProps {\n  projectId: string;\n  projectName: string;\n  isProfesor?: boolean;\n}\n\ninterface ProjectTask {\n  id: string;\n  title: string;\n  description?: string;\n  dueDate?: string;\n  priority: string;\n  estimatedHours?: string;\n  isRequired: boolean;\n  orderIndex: number;\n  createdAt: string;\n  createdBy: string;\n}\n\nexport default function TaskManagement({ projectId, projectName, isProfesor = false }: TaskManagementProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedUserId, setSelectedUserId] = useState<string>(\"\");\n\n  const { data: tasks, isLoading: tasksLoading, error: tasksError } = useQuery({\n    queryKey: [\"/api/projects\", projectId, \"tasks\"],\n    enabled: !!projectId,\n    retry: false,\n  });\n\n  const { data: users, isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/users\"],\n    enabled: isProfesor,\n    retry: false,\n  });\n\n  const deleteTaskMutation = useMutation({\n    mutationFn: async (taskId: string) => {\n      return apiRequest(\"DELETE\", `/api/tasks/${taskId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Task Deleted\",\n        description: \"The task has been deleted successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\", projectId, \"tasks\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/tasks\"] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const assignTaskMutation = useMutation({\n    mutationFn: async ({ taskId, userId }: { taskId: string; userId: string }) => {\n      return apiRequest(\"POST\", `/api/tasks/${taskId}/assign`, { userId });\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Task Assigned\",\n        description: \"The task has been assigned successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/tasks\"] });\n      setSelectedUserId(\"\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to assign task\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Handle unauthorized errors\n  if (tasksError && isUnauthorizedError(tasksError)) {\n    toast({\n      title: \"Unauthorized\",\n      description: \"You are logged out. Logging in again...\",\n      variant: \"destructive\",\n    });\n    setTimeout(() => {\n      window.location.href = \"/api/login\";\n    }, 500);\n    return null;\n  }\n\n  if (tasksLoading) {\n    return (\n      <Card data-testid=\"task-management-loading\">\n        <CardHeader>\n          <div className=\"flex items-center gap-2\">\n            <Skeleton className=\"h-5 w-5\" />\n            <Skeleton className=\"h-6 w-48\" />\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[1, 2, 3].map((i) => (\n              <div key={i} className=\"space-y-2\">\n                <Skeleton className=\"h-4 w-3/4\" />\n                <Skeleton className=\"h-3 w-1/2\" />\n                <div className=\"flex gap-2\">\n                  <Skeleton className=\"h-5 w-16\" />\n                  <Skeleton className=\"h-5 w-12\" />\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const taskArray = Array.isArray(tasks) ? tasks : [];\n  const overdueTasks = taskArray.filter((task: ProjectTask) => \n    task.dueDate && new Date(task.dueDate) < new Date()\n  );\n\n  const studentUsers = Array.isArray(users) \n    ? users.filter((u: any) => u.role === 'student' || u.role === 'postdoc')\n    : [];\n\n  const handleAssignTask = (taskId: string) => {\n    if (!selectedUserId) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a user to assign the task to.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    assignTaskMutation.mutate({ taskId, userId: selectedUserId });\n  };\n\n  return (\n    <div className=\"space-y-6\" data-testid=\"task-management\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-2xl font-bold text-foreground flex items-center gap-2\">\n            <CheckSquare className=\"h-6 w-6\" />\n            Project Tasks\n          </h2>\n          <p className=\"text-muted-foreground\">\n            {isProfesor ? \"Manage tasks and assignments for\" : \"Tasks for\"} {projectName}\n          </p>\n        </div>\n        \n        {isProfesor && (\n          <CreateTaskDialog \n            projectId={projectId}\n            trigger={\n              <Button data-testid=\"button-add-task\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Task\n              </Button>\n            }\n          />\n        )}\n      </div>\n\n      {/* Task Assignment Section (Professor only) */}\n      {isProfesor && !usersLoading && studentUsers.length > 0 && (\n        <Card>\n          <CardHeader>\n            <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n              <Users className=\"h-5 w-5\" />\n              Assign Tasks to Students\n            </h3>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center gap-4\">\n              <Select value={selectedUserId} onValueChange={setSelectedUserId}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-assign-user\">\n                  <SelectValue placeholder=\"Select student...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {studentUsers.map((user: any) => (\n                    <SelectItem key={user.id} value={user.id}>\n                      {user.firstName} {user.lastName}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <p className=\"text-sm text-muted-foreground\">\n                Select a student to assign tasks to them\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Task Statistics */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-foreground\">{taskArray.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Total Tasks</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-blue-600\">{taskArray.filter((t: any) => t.priority === 'high' || t.priority === 'urgent').length}</div>\n              <div className=\"text-sm text-muted-foreground\">High Priority</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-orange-600\">{overdueTasks.length}</div>\n              <div className=\"text-sm text-muted-foreground\">Overdue</div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-2xl font-bold text-green-600\">{taskArray.filter((t: any) => t.isRequired).length}</div>\n              <div className=\"text-sm text-muted-foreground\">Required</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tasks List */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"text-lg font-semibold\">All Tasks</h3>\n            {overdueTasks.length > 0 && (\n              <Badge variant=\"destructive\">\n                <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                {overdueTasks.length} overdue\n              </Badge>\n            )}\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          {taskArray.length === 0 ? (\n            <div className=\"text-center py-12 text-muted-foreground\">\n              <CheckSquare className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p className=\"text-lg font-medium mb-2\">No tasks created yet</p>\n              <p className=\"text-sm\">\n                {isProfesor \n                  ? \"Create your first task to get students started on the project.\"\n                  : \"No tasks have been assigned to this project yet.\"}\n              </p>\n              {isProfesor && (\n                <CreateTaskDialog \n                  projectId={projectId}\n                  trigger={\n                    <Button className=\"mt-4\" variant=\"outline\">\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Create First Task\n                    </Button>\n                  }\n                />\n              )}\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {taskArray.map((task: ProjectTask) => (\n                <div key={task.id} className=\"group border rounded-lg p-4 hover:bg-muted/20\">\n                  <div className=\"flex items-start justify-between gap-4\">\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <h4 className=\"font-semibold text-sm\">{task.title}</h4>\n                        <Badge \n                          variant=\"secondary\"\n                          className={`text-xs ${\n                            task.priority === 'urgent' ? 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200' :\n                            task.priority === 'high' ? 'bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200' :\n                            task.priority === 'medium' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :\n                            'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200'\n                          }`}\n                        >\n                          {task.priority}\n                        </Badge>\n                        {task.isRequired && (\n                          <Badge variant=\"outline\" className=\"text-xs\">Required</Badge>\n                        )}\n                      </div>\n                      \n                      {task.description && (\n                        <p className=\"text-sm text-muted-foreground mb-2 line-clamp-2\">\n                          {task.description}\n                        </p>\n                      )}\n                      \n                      <div className=\"flex items-center gap-4 text-xs text-muted-foreground\">\n                        {task.dueDate && (\n                          <span className={`flex items-center gap-1 ${\n                            new Date(task.dueDate) < new Date() ? 'text-destructive font-medium' : ''\n                          }`}>\n                            <Clock className=\"h-3 w-3\" />\n                            Due {format(new Date(task.dueDate), \"MMM d, yyyy\")}\n                          </span>\n                        )}\n                        {task.estimatedHours && (\n                          <span className=\"flex items-center gap-1\">\n                            <Clock className=\"h-3 w-3\" />\n                            {task.estimatedHours}h estimated\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                    \n                    {isProfesor && (\n                      <div className=\"flex items-center gap-2\">\n                        {selectedUserId && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => handleAssignTask(task.id)}\n                            disabled={assignTaskMutation.isPending}\n                            data-testid={`button-assign-task-${task.id}`}\n                          >\n                            <Users className=\"h-3 w-3 mr-1\" />\n                            Assign\n                          </Button>\n                        )}\n                        \n                        <AlertDialog>\n                          <AlertDialogTrigger asChild>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              className=\"text-destructive hover:bg-destructive hover:text-destructive-foreground\"\n                              data-testid={`button-delete-task-${task.id}`}\n                            >\n                              <Trash2 className=\"h-3 w-3\" />\n                            </Button>\n                          </AlertDialogTrigger>\n                          <AlertDialogContent>\n                            <AlertDialogHeader>\n                              <AlertDialogTitle>Delete Task</AlertDialogTitle>\n                              <AlertDialogDescription>\n                                Are you sure you want to delete \"{task.title}\"? This action cannot be undone and will remove all associated assignments and completions.\n                              </AlertDialogDescription>\n                            </AlertDialogHeader>\n                            <AlertDialogFooter>\n                              <AlertDialogCancel>Cancel</AlertDialogCancel>\n                              <AlertDialogAction\n                                onClick={() => deleteTaskMutation.mutate(task.id)}\n                                className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n                              >\n                                Delete Task\n                              </AlertDialogAction>\n                            </AlertDialogFooter>\n                          </AlertDialogContent>\n                        </AlertDialog>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":15008}},"version":1}