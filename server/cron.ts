import cron from 'node-cron';
import { storage } from './storage';
import { sendEmail } from './email';

export function setupWeeklyDigest() {
  const cronExpr = process.env.DIGEST_CRON || '0 8 * * MON';

  // Compose a minimal digest for now
  const job = async () => {
    try {
      const users = await storage.getAllUsers();

      for (const user of users) {
        if (!user.email || !user.isActive) continue;

        const tasks = await storage.getUserTasks(user.id);
        const overdue = tasks.filter(t => t.dueDate && new Date(t.dueDate) < new Date() && !t.isCompleted);

        const schedules = await storage.getUserWorkSchedules(user.id);
        const thisWeek = new Date();
        const weekStartIso = new Date(thisWeek.setDate(thisWeek.getDate() - thisWeek.getDay())).toISOString().slice(0,10);
        const hasScheduleThisWeek = schedules.some(s => String(s.weekStartDate) === weekStartIso);

        const html = `
          <h3>Your weekly lab digest</h3>
          <p><strong>Overdue tasks:</strong> ${overdue.length}</p>
          <p><strong>Schedule submitted this week:</strong> ${hasScheduleThisWeek ? 'Yes' : 'No'}</p>
          <p style="font-size:12px;color:#666;margin-top:16px">This email was generated by DataProfessor Dashboard.</p>
        `;

        await sendEmail(user.email, 'Your weekly lab digest', html);
      }
    } catch (err) {
      console.error('[cron] weekly digest failed:', err);
    }
  };

  // Schedule
  cron.schedule(cronExpr, job, { timezone: 'UTC' });
}
